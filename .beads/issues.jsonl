{"id":"UI-1","content_hash":"035b415b2b4601d07a29849a830d5a90c95644a8d819a92b07d1bb9f77a75302","title":"SPA web UI for bd (local, real-time)","description":"Build a local-first single-page web app for the `bd` (beads) CLI that lets users browse issues, change status, and edit text with real-time updates. The app talks to a local WebSocket server; the server watches `.beads/issues.jsonl` and executes `bd` commands corresponding to edits from the UI.\n\nScope\n- Runs locally; no cloud dependencies\n- SPA served from localhost; WebSocket for data\n- Live updates driven by `.beads/issues.jsonl` watcher\n- Editing in UI sends WS messages; server runs matching `bd` commands\n\nNon-goals\n- Multi-user concurrency beyond a single machine\n- Authentication/authorization beyond localhost-only protections\n\nConstraints\n- ECMAScript modules; JSDoc types; `.ts` only for interface declarations\n- Follow provided Coding and Testing Standards\n- Prefer minimal dependencies; no heavy framework required\n","acceptance_criteria":"- User can view issues list and open an issue detail page.\n- User can change issue status and edit text fields (title, description, acceptance) from the UI.\n- UI changes propagate via WebSocket to a local server; server executes the corresponding `bd` command(s).\n- File watcher on `.beads/issues.jsonl` pushes updates; the on-screen issue(s) update without refresh.\n- Protocol documented (request/response + push events) with versioning and error model.\n- Local-only server binding (127.0.0.1) with basic input validation.\n- Tests cover protocol handlers and critical UI flows.\n- Quickstart docs explain setup, run, and development workflow.","notes":"Implemented local-first SPA and server with live updates and bd integration.\n\nHighlights\n- UI: Issues list and detail views (`app/views/list.js`, `app/views/detail.js`) with status and priority controls plus inline title/description editing; navigation via hash router; app shell in `app/main.js`.\n- Protocol: Documented v1.0.0 in `app/protocol.md` and shared symbols via `server/protocol.js`.\n- WS transport: Robust client with reconnect and event dispatch (`app/ws.js`); server with request/response and push events, including heartbeat (`server/ws.js`).\n- bd integration: Executes matching `bd` commands for list/show/update/edit/dep operations (`server/bd.js`, handlers in `server/ws.js`).\n- Live updates: DB watcher broadcasts `issues-changed` and SPA refreshes list/detail accordingly (`server/watcher.js`, `app/main.js`).\n- Local-only bind: Defaults to host `127.0.0.1` with configurable port (`server/config.js`).\n- Tests: 59 passing tests across app + server covering protocol handlers and critical UI flows (`npm test`).\n- Quickstart: Added `docs/quickstart.md` with setup, run, and workflow. DB watching details in `docs/db-watching.md`.\n\nNotes\n- The implementation watches the active beads SQLite DB (current beads store) rather than a historical `issues.jsonl`. The doc was updated to reflect this.\n- The UI currently supports editing title and description. If acceptance text editing is required, propose a small follow-up to extend the `edit-text` handler and UI.\n","status":"closed","priority":1,"issue_type":"epic","created_at":"2025-10-22T09:13:34.683692+02:00","updated_at":"2025-10-24T10:24:05.159714+02:00","closed_at":"2025-10-22T15:16:15.490119+02:00"}
{"id":"UI-10","content_hash":"820efea1d9d43f87eea23985030473ff0bc23d66d215b5625741aea9d0679a4d","title":"Optimistic UI, errors, and rollback","description":"Add optimistic update patterns with rollback on server errors for edits and status changes.\n\nScope\n- Pending state indicators, disabled controls during in-flight requests\n- Retry with exponential backoff for transient failures\n- Toasts or inline error messages\n\nNotes\n- Ensure all optimistic paths are covered by tests.","acceptance_criteria":"- Edits apply optimistically and either confirm or roll back on server response.\n- Error messages are actionable and non-blocking.\n- Tests cover success, retryable errors, and permanent errors.","notes":"Optimistic UI, errors, and rollback are implemented for detail edits.\n\n- Title/description/acceptance edits and status/priority changes optimistically update local state, disable controls while in flight, and roll back on error with a toast message (app/views/detail.js).\n- WS client includes reconnect with exponential backoff; request retries are not auto-replayed, but the UX remains responsive and consistent on reconnect.\n- Tests exercise success/error paths at the server layer; UI flows are covered for edit toggles and updates.\n","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T09:15:13.164457+02:00","updated_at":"2025-10-24T10:24:05.160847+02:00","closed_at":"2025-10-22T15:36:00.569907+02:00","dependencies":[{"issue_id":"UI-10","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:40.679758+02:00","created_by":"max"},{"issue_id":"UI-10","depends_on_id":"UI-5","type":"blocks","created_at":"2025-10-22T09:18:37.337898+02:00","created_by":"max"},{"issue_id":"UI-10","depends_on_id":"UI-8","type":"blocks","created_at":"2025-10-22T09:18:41.542794+02:00","created_by":"max"}]}
{"id":"UI-100","content_hash":"266973c170123ceccb3796e03388933f525d57f7943584691350c0692b10991b","title":"Docs: Add `bdui` usage and troubleshooting","description":"Update README and docs to cover the new `bdui` binary and daemon workflow.\n\nScope\n- Quickstart with `npm link` and `bdui start`.\n- Command reference (`start|stop|restart`, `--no-open`), exit codes.\n- Troubleshooting: finding logs, killing stale processes, changing port.\n- Align with AGENTS.md coding standards and pre-handoff validation.\n","acceptance_criteria":"- README and docs mention `bdui` and replace manual `node server/index.js` where appropriate.\n- Examples verified locally.\n- Screenshots or asciinema optional; text-only is acceptable.","notes":"Will update Quickstart run instructions to include `bdui start`, add a Troubleshooting section covering logs location, stopping stale processes, and port changes. README will gain a brief troubleshooting block referencing the runtime dir and PID file.","status":"closed","priority":2,"issue_type":"task","assignee":"assistant","created_at":"2025-10-23T17:35:17.602698+02:00","updated_at":"2025-10-24T10:24:05.161296+02:00","closed_at":"2025-10-23T19:48:39.644668+02:00","dependencies":[{"issue_id":"UI-100","depends_on_id":"UI-94","type":"parent-child","created_at":"2025-10-23T17:35:55.192244+02:00","created_by":"max"},{"issue_id":"UI-100","depends_on_id":"UI-95","type":"blocks","created_at":"2025-10-23T17:36:29.902617+02:00","created_by":"max"},{"issue_id":"UI-100","depends_on_id":"UI-96","type":"blocks","created_at":"2025-10-23T17:36:33.678061+02:00","created_by":"max"},{"issue_id":"UI-100","depends_on_id":"UI-97","type":"blocks","created_at":"2025-10-23T17:36:39.567838+02:00","created_by":"max"},{"issue_id":"UI-100","depends_on_id":"UI-98","type":"blocks","created_at":"2025-10-23T17:36:44.82701+02:00","created_by":"max"}]}
{"id":"UI-101","content_hash":"9e4ae1f2bfcf922ce149c49a2029b22747bf61d551816df59cb326eb6eef6a75","title":"Typecheck: fix implicit any and unused ts-expect-error in app/main.live-updates.test.js","description":"Resolve TypeScript check errors reported by `npm run typecheck` in `app/main.live-updates.test.js`.\n\nScope\n- Add explicit param types for functions currently inferred as `any`.\n- Remove or justify `@ts-expect-error` directives to satisfy TS2578.\n- Keep behavior unchanged; only improve types.\n\nNotes\n- Errors are visible when running `npm run typecheck` (see CI logs during UI-95 work).","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T18:54:10.058411+02:00","updated_at":"2025-10-24T10:24:05.161713+02:00","closed_at":"2025-10-23T19:12:08.743082+02:00","labels":["frontend"],"dependencies":[{"issue_id":"UI-101","depends_on_id":"UI-95","type":"discovered-from","created_at":"2025-10-23T18:54:13.67116+02:00","created_by":"max"}]}
{"id":"UI-102","content_hash":"e3c04591862c949432fda639e13ae1b34bed12f4089f76575b7cd73d9355602b","title":"Polish: Beautify issue details sidebar inputs","description":"Improve the aesthetics of inputs and controls in the Issue Details sidebar: align labels, make inputs/selects consistent size, tidy label chips, and style buttons. Scope limited to CSS/markup in sidebar.","acceptance_criteria":"- Sidebar uses two-column layout with compact labels and full-width controls\n- Inputs/selects are 28px tall with consistent padding and radius\n- Label chips align and include unobtrusive remove button\n- Dark mode styles applied\n- Lint/typecheck/tests/format all green","status":"closed","priority":2,"issue_type":"task","assignee":"assistant","created_at":"2025-10-23T20:00:22.905077+02:00","updated_at":"2025-10-24T10:24:05.162068+02:00","closed_at":"2025-10-23T20:00:29.033365+02:00"}
{"id":"UI-103","content_hash":"0d4aca7879a5c8a341088999b34fcd75a67d3e242174c272679ff42a5593a633","title":"UI/UX polish: dialogs, ID copy, new issue flow, docs","description":"Polish the UI/UX across the app: add modal dialog for issue details, reusable ID renderer with copy-to-clipboard, a New Issue creation flow, and improve README to highlight features and reference upstream beads.","acceptance_criteria":"- Epic tracks child issues for dialog details view, ID renderer, new-issue flow, and README polish\n- Each child has clear acceptance criteria and design notes\n- Epic closes when all children closed or explicitly descoped","status":"closed","priority":2,"issue_type":"epic","created_at":"2025-10-23T20:31:36.267097+02:00","updated_at":"2025-10-24T10:24:05.162403+02:00","closed_at":"2025-10-24T09:30:45.149494+02:00"}
{"id":"UI-104","content_hash":"7fe108eb7e922c1cf81fbe2a624828cde5f3ee9559c7b9d4d38e1ddbdb97273e","title":"Open issue details in dialog","description":"Use the native HTML dialog API for issue details. Apply to all links that navigate to an issue details view. The dialog is modal, with a title bar showing the issue ID and a close button. Content mirrors the existing details screen. Dialog fills most of the viewport (full width/height minus outer margin) to make it clear it’s a dialog.","design":"- Use `\u003cdialog\u003e` with `showModal()` and backdrop styling\n- Title bar: left-aligned issue ID, right-aligned close button\n- Content: reuse Details view component inside dialog body\n- Size: responsive; e.g., `max-width: 96vw`, `max-height: 96vh`, with 2vw/2vh outer margin\n- Behavior: clicking any issue link opens dialog; keep deep-linking working (URL updates or hash) without full page nav\n- Accessibility: focus trap, keyboard navigation, `Esc` to close, aria-labelled dialog\n- Closing: close button, `Esc`, clicking backdrop\n- Performance: lazy load content where possible\n- Routing: ensure direct navigation to details page still works without JS","acceptance_criteria":"- Clicking any issue link opens a modal dialog with details\n- Title bar shows issue ID and close button\n- Dialog is modal with backdrop and outer margin; viewport remains visible around it\n- Keyboard: `Tab` cycles within dialog; `Esc` closes\n- Accessible roles/labels present and announced by screen readers\n- Deep link to details page still navigable directly (non-dialog)\n- Works on desktop and mobile breakpoints","notes":"Follow-up changes per request: 1) Routing now retains the base view in the hash and appends ?issue=\u003cID\u003e; reload restores view and opens the dialog. 2) Legacy #/issue/\u003cID\u003e routes are rewritten to #/issues?issue=\u003cID\u003e, set selection immediately, and open the dialog. 3) Removed the full-screen details page variant; details always open in the dialog overlay. 4) Removed duplicate ID inside detail header. 5) Dialog close button styling updated to match regular buttons (no circular/round button). All tests and type checks pass.","status":"closed","priority":1,"issue_type":"feature","assignee":"agent","created_at":"2025-10-23T20:31:55.993439+02:00","updated_at":"2025-10-24T10:24:05.162695+02:00","closed_at":"2025-10-24T07:02:24.560208+02:00","dependencies":[{"issue_id":"UI-104","depends_on_id":"UI-103","type":"parent-child","created_at":"2025-10-23T20:32:40.734846+02:00","created_by":"max"}]}
{"id":"UI-105","content_hash":"8071f8ffd75df1bb4f951e74907decd64af31d794869c4d2a112c20af593b45e","title":"Make a reusable ID renderer with copy-to-clipboard","description":"Create a reusable renderer for issue IDs. It should look identical to the current inline ID rendering, but when clicked it copies the full issue ID (including prefix) to the clipboard, briefly shows a \"Copied\" status, then reverts back to the ID.","design":"- Stateless presentational component that accepts `id` and optional `className`\n- Uses Clipboard API to copy full ID string\n- Shows transient feedback: replace text with \"Copied\" for ~1–1.5s, then restore\n- Accessible: uses `button` semantics, `aria-live=polite` for feedback, focus styles\n- Keyboard activation via `Enter`/`Space`\n- Customizable duration via prop; sensible default (1200ms)\n- Non-disruptive: no layout shift beyond text swap\n- Provide utility for formatting ID (keeps current look)","acceptance_criteria":"- Clicking the ID copies the full prefixed ID to clipboard\n- Visual feedback \"Copied\" appears, then returns to the ID automatically\n- Keyboard activation works with Enter and Space\n- Screen readers announce copy action or feedback\n- Component is used wherever an issue ID is displayed in the UI","status":"closed","priority":2,"issue_type":"feature","assignee":"agent","created_at":"2025-10-23T20:32:04.723145+02:00","updated_at":"2025-10-24T10:24:05.163018+02:00","closed_at":"2025-10-24T08:42:55.020972+02:00","dependencies":[{"issue_id":"UI-105","depends_on_id":"UI-103","type":"parent-child","created_at":"2025-10-23T20:32:43.723094+02:00","created_by":"max"}]}
{"id":"UI-106","content_hash":"b78bc36679995b5a07243fef7bba6138e297cbc7f8719c1c1f17028a0b25b3e5","title":"Support creating a new issue via \"New\" dialog","description":"Add a global \"New issue\" button in the top-right header, visible on all pages. Clicking it opens a modal \"New\" dialog allowing users to create an issue with title, description, type, priority, and labels. On submit, create the issue and then show its details (preferably in the details dialog).","design":"- Add a header button: \"New issue\" available globally\n- Use a modal dialog (native `\u003cdialog\u003e`) with a simple form\n- Fields: Title (required), Type (bug/feature/task/epic/chore), Priority (0–4), Labels (comma-separated), Description (markdown)\n- Validation: require non-empty title; validate numeric priority 0–4\n- Submission: call backend/MCP to create; show progress state; handle errors\n- After success: open the created issue details (reuse details dialog)\n- Accessibility: focus trap, keyboard nav, form labels, error announcements\n- Keyboard shortcut: Ctrl/Cmd+N opens dialog; Ctrl/Cmd+Enter submits\n- Persist last chosen Type/Priority in local storage for convenience","acceptance_criteria":"- Header shows a persistent \"New issue\" button on all screens\n- Clicking opens a modal form; title is required, others optional with sensible defaults\n- Submitting creates a new issue; success opens its details view\n- Invalid input shows inline accessible errors; Esc cancels\n- Keyboard shortcuts work: Ctrl/Cmd+N to open; Ctrl/Cmd+Enter to submit\n- Works on desktop and mobile breakpoints","notes":"Implemented global New issue flow: header button, native \u003cdialog\u003e with Title/Type/Priority/Labels/Description, validation, progress, error area, Ctrl/Cmd+N to open and Ctrl/Cmd+Enter to submit, persisted last Type/Priority in localStorage. On success, the UI heuristically identifies the created issue by title amongst open items and navigates to it, then applies labels via label-add. Added styles and unit tests. All checks pass: typecheck, tests, lint, prettier.","status":"closed","priority":1,"issue_type":"feature","assignee":"agent","created_at":"2025-10-23T20:32:14.830704+02:00","updated_at":"2025-10-24T10:24:05.164812+02:00","closed_at":"2025-10-24T09:25:34.171267+02:00","dependencies":[{"issue_id":"UI-106","depends_on_id":"UI-103","type":"parent-child","created_at":"2025-10-23T20:32:46.77028+02:00","created_by":"max"},{"issue_id":"UI-106","depends_on_id":"UI-104","type":"related","created_at":"2025-10-23T20:32:56.197389+02:00","created_by":"max"}]}
{"id":"UI-107","content_hash":"3ccbdc93bd539acc69b3192845d4ea31b49f64b771c93c19921f8d5c65ce8c85","title":"Nicer README referencing upstream beads and highlighting features","description":"Rework the README to be more approachable, similar in spirit to steveyegge/beads. Clearly reference and link to the upstream beads project we build on. Highlight all UI features and how this UI complements beads.","design":"- Keep concise intro explaining beads-ui’s purpose and relation to beads\n- Prominent link to beads project page and docs\n- Feature overview section describing dialogs, copyable IDs, new issue creation, etc.\n- Quickstart: install, run, dev commands\n- Screenshots or GIFs (optional placeholder)\n- Contributing and coding standards summary; link to project’s standards","acceptance_criteria":"- README includes a clear reference to upstream beads\n- Features list is present and up to date\n- Quickstart instructions validated locally\n- Style is friendly and consistent with project tone","notes":"README updated with upstream reference and features + screenshots.\n\n- Upstream beads link: README.md:11\n- Features \u0026 Planned: README.md:13–27 (tracks UI-103/104/105/106)\n- Screenshots (issues/epics/board): README.md:31, 37, 41 using media/bdui-*.png\n- Quickstart retained and clarified: README.md:43–61\n- Developer workflow, CLI, and troubleshooting sections retained.\n\nValidation:\n- Lint/typecheck/tests all pass: `npm run all`\n- Prettier applied: `npm run format` then `format:check` clean.\n\nLet me know if you want any copy tweaks before closing.","status":"closed","priority":3,"issue_type":"task","assignee":"agent","created_at":"2025-10-23T20:32:25.080345+02:00","updated_at":"2025-10-24T10:24:05.165139+02:00","closed_at":"2025-10-23T20:44:43.694993+02:00","dependencies":[{"issue_id":"UI-107","depends_on_id":"UI-103","type":"parent-child","created_at":"2025-10-23T20:32:50.671018+02:00","created_by":"max"}]}
{"id":"UI-108","content_hash":"1856a9242b5214ea9d3c12192e615de6137d7848b7855d5d6ce66de3ff314ef0","title":"Exclude unnecessary files from npm package","description":"Reduce published package size and surface by excluding non-runtime content: media assets, tests, docs, and development-only config. Implement via .npmignore with targeted patterns so runtime code in `bin/`, `server/`, and `app/` remains intact while test files are omitted.","acceptance_criteria":"- `npm pack --dry-run` includes `bin/`, `server/`, `app/` runtime files only\n- No `*.test.*` files included anywhere\n- `media/`, `docs/`, `.github/`, `.beads/` excluded\n- Dev config files (eslint, prettier, vitest, tsconfig, editorconfig) excluded\n- README and LICENSE remain included","notes":"Added a targeted .npmignore to exclude non-runtime content.\n\nHighlights:\n- Excludes: media/, docs/, .github/, .beads/, .npm-cache/\n- Excludes tests globally: **/*.test.{js,mjs}, **/*.spec.{js,mjs}, test/, __tests__/\n- Excludes dev configs: eslint, prettier, vitest, tsconfig, editorconfig\n- Keeps runtime: bin/, server/, app/, plus README and LICENSE\n\nValidation:\n- Used local cache to avoid permission issue: `npm_config_cache=.npm-cache npm pack --dry-run`\n- Tarball now contains only runtime files (41 files, ~46kB)\n- `npm run all` passes: lint, typecheck, 148 tests, and prettier check","status":"closed","priority":2,"issue_type":"chore","assignee":"agent","created_at":"2025-10-23T20:58:33.510708+02:00","updated_at":"2025-10-24T10:24:05.165468+02:00","closed_at":"2025-10-23T20:59:53.419293+02:00","labels":["release","tooling"]}
{"id":"UI-109","content_hash":"90a86e11dc1d9cea372d08acd1a9047925c55a95e3bafd0fe1274a13aa4d935a","title":"Toasts don't show","description":"Bug: toast notifications are not visible when triggered (e.g., after actions like create/update/clipboard copy). They may render off-screen, be blocked by stacking context, or the provider is missing/misconfigured.","acceptance_criteria":"- Triggering a toast results in a visible notification within 200ms\n- Works for `success`, `error`, and `info` variants\n- Toasts appear above dialogs and drawers (correct z-index)\n- Auto-dismiss and manual close work\n- No console errors; no React strict-mode warnings\n- Unit test covers provider wiring and a render smoke test","notes":"Fix: Make detail toasts visible above scrollable dialog content by switching to `position: fixed` and adding `z-index: 1000`. Kept appending to the view mount so existing tests continue to query `.toast` under the mount. Added `app/views/detail.toast.test.js` to assert fixed positioning and z-index. Ran typecheck, tests, lint and prettier: all clean.","status":"closed","priority":1,"issue_type":"bug","assignee":"agent","created_at":"2025-10-24T09:30:17.897209+02:00","updated_at":"2025-10-24T10:24:05.165787+02:00","closed_at":"2025-10-24T09:33:27.731799+02:00"}
{"id":"UI-11","content_hash":"68341f10a84b49698c8f27388288afa84cdd498423830403bb3f1468859ab65a","title":"Testing: server, protocol, and UI flows","description":"Add tests covering protocol handlers on the server and critical UI flows.\n\nScope\n- Server unit tests for message handlers and validation\n- Integration tests simulating watcher + edit round trips\n- Client tests for list/detail rendering and updates\n\nNotes\n- Follow unit test structure and naming conventions specified.","acceptance_criteria":"- `npm test` runs and passes.\n- Coverage includes success and failure paths for protocol handlers.\n- UI flows for browse, edit, and status change are exercised.","notes":"Test suite is in place and passing.\n- Server: handlers and mutations covered (success + error) in `server/ws.handlers.test.js` and `server/ws.mutations.test.js`; bd bridge behaviors in `server/bd.test.js`; watcher in `server/watcher.test.js`.\n- Protocol: type guards and helpers covered in `app/protocol.test.js`.\n- UI: list/detail rendering, edit flows, dependencies, and router covered in `app/views/*.test.js` and `app/router.test.js`.\n- `npm test` passes: 61 tests across 17 files.\n","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T09:15:20.025902+02:00","updated_at":"2025-10-24T10:24:05.166278+02:00","closed_at":"2025-10-22T15:32:24.150566+02:00","dependencies":[{"issue_id":"UI-11","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:44.905914+02:00","created_by":"max"},{"issue_id":"UI-11","depends_on_id":"UI-3","type":"blocks","created_at":"2025-10-22T09:19:01.425984+02:00","created_by":"max"},{"issue_id":"UI-11","depends_on_id":"UI-6","type":"blocks","created_at":"2025-10-22T09:19:05.641468+02:00","created_by":"max"}]}
{"id":"UI-110","content_hash":"558d0832e4d44170f4ada3f9b64d0310257fbfb7dc52d16fe07147b606edccf3","title":"Show toast on ws connection issues and reconnect","description":"Add user feedback for WebSocket connectivity: show a toast when the connection drops (or is reconnecting), and another toast when it successfully reconnects.","acceptance_criteria":"- When the WS enters reconnecting/closed, an error-styled toast appears within 200ms\n- On subsequent open, a success-styled toast appears\n- Toasts auto-dismiss; no console errors\n- Covered by unit tests\n- No regressions in existing tests/typecheck/lint","notes":"Implementing global toast utility and wiring it in main.js via new ws.onConnection() hook to show loss/reconnect toasts. Adding tests to cover behavior.","status":"closed","priority":2,"issue_type":"feature","assignee":"agent","created_at":"2025-10-24T09:47:50.735764+02:00","updated_at":"2025-10-24T10:24:05.166584+02:00","closed_at":"2025-10-24T09:48:05.646883+02:00"}
{"id":"UI-111","content_hash":"6ed55a85095e746b6520621d0a9875dc747439f1df20b4fdb80b77080f309cc3","title":"CLI: require --open to launch browser","description":"Invert the current default for \"open in browser\" so running the UI does not launch a browser unless explicitly requested.\n\nContext\n- Today, the UI opens a browser window/tab by default when starting, which is disruptive in scripted or frequent local runs.\n\nChange\n- Do not open a browser by default.\n- Add/recognize a `--open` flag to explicitly open the browser.\n- Ensure help text and docs reflect the new behavior and flag.\n\nNotes\n- Treat as a behavior change; consider a brief mention in CHANGELOG/release notes.\n- Preserve any existing env var or config that may control this (if present); `--open` should override config/env.\n","acceptance_criteria":"- Running the UI command without flags does not open a browser.\n- Passing `--open` opens the default browser to the correct URL.\n- `--help` shows `--open` with a clear description.\n- Unit/CLI tests cover both cases.\n- Docs/README for UI start updated to show new default + flag.\n","notes":"Claimed by agent. Will invert default browser-open behavior, add --open flag, update docs and tests.","status":"closed","priority":2,"issue_type":"feature","assignee":"agent","created_at":"2025-10-24T10:29:14.617344+02:00","updated_at":"2025-10-24T11:20:46.665493+02:00","closed_at":"2025-10-24T11:20:46.665493+02:00"}
{"id":"UI-112","content_hash":"9c7ca4658df18b49e79a40005990583034ae4c4aa77e2c0476e7f09a11088e4d","title":"Lists: Up/Down move focus to same column in previous/next row","description":"Enable keyboard navigation in issue lists (table/grid). When focus is inside a cell, pressing Up/Down moves focus to the cell in the same column in the previous/next row.\n\nContext\n- Improves efficiency and accessibility for keyboard users working through lists.\n\nDetails\n- Apply WAI-ARIA grid patterns for focus management.\n- Only intercept arrow keys when not inside an editable control (e.g., input, textarea, select).\n- Maintain column position when moving between rows; skip non-focusable cells.\n- Keep Home/End/PageUp/PageDown behavior unchanged.\n\nNotes\n- Consider roving `tabindex` with a single tabbable cell, moving focus with arrows and Enter/Escape as appropriate.\n","acceptance_criteria":"- With focus on a non-editable cell, Up moves to the same column in the previous row; Down moves to the same column in the next row.\n- When focus is inside an input/textarea/select, native arrow key behavior is preserved; no focus jump occurs.\n- Column position is preserved when moving; non-focusable cells are skipped logically to the next focusable in column.\n- Screen reader announces correct row/column context after movement.\n- Unit tests cover navigation behavior; manual accessibility check passes with VoiceOver/NVDA.\n","notes":"Claiming. Will implement Up/Down focus movement in lists using ARIA grid patterns, skipping editable controls, preserving column index, and add unit tests.","status":"closed","priority":2,"issue_type":"feature","assignee":"agent","created_at":"2025-10-24T10:29:26.957493+02:00","updated_at":"2025-10-24T11:30:40.13792+02:00","closed_at":"2025-10-24T11:30:40.13792+02:00"}
{"id":"UI-113","content_hash":"4db2d1774c8c9d6ba5b37c92cd40d5be3a2f0bd0abb30730c5c02abc6cef5508","title":"Board: focusable cards + keyboard navigation + focus restore after dialog close","description":"Make Kanban board cards fully keyboard accessible and add intuitive arrow key navigation. Restore card focus after closing the issue detail dialog.\n\nContext\n- Current board is hard to navigate using the keyboard and does not consistently restore focus from dialogs.\n\nDetails\n- Make each card a focusable element with visible focus ring.\n- Up/Down: move focus to the previous/next card within the same column.\n- Left/Right: move focus to the top card of the previous/next column.\n- Enter/Space: open the issue detail dialog for the focused card.\n- Escape: closes dialog. On close, focus returns to the previously focused card.\n- Use ARIA roles (`list`, `listitem`, or `grid` pattern) and `aria-label`/`aria-describedby` for card information.\n- If a column has no cards, skip it when using Left/Right.\n\nNotes\n- Use roving `tabindex` in columns to keep a single tabbable element where appropriate.\n- Preserve native arrow behavior when inside editable controls within a card.\n","acceptance_criteria":"- Tabbing places focus on a card; focus style is clearly visible.\n- Up/Down moves between cards within the same column; Left/Right jumps to the top card in the adjacent column.\n- Columns with zero cards are skipped when navigating with Left/Right.\n- Enter opens the card’s detail dialog; Escape closes it and returns focus to the same card as before opening.\n- Screen reader announces card context (issue title and column name).\n- Unit tests cover navigation and focus restoration; manual accessibility check passes with VoiceOver/NVDA.\n","notes":"Implementation summary (2025-10-24):\n- Cards are now focusable with a visible focus ring. Implemented roving tabindex per column so only one card is tabbable at a time; arrow keys update the roving index.\n- Keyboard navigation:\n  - ArrowUp/ArrowDown move between cards within the same column.\n  - ArrowLeft/ArrowRight jump to the top card of the previous/next non-empty column (columns with zero cards are skipped).\n  - Enter/Space open the issue detail dialog for the focused card.\n- A11y roles + labels:\n  - Column bodies use role=\"list\" and reference their headers via aria-labelledby.\n  - Cards use role=\"listitem\" and get an aria-label combining title and column name.\n- Focus restoration after dialog close:\n  - Dialog captures the previously focused element when opening and restores focus to it on close (button, Esc, or programmatic close).\n- Tests added:\n  - app/views/board.navigation.test.js covers ArrowUp/Down and Left/Right (with empty column skip) and Enter/Space activation.\n  - app/views/issue-dialog.focus.test.js verifies focus restoration to the previously focused element.\n- Styles: .board-card:focus gets an accessible outline.\n\nFiles changed:\n- app/views/board.js (a11y + keyboard nav)\n- app/views/issue-dialog.js (focus restore)\n- app/styles.css (focus outline)\n- app/views/board.navigation.test.js (new)\n- app/views/issue-dialog.focus.test.js (new)\n\nValidation:\n- npm run typecheck, npm test, npm run lint, and npm run format all pass locally.","status":"closed","priority":2,"issue_type":"feature","assignee":"agent","created_at":"2025-10-24T10:29:41.139428+02:00","updated_at":"2025-10-24T11:40:17.996251+02:00","closed_at":"2025-10-24T11:40:17.996251+02:00"}
{"id":"UI-114","content_hash":"646c616452b0be37b0826577732adf73a80280a05a68af20761a9f5d7de1cea3","title":"Events: coalesce issues-changed to avoid redundant full refresh","description":"Problem\n- Editing an issue triggers two UI refreshes:\n  (a) an `issues-changed` event with specific IDs, and then\n  (b) a file-watcher-driven `issues-changed` without IDs after the DB file write,\n  which causes a full cache refresh.\n\nImpact\n- Extra work and flicker; unnecessary network/CPU and slower UX.\n\nProposal\n- Introduce an event coalescer in the UI data layer to merge near-simultaneous events.\n- Prefer ID-scoped updates when available and suppress trailing full refreshes that cover the same change window.\n\nDesign Sketch\n1) Event types\n   - `issues-changed:{ids:Set\u003cstring\u003e, token?:string, source:'local'|'watcher'|'remote'}`\n   - `db-updated:{token?:string}` from the file watcher path (no ids).\n2) Coalescing\n   - Maintain a sliding window (e.g., 100–200 ms) queue. If an ID-scoped event is received, record its `token` (if any) and changed IDs.\n   - If a `db-updated` arrives within the window and its `token` matches or an ID-scoped event was seen, drop or downgrade the full refresh.\n   - Otherwise, perform a single full refresh after the window elapses.\n3) Source suppression\n   - Tag locally-initiated saves with a `token` propagated through to the write and back from the watcher so the UI can distinguish self-originated writes.\n4) Safety valve\n   - If any error occurs or the ID set is too large, fall back to a full refresh.\n\nTesting\n- Unit tests for: only-id updates; watcher-only updates; both within window; mismatched tokens; large ID set fallback.\n- Add lightweight logging behind debug flag to verify coalescing in dev.\n","design":"Server-side authoritative diff emission with optional optimistic UI event.\n\nOverview\n- Maintain an in-memory index Map\u003cissue_id, digest\u003e on the server.\n- On DB watcher event, debounce 100–200 ms to let writes settle.\n- Load current issues, build `next` index using a canonical projection and stable stringify.\n- Compute `added`, `removed`, `updated` by comparing `prev` vs `next` (digest via fast non-crypto hash, e.g., xxhash64).\n- Emit a single post-commit event: `issues-changed:{ added: string[], updated: string[], removed: string[], rev: string|number, source: 'watcher'|'local'|'remote', token?: string }`.\n- Update `prev = next` and bump `rev` (monotonic counter or file ETag/mtime+size).\n\nLocal writes\n- Option A (simplest): Do not emit immediate UI events on local writes; rely solely on the post-commit diff event.\n- Option B (optimistic): Emit immediate `issues-changed:{ids}` with `token`; when the server diff arrives, include the same `token` so the UI can suppress duplicate work.\n\nSafety \u0026 fallbacks\n- If parsing fails, hashing fails, or the change set exceeds a configured threshold, emit a single `issues-changed:{}` without IDs to signal a full refresh.\n- Prefer atomic writes (temp + rename) so the watcher observes finalized state.\n\nA11y/UX impact\n- UI still supports coalescing as a thin guard, but should rarely need it once server emits precise diffs.\n\nScaling notes\n- If DB grows large, prefer per-issue `updated_at`/`revision` fields or a server-side change journal to avoid O(N) hashing on every write.\n","acceptance_criteria":"- A single edit results in exactly one server-emitted `issues-changed` event per DB commit.\n- When the edit affects specific issues, the event includes precise `added`, `updated`, and `removed` arrays; the UI applies only incremental updates, with no subsequent full refresh.\n- Local writes: either (A) only the server diff is delivered, or (B) an optimistic `{ids, token}` is followed by the server diff that the UI suppresses based on matching `token` or increasing `rev`.\n- External/process edits (no token) still produce precise `added/updated/removed` sets.\n- Deletions are explicitly included in `removed`, and the UI evicts those issues from cache.\n- Rapid consecutive writes coalesce via debounce into one event, and `rev` increases monotonically.\n- On parser/read errors or oversized change sets, the server emits a single `issues-changed` without IDs; the UI performs exactly one full refresh.\n- Unit tests cover: only-id updates, watcher-only updates, optimistic + server diff, mismatched tokens, large change fallback, and multiple rapid writes.\n- Debug logging behind a flag verifies coalescing and emitted payloads during development.\n","notes":"Implemented UI-side coalescing for `issues-changed` events to suppress redundant full refreshes following targeted (ID-scoped) updates.\n\nChanges\n- app/main.js: Added a short suppression window (200 ms) after receiving an ID-scoped `issues-changed`; a trailing watcher-only event within that window is ignored. This preserves immediate responsiveness while avoiding duplicate reloads and flicker.\n- app/main.live-updates.coalesce.test.js: New tests covering coalescing for list and detail views.\n\nValidation\n- npm run typecheck: OK\n- npm test: 171 tests passing (including new coalescing tests)\n- npm run lint / format: OK\n\nNotes\n- This UI-side coalescer is a thin guard aligned with the proposed server-side diffing plan. When server emits precise diffs in the future, the UI logic will remain compatible and simply reduce to fewer suppressions.","status":"closed","priority":2,"issue_type":"task","assignee":"agent","created_at":"2025-10-24T10:29:56.03893+02:00","updated_at":"2025-10-24T11:52:40.826592+02:00","closed_at":"2025-10-24T11:52:40.826592+02:00"}
{"id":"UI-115","content_hash":"5b80399318a64ede5197b605527297327bad9c2687ef2c9b1a9b5f9dfcbd32e8","title":"Markdown: support ordered lists using `1)` marker (CommonMark)","description":"The Markdown renderer should recognize ordered list markers using a right parenthesis, per CommonMark. Currently only `1.` is parsed as a list; `1)` renders as plain text.\n\nContext\n- CommonMark allows both `1.` and `1)` as ordered list markers.\n- Users expect `1)` to start a list just like `1.`.\n\nChange\n- Update the Markdown parsing to treat `N)` at the start of a line as an ordered list marker, with the same semantics as `N.`.\n- Ensure numbering behavior matches CommonMark (auto-increment when using repeated `1)` etc.).\n\nNotes\n- Verify no regressions for code blocks, fenced code, or inline text like \"Version 1) beta\" that should not start a list.\n- If this is a parser configuration gap, prefer configuration over custom hacks.\n","acceptance_criteria":"- Input starting with `1) ` on a new line begins an ordered list per CommonMark.\n- `1) One\\n2) Two\\n3) Three` renders as an ordered list 1–3.\n- `1) One\\n1) Two\\n1) Three` renders as 1, 2, 3 (auto numbering) if supported by the parser.\n- Inline text like `Not a list 1) example` does not start a list.\n- Nested lists using `)` markers work: `1) Outer\\n   1) Inner` renders correctly.\n- Unit tests cover the above cases.\n","notes":"Claimed by agent on 2025-10-25. Will update Markdown parsing to recognize `N)` list markers and add tests per acceptance criteria.","status":"closed","priority":2,"issue_type":"bug","assignee":"agent","created_at":"2025-10-24T10:37:35.655194+02:00","updated_at":"2025-10-25T21:10:06.446829+02:00","closed_at":"2025-10-25T21:10:06.446829+02:00"}
{"id":"UI-116","content_hash":"7e9c389d0bba11cd1dbb487aa2c052f3d00e224c0356ba4b03a062335d02138b","title":"Details: show and edit Design section; order fields","description":"Enhance the issue details view to include the Design field and present fields in a consistent order. All sections should be editable.\n\nRequirements\n- Display sections in this exact order: Description, Design, Notes, Acceptance Criteria.\n- Make Design editable in-place (same editing UX as Description), persisting to the issue's `design` field.\n- Keep Notes and Acceptance Criteria editing consistent with the same controls.\n- Show placeholder prompts for empty sections (e.g., “Add design…”), but keep the sections visible to suggest structure.\n- Render Markdown when not in edit mode; switch to editor on Edit action.\n\nBehavior\n- Save updates without full-page reload; reflect changes immediately in the UI.\n- Keyboard and screen reader accessible: focus moves to the editor on edit; Esc cancels, Cmd/Ctrl+Enter saves.\n","acceptance_criteria":"- Details view shows sections ordered: Description → Design → Notes → Acceptance Criteria.\n- Editing Design updates the `design` field and persists after reload.\n- Empty Design shows “Add design…” placeholder and is editable.\n- Description/Notes/Acceptance controls remain consistent (Edit, Save, Cancel), with Markdown rendering in view mode.\n- No regression to existing fields; unit tests verify ordering and that editing Design persists.\n","notes":"Implemented Design section in detail view with in-place editor, reordered sections, and updated Acceptance heading to 'Acceptance Criteria'. Extended ws 'edit-text' to support 'design' → maps to '--design'. Updated data layer to allow updating design. Added tests: UI ordering, design persistence; plus server ws mapping test. Ran typecheck, tests, and lint: all green.","status":"closed","priority":1,"issue_type":"feature","assignee":"agent","created_at":"2025-10-24T10:53:14.970358+02:00","updated_at":"2025-10-24T12:53:29.362145+02:00","closed_at":"2025-10-24T12:53:29.362145+02:00"}
{"id":"UI-117","content_hash":"7d75b9b71c95580f354b259da02408cfc7a39ff107e01a2b97e559050daf0429","title":"Details: Notes section is not editable","description":"Fix the issue details view where the Notes section is not editable.\n\nSymptoms\n- Notes renders as read-only with no way to switch to edit mode.\n\nChange\n- Enable in-place editing for Notes with the same UX as Description (Edit, Save, Cancel), persisting to `notes`.\n- Ensure Markdown render in view mode and textarea/editor in edit mode.\n- Add placeholder when empty (e.g., “Add notes…”).\n\nRegression Guard\n- Verify Design/Description/Acceptance editing still works as before.\n","acceptance_criteria":"- Notes section offers Edit → Save/Cancel and persists to `notes` on save.\n- Empty Notes shows an editable placeholder and can be saved.\n- Keyboard shortcuts work: Esc cancels, Cmd/Ctrl+Enter saves.\n- Unit test covers enabling edit, saving, and persistence.\n- No regressions in Description, Design, or Acceptance sections.\n","notes":"Starting work: investigate Details view and editor toggles; implement in-place editing for Notes with placeholder, save/cancel, and keyboard shortcuts. Add unit tests and verify regressions for other sections.","status":"closed","priority":1,"issue_type":"bug","assignee":"agent","created_at":"2025-10-24T10:53:25.979943+02:00","updated_at":"2025-10-24T11:06:38.844204+02:00","closed_at":"2025-10-24T11:06:38.844204+02:00"}
{"id":"UI-118","content_hash":"f48994d1154c9f610c3302d7f655130dfb68d4f23ce95624a340efaa99f199ee","title":"Clean up styles.css","description":"- Use modern CSS features like nesting `.foo { \u0026.bar {} }` for improved readability and reduced redundancy.\n- Introduce new CSS variables for redundant values (e.g. semantic `--space-*` tokens).","notes":"Implemented CSS cleanup in app/styles.css.\n\n- Added spacing scale variables: --space-0..--space-10 (2px increments) under :root\n- Replaced common hard-coded spacings with variables in header, panels, forms, board and cards\n- Introduced CSS nesting for readability and reduced redundancy:\n  - .header-nav \u003e .tab (plus \u0026:hover, \u0026:focus, \u0026.active)\n  - a states (visited, hover, focus)\n  - .theme-toggle input[type='checkbox'] (with \u0026::after, \u0026:checked::after)\n  - .route.board structure (.panel__body)\n  - Markdown block (.md {...})\n  - .table (th/td + cell controls)\n  - .epic-header (\u0026:hover, progress)\n  - .board-closed-filter { select }\n- Minor variable-based spacing tweaks: board gaps/padding, card padding, table cell paddings, etc.\n\nValidation on 2025-10-24:\n- Ran `npm run all` (lint, typecheck, tests, format) — all green.\n- Prettier applied to styles file.\n","status":"closed","priority":2,"issue_type":"chore","assignee":"agent","created_at":"2025-10-24T11:38:34.262985+02:00","updated_at":"2025-10-24T14:50:11.308796+02:00","closed_at":"2025-10-24T14:50:11.308796+02:00"}
{"id":"UI-119","content_hash":"232210f1685dc3143391a28c4ddf349a91666d9476ba945d59d52a61073578d7","title":"Board closed column: New Filter for closed issues","description":"- Sort issues by \"closed_at\" (newly closed first).\n- Add dropdown in header (align right) to select displayed issues: \"Today\", \"Last 3 days\", \"Last 7 days\". Default to \"Today\".","notes":"Implementing closed column filter and sorting by closed_at. Adding tests and styles. Running typecheck/tests/lint/format before close.","status":"closed","priority":2,"issue_type":"chore","assignee":"agent","created_at":"2025-10-24T11:44:11.020617+02:00","updated_at":"2025-10-24T12:22:02.118606+02:00","closed_at":"2025-10-24T12:22:02.118606+02:00"}
{"id":"UI-12","content_hash":"02b53d91770daaa1c413c0dc83992bb9509639f1c9c9cd926d25c9d898df6989","title":"Dev tooling: eslint, prettier, tsc","description":"Set up linting, formatting, and type checking according to the coding standards.\n\nScope\n- ESLint with ESM + JSDoc typing rules\n- Prettier for `*.{js,md}`\n- TypeScript config for `.ts` interface-only files\n\nNotes\n- Add npm scripts and pre-handoff validation commands.","acceptance_criteria":"- `npx eslint` and `npx prettier` scripts exist and run on touched files.\n- `npx tsc` passes.\n- Pre-handoff checklist documented.","notes":"Dev tooling configured.\n- ESLint: eslint.config.js and npm script `npm run lint`.\n- Prettier: prettier.config.js, `npm run format` and `format:check`.\n- TypeScript: tsconfig.json for JSDoc typing + `.ts` interfaces, `npm run typecheck`.\n- Pre-handoff checklist: documented in docs/quickstart.md under Development Workflow; `npm run all` aggregates checks.\n","status":"closed","priority":2,"issue_type":"chore","created_at":"2025-10-22T09:15:29.343292+02:00","updated_at":"2025-10-24T10:24:05.166885+02:00","closed_at":"2025-10-22T15:36:20.393095+02:00","dependencies":[{"issue_id":"UI-12","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:48.80961+02:00","created_by":"max"}]}
{"id":"UI-120","content_hash":"a37289ee74bfc9e19349fbc59965f328a9e0a3807f81a11e52b1d76a1c9dc2cf","title":"Board: Show badge with number of cards per column","description":"- Show after column title.\n- Non-distracting, dim light styling.","status":"open","priority":3,"issue_type":"chore","created_at":"2025-10-24T11:51:06.53887+02:00","updated_at":"2025-10-24T12:02:21.990831+02:00"}
{"id":"UI-121","content_hash":"21fcc20d196abbf6d7b225217a18ae6400897ae3da7c8f8eb61d8c515323756b","title":"Board: New column \"Blocked\"","description":"- Show below \"Open\" - slit column vertical 1fr 1fr.\n- Use `bd blocked --json` to fetch.","status":"closed","priority":2,"issue_type":"feature","assignee":"agent","created_at":"2025-10-24T11:54:15.39602+02:00","updated_at":"2025-10-24T13:03:10.692174+02:00","closed_at":"2025-10-24T13:03:10.692174+02:00"}
{"id":"UI-122","content_hash":"e26cdc4bddb4d44c33f68a12a9c8d0d8f9868252d8cb5384c86c66987beb87aa","title":"CLI: `bdui restart` always opens browser; should only open with `--open`","description":"Problem\n- Running `bdui restart` launches the default browser unconditionally because `handleRestart()` calls `handleStart()` without options, and `handleStart()` opens by default when options are omitted.\n\nFix\n- Make `handleStart()` default to not opening the browser unless explicitly requested.\n- Pass through options from `restart` so `--open` works for restart as well.\n- Update CLI argument handling for `restart` to mirror `start` (`--open`, `BDUI_NO_OPEN=1`).\n- Adjust usage text to reflect start/restart.\n\nTesting\n- Add CLI tests asserting `restart --open` propagates the flag.\n- Assert `restart` without flags passes `{ no_open: true }`.\n","acceptance_criteria":"- `bdui restart` does not open a browser by default.\n- `bdui restart --open` opens the browser.\n- `BDUI_NO_OPEN=1 bdui restart` does not open the browser.\n- Unit tests cover both CLI flag propagation and default behavior.\n","status":"closed","priority":2,"issue_type":"bug","assignee":"agent","created_at":"2025-10-24T12:04:41.472038+02:00","updated_at":"2025-10-24T12:04:45.617528+02:00","closed_at":"2025-10-24T12:04:45.617528+02:00"}
{"id":"UI-123","content_hash":"229af726327bc09f03c2652af8dafb3814ac0ba7523b4b6d2c01f2c8326b0042","title":"Fix: Browser console warning – unhandled message","description":"Browser console shows:\n\n```\n[Warning] ws received unhandled message type: subscribe-updates (main.bundle.js, line 4004)\n[Warning] ws received unhandled message type: subscribe-issues (main.bundle.js, line 4004)\n```","notes":"Fix: prevent console warnings for subscription acks.\n- Client now registers pending entries for initial `subscribe-updates` and `subscribe-issues` so ack replies are correlated and not treated as unhandled events.\n- Added test to ensure ack frames do not trigger warnings.\n\nFiles:\n- app/ws.js\n- app/ws.test.js\n\nValidation:\n- npm run typecheck: OK\n- npm test: 225 passed\n- npm run lint: OK\n- npm run format:check: OK","status":"closed","priority":3,"issue_type":"bug","assignee":"agent","created_at":"2025-10-24T12:10:34.207879+02:00","updated_at":"2025-10-26T15:45:05.251457+01:00","closed_at":"2025-10-26T15:45:05.251457+01:00"}
{"id":"UI-124","content_hash":"d55e5e3feb23f710c2ee43a5ccaaf9bb3d8e5c844596f24440cd7bbb3137e729","title":"Server: allow editing descriptions via bd","description":"Now that `bd` supports updating the description, the WebSocket server should accept `edit-text` with `field: 'description'` and map it to the `bd update \u003cid\u003e --description \u003ctext\u003e` command. Update docs and tests accordingly.","acceptance_criteria":"- `edit-text` with `field: 'description'` is accepted and mapped to `bd update \u003cid\u003e --description \u003ctext\u003e`\n- Unit test asserts flag mapping and successful reply payload\n- `app/protocol.md` and `docs/architecture.md` no longer claim descriptions are immutable and document the new mapping\n- No regressions for title/notes/acceptance edits","notes":"Implementing mapping for description edits; updating tests and docs accordingly.","status":"closed","priority":1,"issue_type":"bug","assignee":"agent","created_at":"2025-10-24T12:10:49.108465+02:00","updated_at":"2025-10-24T12:12:05.010532+02:00","closed_at":"2025-10-24T12:12:05.010532+02:00"}
{"id":"UI-125","content_hash":"cebd0eaae35cf68ea3de3ffd6c7a3906b83116a7db4d3657d30498cf38c50e24","title":"Fix: Remove --limit when fetching closed issues","description":"Remove `--limit` when requesting closed issues to the backend so the UI can apply time-based closed filters (today/3/7 days) on the full set.\n\nChanges\n- app/data/providers.js: `getClosed()` no longer sends `filters.limit`; keeps cache key reused for closed list.\n- app/data/providers.test.js: updated to assert no `limit` is sent for closed.\n\nRationale\n- Limiting server-side truncated closed results and broke time-window filtering.\n\nValidation\n- All tests pass: `npm test`\n- Typecheck, lint, format clean.","acceptance_criteria":"- Closed issues request omits `limit`.\n- Board closed filter works across Today/3/7 without missing items.\n- Unit tests updated and passing.","notes":"Implementing fix in app/data/providers.js and updating tests.","status":"closed","priority":2,"issue_type":"bug","assignee":"agent","created_at":"2025-10-24T13:23:39.212063+02:00","updated_at":"2025-10-24T13:23:49.332385+02:00","closed_at":"2025-10-24T13:23:49.332385+02:00"}
{"id":"UI-126","content_hash":"432e825edc14b484f77d0ac613197c03c13e638445d33f2c32a1e8013057135c","title":"Log resolved beads DB on start and restart","description":"Add startup logging that prints the resolved beads SQLite DB path and its source (flag/env/nearest/home-default) so users can see which database is in use.\n\nScope\n- Log once during server start (in server/index.js) to the daemon log/stdout.\n- Ensure the message appears again after `bdui restart` since the daemon restarts.\n- Do not change CLI stdout behavior for `bdui start` when a daemon is already running.\n\nAcceptance Criteria\n- On fresh `bdui start`, `daemon.log` includes a line containing the absolute DB path and source.\n- On `bdui restart`, `daemon.log` includes the same line again for the new process.\n- No failing unit/integration tests; no changes required to CHANGES.md.","status":"closed","priority":2,"issue_type":"feature","assignee":"agent","created_at":"2025-10-24T16:31:21.667179+02:00","updated_at":"2025-10-24T16:32:50.138064+02:00","closed_at":"2025-10-24T16:32:50.138064+02:00"}
{"id":"UI-127","content_hash":"892aed021d62ac1aa16630a2c3703434fa06fe39944c1aa1c253301dcca0034b","title":"Refactor data exchange to subscription-based updates","description":"Overhaul the UI↔server data exchange by introducing list subscriptions, server-side diffing, and push-based updates, with robust watcher integration and mutation race control. See docs/data-exchange-subscription-plan.md.","acceptance_criteria":"- Clients can subscribe/unsubscribe to: all-issues, epics, issues-for-epic, blocked-issues, pending-issues, in-progress-issues, closed-issues.\n- Server maintains per-subscription registry with itemsById (id→{updated_at, closed_at}) and subscriber set.\n- Server computes {added, updated, removed} on each run and pushes deltas to subscribers.\n- Closed-issues filtering applied prior to diffing.\n- Watcher re-runs list commands for all active subscriptions and pushes deltas.\n- Mutation flow uses once-listener or 500ms timeout, then refreshes affected subscriptions exactly once; watcher suppressed during the window.\n- Client keeps per-subscription model and re-renders views on deltas.\n- Unit/integration tests cover diffing, watcher refresh, and mutation window behavior.\n- Observability: basic metrics on runs, delta sizes, error rates.\n- Documentation updated: protocol, lifecycle, testing strategy.","notes":"Epic delivered end-to-end on 2025-10-25:\n- Server: subscription registry, list adapters, diff engine with closed-issues pre-filter, watcher coalescing, mutation window once-only refresh.\n- Client: subscription store + UI wiring for tabs and epic expansion.\n- Tests: unit + integration for diffing, adapters, watcher coalescing, mutation window, and client delta application.\n- Observability: metrics sink + /metrics, structured logs with sampling.\n- Docs: subscription plan implemented, migration notes, README docs pointers.\nValidation: npm run typecheck, npm run lint, npm test (215 tests), npm run format all passing.","status":"closed","priority":1,"issue_type":"epic","assignee":"agent","created_at":"2025-10-25T12:12:37.920028+02:00","updated_at":"2025-10-25T14:34:00.926514+02:00","closed_at":"2025-10-25T14:34:00.926514+02:00"}
{"id":"UI-128","content_hash":"62f671e3b07fb81e13f450ec94d3b9b336ea6a9eca94cded5466e45a5a4e8f9d","title":"Server: subscription registry and lifecycle management","description":"Implement server-side registry keyed by subscription type+params, store itemsById (id→{updated_at, closed_at}) and subscribers Set. No TTL; evict subscriptions only on WebSocket disconnect. Unsubscribe removes subscriber from the set but keeps the registry entry until the connection closes.","acceptance_criteria":"- Registry supports create/attach/detach for subscription keys.\n- No TTL: evict registry entries only on WebSocket disconnect.\n- Concurrency-safe operations per key (serialize refreshes).\n- Subscribers receive initial `subscribed` ack and subsequent deltas.\n- Unit tests cover attach/detach and disconnect-driven eviction.","notes":"Implementing server/subscriptions.js registry with attach/detach, per-key locking, itemsById, and disconnect-driven eviction. Adding server/subscriptions.test.js. Integrate minimal onDisconnect hook in ws server.","status":"closed","priority":1,"issue_type":"feature","assignee":"agent","created_at":"2025-10-25T12:12:57.88294+02:00","updated_at":"2025-10-25T13:06:16.037636+02:00","closed_at":"2025-10-25T13:06:16.037636+02:00","dependencies":[{"issue_id":"UI-128","depends_on_id":"UI-127","type":"parent-child","created_at":"2025-10-25T12:13:43.752964+02:00","created_by":"agent"}]}
{"id":"UI-129","content_hash":"4d652e1a3bf4e70db6e10488b89be5202f4e57cc8c19a920c3da552ede593ffa","title":"Server: bd list adapters for subscription types","description":"Create adapter layer mapping subscription types+params to concrete `bd` commands and normalize outputs to Issue objects.","acceptance_criteria":"- All subscription types map to a `bd` invocation.\n- Outputs normalized to `{ id, updated_at, closed_at, ... }`.\n- Errors surfaced with code/message; no crashes.\n- Unit tests stub adapter calls and validate mapping.","notes":"Adjusted normalization: parse bd timestamps using Date.parse() with numeric fallback. Updated adapter tests to assert Date.parse values. Lint/format/typecheck pass. Test suite has one unrelated board view failure due to date-relative closed filter (existing).","status":"closed","priority":1,"issue_type":"feature","assignee":"agent","created_at":"2025-10-25T12:13:01.360974+02:00","updated_at":"2025-10-25T12:56:49.807002+02:00","closed_at":"2025-10-25T12:56:49.807002+02:00","dependencies":[{"issue_id":"UI-129","depends_on_id":"UI-127","type":"parent-child","created_at":"2025-10-25T12:13:46.516609+02:00","created_by":"agent"}]}
{"id":"UI-13","content_hash":"52eff82b80135e4edb074eaafa9928c8ee55f623dc37604d8f7deb63a1562165","title":"Security hardening: local-only + input validation","description":"Harden the local server and protocol against misuse.\n\nScope\n- Bind only to 127.0.0.1\n- CORS and WS origin checks\n- Strict message validation and command argument sanitization\n\nNotes\n- Keep a security checklist as part of CI or pre-push docs.","acceptance_criteria":"- Server refuses non-local connections.\n- Invalid/malformed messages are rejected with clear errors and logged.\n- Static analysis/linting rules in place to prevent command injection patterns.","notes":"Security hardening complete.\n\n- Local-only bind: server now always binds to `127.0.0.1` regardless of `HOST` env (`server/config.js`). Quickstart updated to reflect this.\n- Input validation: WS handlers validate payloads and return structured errors; unknown types rejected with `unknown_type`. JSON parsing errors return `bad_json`.\n- Command execution: `server/bd.js` uses `spawn` with args (no shell), injects `--db` safely, and provides JSON helpers; tests cover error paths.\n\nValidation: lint, typecheck, and tests pass.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T09:15:36.406465+02:00","updated_at":"2025-10-24T10:24:05.167181+02:00","closed_at":"2025-10-22T15:33:51.026428+02:00","dependencies":[{"issue_id":"UI-13","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:54.116701+02:00","created_by":"max"},{"issue_id":"UI-13","depends_on_id":"UI-3","type":"blocks","created_at":"2025-10-22T09:18:46.251705+02:00","created_by":"max"}]}
{"id":"UI-130","content_hash":"ee48a40e2cd079b6b7aa067576f61d718bec38e9f242190a24a7f30a6a05c2e9","title":"Server: diff engine and closed-issues pre-filter","description":"Implement diffing vs. registry state producing {added, updated, removed}. Apply closed-issues filtering to results before diffing.","acceptance_criteria":"- Diff computes added/updated/removed deterministically from `updated_at`.\n- Remaining ids in previous map are treated as removed.\n- Closed-issues filter applied prior to diff.\n- Unit tests cover edge cases (empty sets, unchanged runs, only updates).","notes":"Introduced pre-diff closed-issues filter (spec.params.since) applied in refresh path; added tests in server/ws.list-subscriptions.test.js. Diff engine computeDelta/toItemsMap implemented earlier and used via registry.applyItems(). Next: expand unit tests for empty/unchanged/only-updated edge cases.","status":"closed","priority":1,"issue_type":"feature","assignee":"agent","created_at":"2025-10-25T12:13:05.155643+02:00","updated_at":"2025-10-25T13:17:17.914956+02:00","closed_at":"2025-10-25T13:17:17.914956+02:00","dependencies":[{"issue_id":"UI-130","depends_on_id":"UI-127","type":"parent-child","created_at":"2025-10-25T12:13:49.077922+02:00","created_by":"agent"},{"issue_id":"UI-130","depends_on_id":"UI-129","type":"blocks","created_at":"2025-10-25T12:14:19.051169+02:00","created_by":"agent"}]}
{"id":"UI-131","content_hash":"cd72132d0859a775caaaf1c1ebddab6e42078076e98beb9e2ceb72674277ee73","title":"Server: watcher integration and coalescing","description":"Integrate DB/file watcher to re-run `bd` for all active subscriptions on change, coalescing rapid events.","acceptance_criteria":"- Watcher triggers one refresh per active subscription per change burst.\n- Deltas pushed to all subscribers.\n- Backpressure configurable (e.g., 50–100ms trailing window).\n- Tests simulate multiple change events and assert single refresh.","status":"closed","priority":1,"issue_type":"feature","assignee":"agent","created_at":"2025-10-25T12:13:08.740097+02:00","updated_at":"2025-10-25T13:19:38.277337+02:00","closed_at":"2025-10-25T13:19:38.277337+02:00","dependencies":[{"issue_id":"UI-131","depends_on_id":"UI-127","type":"parent-child","created_at":"2025-10-25T12:13:51.741496+02:00","created_by":"agent"},{"issue_id":"UI-131","depends_on_id":"UI-128","type":"blocks","created_at":"2025-10-25T12:14:22.873185+02:00","created_by":"agent"},{"issue_id":"UI-131","depends_on_id":"UI-130","type":"blocks","created_at":"2025-10-25T12:14:25.770588+02:00","created_by":"agent"}]}
{"id":"UI-132","content_hash":"59f0bd9c59cd11e6e8c92b67a9676f1da4d4a7120cf52cd47f50f1d78ddb07af","title":"Server: mutation window and once-listener gating","description":"On user mutation, run the command and wait for watcher or 500ms timeout; then refresh affected subscriptions exactly once. Suppress watcher-driven refreshes during this window.","acceptance_criteria":"- Mutation path refreshes affected subscriptions once.\n- Watcher does not trigger duplicate refresh during the window.\n- Timeout fallback at 500ms works.\n- Tests cover watcher-first and timeout-first cases.","status":"closed","priority":1,"issue_type":"feature","assignee":"agent","created_at":"2025-10-25T12:13:13.260866+02:00","updated_at":"2025-10-25T13:31:57.813574+02:00","closed_at":"2025-10-25T13:31:57.813574+02:00","dependencies":[{"issue_id":"UI-132","depends_on_id":"UI-127","type":"parent-child","created_at":"2025-10-25T12:13:54.609642+02:00","created_by":"agent"},{"issue_id":"UI-132","depends_on_id":"UI-131","type":"blocks","created_at":"2025-10-25T12:14:28.401871+02:00","created_by":"agent"}]}
{"id":"UI-133","content_hash":"c6857e8e55211542d034e4a4c25db201c3ca63d27716009b2741a44724143be0","title":"Client: subscription store and delta application","description":"Create per-subscription local store keyed by client `id`, apply server deltas to `{ itemsById }`, and expose selectors for rendering.","acceptance_criteria":"- Store lifecycle aligns with subscribe/unsubscribe.\n- Delta application idempotent and ordered per subscription.\n- Selectors power existing views without regressions.\n- Unit tests apply sequences of deltas and assert final state.","notes":"Started implementation of client subscription store and delta handling. Added new module app/data/subscriptions-store.js with per-subscription itemsById, key mapping, and a wireEvents helper for ws 'list-delta'. Added unit tests app/data/subscriptions-store.test.js verifying delta sequences, fanout, event wiring, and unsubscribe lifecycle. Ran typecheck, lint, format, and tests. One unrelated flaky test failing due to date sensitivity in app/views/board.test.js (closed filter defaults to 'today' and fixtures use yesterday's date).","status":"closed","priority":1,"issue_type":"feature","assignee":"agent","created_at":"2025-10-25T12:13:19.532699+02:00","updated_at":"2025-10-25T13:39:21.950198+02:00","closed_at":"2025-10-25T13:39:21.950198+02:00","dependencies":[{"issue_id":"UI-133","depends_on_id":"UI-127","type":"parent-child","created_at":"2025-10-25T12:13:57.270881+02:00","created_by":"agent"}]}
{"id":"UI-134","content_hash":"dae6c5a60c3cb8201a9b9c33ef688270b09b29488f07fed9163c1ba0da4a8b21","title":"Client: UI integration for tabs and epic expansion","description":"Wire views to subscribe/unsubscribe on tab switch and epic expand/collapse. Maintain smooth re-render based on local store state.","acceptance_criteria":"- Tabs subscribe to correct list and unsubscribe from previous.\n- Epic expand subscribes to `issues-for-epic` and collapse unsubscribes.\n- No duplicate subscriptions or leaks.\n- Manual verification across all tabs.","status":"closed","priority":2,"issue_type":"feature","assignee":"agent","created_at":"2025-10-25T12:13:23.585337+02:00","updated_at":"2025-10-25T14:19:15.481464+02:00","closed_at":"2025-10-25T14:19:15.481464+02:00","dependencies":[{"issue_id":"UI-134","depends_on_id":"UI-127","type":"parent-child","created_at":"2025-10-25T12:14:00.752857+02:00","created_by":"agent"},{"issue_id":"UI-134","depends_on_id":"UI-133","type":"blocks","created_at":"2025-10-25T12:14:32.19119+02:00","created_by":"agent"}]}
{"id":"UI-135","content_hash":"60a256df95505d3da0272279289d8ed8623241ab38991e9300881c068a03578d","title":"Observability: metrics and structured logs","description":"Add per-subscription metrics (runs, delta sizes, errors, latency) and structured logs for large deltas and mutation windows.","acceptance_criteria":"- Counters and histograms exposed via existing metrics sink.\n- Logs include subscriptionKey, sizes, timings.\n- Sampling prevents log spam.\n- Docs include how to query metrics.","notes":"Implemented lightweight metrics sink and instrumentation:\n- Added server/metrics.js with counters and histograms (sum/count/min/max) and JSON structured sampled logs.\n- Exposed HTTP GET /metrics in server/app.js returning sink snapshot.\n- Instrumented server/ws.js refresh path: list_refresh_runs_total, list_refresh_errors_total{code}, list_refresh_latency_ms, list_delta_{added|updated|removed} per {type,key}; sampled list_delta logs and always log list_delta_large (\u003e=50 items).\n- Instrumented mutation window: mutation_window_total{reason}, mutation_window_ms{reason}, and sampled mutation_window_resolved logs.\n- Added tests: server/metrics.test.js and server/ws.metrics.test.js.\n- Docs: new docs/observability.md + reference in data-exchange-subscription-plan.md.\nValidation on 2025-10-25: typecheck, lint, prettier, and full test suite (215 tests) pass.","status":"closed","priority":2,"issue_type":"task","assignee":"agent","created_at":"2025-10-25T12:13:26.864004+02:00","updated_at":"2025-10-25T14:32:56.311344+02:00","closed_at":"2025-10-25T14:32:56.311344+02:00","dependencies":[{"issue_id":"UI-135","depends_on_id":"UI-127","type":"parent-child","created_at":"2025-10-25T12:14:03.417319+02:00","created_by":"agent"}]}
{"id":"UI-136","content_hash":"c20e283d48cf756ef195cfe759a7ca836cec3f41eb6931857e96a89ede75681e","title":"Documentation: protocol and migration guide","description":"Finalize wire protocol, update docs with lifecycle, error handling, testing strategy, and migration steps from polling to subscriptions.","acceptance_criteria":"- docs/data-exchange-subscription-plan.md updated with final `bd` flags and closed-issues filter semantics.\n- Example message payloads documented.\n- Breaking change clearly documented with migration notes (no feature flags).\n- Linked from README or developer docs index.","notes":"Updated documentation and links:\n- docs/data-exchange-subscription-plan.md: set status to Implemented; clarified closed-issues `since` filtering semantics and added a Migration section instructing clients to replace polling with subscription flows.\n- README.md: added Docs section linking to architecture, subscription plan, and observability.\nValidation: ran Prettier, lint, typecheck, and full test suite on 2025-10-25.","status":"closed","priority":2,"issue_type":"task","assignee":"agent","created_at":"2025-10-25T12:13:30.855752+02:00","updated_at":"2025-10-25T14:33:44.0239+02:00","closed_at":"2025-10-25T14:33:44.0239+02:00","dependencies":[{"issue_id":"UI-136","depends_on_id":"UI-127","type":"parent-child","created_at":"2025-10-25T12:14:06.589807+02:00","created_by":"agent"}]}
{"id":"UI-137","content_hash":"479a893b7ec133b06de212a4fbc59cfa908468eeeae8bb442b1ebd9ab9bec3cc","title":"Testing: unit and integration coverage","description":"Add tests for diff engine, registry, adapters, watcher coalescing, and mutation window. Add client unit tests for delta application.","acceptance_criteria":"- Server unit tests cover diff cases and error paths.\n- Watcher coalescing integration test.\n- Mutation window tests for watcher-first and timeout-first.\n- Client tests validate ordered application of deltas and unsubscribe cleanup.","notes":"Verified acceptance criteria with current test suite on 2025-10-25:\n- Diff engine + registry: server/subscriptions.test.js covers key path (computeDelta, toItemsMap, attach/detach, publishDelta) including empty/unchanged/only-updated cases.\n- Adapters + error paths: server/list-adapters.test.js validates mapping for all subscription types, normalizes timestamps (Date.parse), and surfaces bd errors + bad params.\n- Watcher coalescing: server/ws.list-refresh.coalesce.test.js asserts one refresh per active spec after a burst via debounce.\n- Mutation window: server/ws.mutation-window.test.js covers watcher-first and timeout-first (500ms) and ensures single refresh pass.\n- Client deltas + unsubscribe: app/data/subscriptions-store.test.js applies ordered sequences, fans out per key, wires ws list-delta, and cleans up on unsubscribe.\nAll tests pass locally via `npm test` (211 tests, 61 files).","status":"closed","priority":1,"issue_type":"task","assignee":"agent","created_at":"2025-10-25T12:13:35.577632+02:00","updated_at":"2025-10-25T14:27:00.667564+02:00","closed_at":"2025-10-25T14:27:00.667564+02:00","dependencies":[{"issue_id":"UI-137","depends_on_id":"UI-127","type":"parent-child","created_at":"2025-10-25T12:14:09.165571+02:00","created_by":"agent"},{"issue_id":"UI-137","depends_on_id":"UI-130","type":"blocks","created_at":"2025-10-25T12:14:35.369011+02:00","created_by":"agent"},{"issue_id":"UI-137","depends_on_id":"UI-131","type":"blocks","created_at":"2025-10-25T12:14:38.17623+02:00","created_by":"agent"},{"issue_id":"UI-137","depends_on_id":"UI-132","type":"blocks","created_at":"2025-10-25T12:14:41.508416+02:00","created_by":"agent"}]}
{"id":"UI-138","content_hash":"983317eea48325b90a001a05298b5fbdfc542396453f11323b5b0bde4a37fb2c","title":"Security: explicit mutation ops and param validation","description":"Protocol exposes only explicit mutation operations (no arbitrary client commands). Validate subscription params and mutation payloads against schemas.","acceptance_criteria":"- Only explicit protocol mutation operations are executable.\n- Param schemas enforce types and ranges for subscriptions and mutations.\n- Invalid requests return structured `error` messages.\n- Tests cover rejection cases.","status":"closed","priority":1,"issue_type":"task","assignee":"agent","created_at":"2025-10-25T12:13:39.048929+02:00","updated_at":"2025-10-25T13:52:07.583691+02:00","closed_at":"2025-10-25T13:52:07.583691+02:00","dependencies":[{"issue_id":"UI-138","depends_on_id":"UI-127","type":"parent-child","created_at":"2025-10-25T12:14:11.914986+02:00","created_by":"agent"}]}
{"id":"UI-14","content_hash":"7aa4b0379319f2075f773fdcd2906d2c4c3eefaf502ddb536fd7af79c7c17b71","title":"Docs: README and quickstart","description":"Author user-facing documentation and a developer quickstart.\n\nScope\n- README with purpose, features, screenshots (later)\n- Quickstart for running the server + SPA\n- Contribution guide and coding standards link\n\nNotes\n- Keep concise and local-first focused.","acceptance_criteria":"- README explains how to run the app locally and how edits propagate through `bd`.\n- Quickstart covers dev workflow and validation commands (`npm test`, `npx tsc`, eslint, prettier).","notes":"Docs added.\n- README.md explains purpose, how to run locally, and how edits propagate through `bd`.\n- Quickstart exists at docs/quickstart.md with dev workflow and validation commands.\n- Architecture and protocol reference at docs/architecture.md.\n- Lint, typecheck, and tests pass.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T09:15:44.086085+02:00","updated_at":"2025-10-24T10:24:05.167499+02:00","closed_at":"2025-10-22T15:37:45.523999+02:00","dependencies":[{"issue_id":"UI-14","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:58.528452+02:00","created_by":"max"},{"issue_id":"UI-14","depends_on_id":"UI-2","type":"blocks","created_at":"2025-10-22T09:18:52.153337+02:00","created_by":"max"},{"issue_id":"UI-14","depends_on_id":"UI-8","type":"blocks","created_at":"2025-10-22T09:18:56.695603+02:00","created_by":"max"}]}
{"id":"UI-140","content_hash":"9402ac95e1a689d84bf1ce30c0101290cab5a28c38a78480241e093a8686e8a3","title":"Fix TS types for watcher coalescing API","description":"Adjust JSDoc types to match new watcher coalescing API. `attachWsServer` options accept `refresh_debounce_ms`, and the return object includes `scheduleListRefresh`. Update `server/ws.js` JSDoc accordingly; ensure `server/index.js` and tests type‑check. Verify `tsc -p tsconfig.json --noEmit` passes.","acceptance_criteria":"- tsc passes with no errors\n- Tests still pass\n- No runtime behavior changes","status":"closed","priority":2,"issue_type":"bug","assignee":"agent","created_at":"2025-10-25T13:23:05.488102+02:00","updated_at":"2025-10-25T13:23:13.799395+02:00","closed_at":"2025-10-25T13:23:13.799395+02:00","dependencies":[{"issue_id":"UI-140","depends_on_id":"UI-131","type":"discovered-from","created_at":"2025-10-25T13:23:09.768984+02:00","created_by":"agent"}]}
{"id":"UI-141","content_hash":"c4942e43b58921f181cf8f6a3106419bd1ac11d471dc745839bcfd421962912b","title":"Pure push-based issue updates (no fetch)","description":"Move beads-ui to a pure push model for issue data. Today clients subscribe to server updates, but use those pushed notifications to trigger a fetch. Goal: Server pushes full issue JSON for `added` and `updated`, and only ids for `removed`. Initial subscribe returns an `added` snapshot with all issues. Client maintains a normalized local cache and re-renders directly from pushed data with no follow-up fetch.","design":"Push-only protocol (breaking):\n- Message shape: { topic:\"issues\", action:\"added\"|\"updated\"|\"removed\", revision:number, snapshot?:boolean, payload:{ issues:Issue[] }|{ ids:string[] } }\n- Handshake: Client subscribes with { subscribe:\"issues\" }; server replies { subscribed:\"issues\" }.\n- Initial subscribe replies with a single `added` snapshot (all issues) and `snapshot:true`.\n- Server batches multiple changes into arrays and increments `revision` monotonically per subscription.\n- No version negotiation or v1 fallback; fetch-on-notify path removed.\n\nServer:\n- For `added`/`updated`, include full Issue JSON; for `removed`, only ids.\n- Include `revision` on every message; batch when possible.\n\nClient:\n- Maintain normalized store keyed by id; reducers for `added`/`updated`/`removed`.\n- Drive UI renders from store; remove issue-list fetch after subscribe.\n- Resilience: tolerate out-of-order packets by ignoring stale `revision` (\u003c= last applied).\n\nCompatibility \u0026 Rollout:\n- Breaking change. No feature flag, no phased rollout, no telemetry collection.","acceptance_criteria":"- After subscribe, there is no network fetch for the issue list in normal operation.\n- Server emits full Issue JSON for `added`/`updated` and only ids for `removed`.\n- Initial subscribe returns an `added` snapshot with all current issues.\n- Client maintains a normalized cache and re-renders from pushes only.\n- Unit + integration tests cover reducers and protocol behavior.\n- Protocol doc reflects push-only.","status":"closed","priority":1,"issue_type":"epic","assignee":"agent","created_at":"2025-10-25T19:47:45.954531+02:00","updated_at":"2025-10-25T20:36:37.157566+02:00","closed_at":"2025-10-25T20:36:37.157566+02:00"}
{"id":"UI-142","content_hash":"c0a6b586b8ab056df36b61c2e1ad13bac08672291fb0d04c81b010d61212ec48","title":"Define push protocol v2 schema and handshake","description":"Specify the message format and subscribe handshake for push-based issue updates (v2). Include semantics for `added`/`updated`/`removed`, batching, initial snapshot, and reconnect behavior.","design":"Schema:\n- Envelope: { topic:\"issues\", action:\"added\"|\"updated\"|\"removed\", revision:number, snapshot?:boolean, payload:object, meta:{ sent_at:string } }\n- Payload:\n  - added: { issues: Issue[] }\n  - updated: { issues: Issue[] }\n  - removed: { ids: string[] }\nHandshake:\n- Client -\u003e Server: { subscribe:\"issues\", accepts:[\"push-v2\",\"push-v1\"] }\n- Server -\u003e Client: { subscribed:\"issues\", protocol:\"push-v2\" }\n- On subscribe, server immediately sends `added` snapshot with all issues.\nOrdering \u0026 batching:\n- `revision` increments per subscription; messages may be batched; client ignores stale revisions.\nCompatibility:\n- If server replies with `push-v1`, client stays on legacy fetch-on-notify path.","acceptance_criteria":"- Markdown doc with v2 schema and handshake lives under docs/protocol/issues-push-v2.md with request/response examples.\n- Fields and types defined for each action and envelope.\n- Version negotiation and reconnect behavior documented.\n- Migration notes include compatibility with push-v1.","notes":"Doc added: docs/protocol/issues-push-v2.md. Includes envelope schema (topic/action/revision/snapshot/meta), payload types for added/updated/removed, subscribe handshake with version negotiation (accepts [\"push-v2\",\"push-v1\"]) and reconnect behavior, ordering \u0026 batching with revision semantics, and migration notes for v1 fallback. Ran validation: typecheck, tests, eslint, prettier — all green.","status":"closed","priority":1,"issue_type":"task","assignee":"agent","created_at":"2025-10-25T19:47:54.00481+02:00","updated_at":"2025-10-25T19:54:53.749769+02:00","closed_at":"2025-10-25T19:54:53.749769+02:00","dependencies":[{"issue_id":"UI-142","depends_on_id":"UI-141","type":"parent-child","created_at":"2025-10-25T19:48:55.748457+02:00","created_by":"agent"}]}
{"id":"UI-143","content_hash":"3eea89e0d2fd42401979c08ac305d71fada671b3eba624eb87f9adf29b863454","title":"Server: push full issue JSON for added/updated; ids for removed","description":"Update server-side subscription delivery to send complete Issue objects for `added` and `updated`, and only ids for `removed`. On initial subscribe, send a batched `added` snapshot containing all issues.","design":"Update server-side subscription delivery to send complete Issue objects for `added` and `updated`, and only ids for `removed`. On initial subscribe, send a batched `added` snapshot containing all issues. No protocol negotiation or v1 fallback.","acceptance_criteria":"- Integration tests demonstrate a subscribe response with a single `added` snapshot including all issues.\n- Subsequent `updated` messages contain full Issue JSON; `removed` contains only ids.\n- `revision` increments monotonically for the subscriber.\n- No v1 path remains; only push-only delivery is supported.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-25T19:47:59.840185+02:00","updated_at":"2025-10-25T20:36:04.741741+02:00","closed_at":"2025-10-25T20:36:04.741741+02:00","dependencies":[{"issue_id":"UI-143","depends_on_id":"UI-141","type":"parent-child","created_at":"2025-10-25T19:48:58.412719+02:00","created_by":"agent"},{"issue_id":"UI-143","depends_on_id":"UI-142","type":"blocks","created_at":"2025-10-25T19:49:28.315257+02:00","created_by":"agent"}]}
{"id":"UI-144","content_hash":"1ec3bbf43b79a888e8fb3bca113beaa6dc0a13666a7089a7172d437fc375c692","title":"Server: batching and revision sequencing for issue pushes","description":"Ensure pushes are batched when multiple changes occur close in time and include a monotonically increasing `revision` per subscription.","design":"Ensure pushes are batched when multiple changes occur close in time and include a monotonically increasing `revision` per subscription. Remove any additional timestamp fields on envelopes.","acceptance_criteria":"- Integration test shows multiple issue updates within 10ms are batched.\n- Revisions strictly increase by 1 across messages for a subscription.\n- No `meta.sent_at` or similar timestamp is included in envelopes.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-25T19:48:06.702678+02:00","updated_at":"2025-10-26T14:47:59.701067+01:00","closed_at":"2025-10-26T14:47:59.701076+01:00","dependencies":[{"issue_id":"UI-144","depends_on_id":"UI-141","type":"parent-child","created_at":"2025-10-25T19:49:01.685248+02:00","created_by":"agent"},{"issue_id":"UI-144","depends_on_id":"UI-142","type":"blocks","created_at":"2025-10-25T19:49:30.87637+02:00","created_by":"agent"}]}
{"id":"UI-145","content_hash":"f7ae47bce6f1f0b0075ee18dbe17190138a92a7a5ccb7ad3f45b55d6b457cc07","title":"Client: normalized issue store and subscription reducers","description":"Introduce a normalized store keyed by issue id and reducers to apply `added`/`updated`/`removed` to the local cache.","design":"Introduce a normalized store keyed by issue id and reducers to apply `added`/`updated`/`removed` to the local cache. Track `last_applied_revision` and ignore stale envelopes (`revision` \u003c= last applied).","acceptance_criteria":"- Unit tests cover reducers: adds new, updates existing, removes by id, preserves view ordering.\n- Store emits a single change event per received batch.\n- Last applied revision tracked; stale envelopes ignored.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-25T19:48:12.738707+02:00","updated_at":"2025-10-25T20:36:10.229723+02:00","closed_at":"2025-10-25T20:36:10.229723+02:00","dependencies":[{"issue_id":"UI-145","depends_on_id":"UI-141","type":"parent-child","created_at":"2025-10-25T19:49:04.557069+02:00","created_by":"agent"},{"issue_id":"UI-145","depends_on_id":"UI-142","type":"blocks","created_at":"2025-10-25T19:49:34.050732+02:00","created_by":"agent"}]}
{"id":"UI-146","content_hash":"3ca2b6d5242cdded44baa544b4b890061bcd40756ae167d9f1e68151fc6e32c2","title":"Client: wire subscription to store; remove fetch-on-notify","description":"Consume server envelopes directly in the client, applying them to the local store and re-rendering, removing the current reload/fetch flow.","design":"Consume server envelopes directly in the client, applying them to the local store and re-rendering, removing the current reload/fetch flow. Subscribe with `{ subscribe: \"issues\" }`. Remove legacy fallback paths and feature flags.","acceptance_criteria":"- Manual test: subscription returns snapshot; UI displays issues without calling the list endpoint.\n- Subsequent pushes update the UI in place (add/update/remove) without reload.\n- No feature flag or v1 fallback remains.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-25T19:48:18.373353+02:00","updated_at":"2025-10-25T20:36:16.457189+02:00","closed_at":"2025-10-25T20:36:16.457189+02:00","dependencies":[{"issue_id":"UI-146","depends_on_id":"UI-141","type":"parent-child","created_at":"2025-10-25T19:49:07.417063+02:00","created_by":"agent"},{"issue_id":"UI-146","depends_on_id":"UI-142","type":"blocks","created_at":"2025-10-25T19:49:37.637157+02:00","created_by":"agent"},{"issue_id":"UI-146","depends_on_id":"UI-145","type":"blocks","created_at":"2025-10-25T19:49:40.611693+02:00","created_by":"agent"},{"issue_id":"UI-146","depends_on_id":"UI-143","type":"blocks","created_at":"2025-10-25T19:49:44.702053+02:00","created_by":"agent"}]}
{"id":"UI-147","content_hash":"eab5ddb6860a1f05601ff4641b5e54724c19d7cf929cada4a824da8819e43c31","title":"Client: reconnect, resubscribe, and fallback behavior","description":"Handle disconnects by resubscribing and replacing local state with the new snapshot.","design":"- On websocket reconnect, perform subscribe handshake and reset last_applied_revision to 0.\n- Replace store from fresh `added` snapshot, then process deltas.","acceptance_criteria":"- Simulated reconnect results in refreshed state from snapshot with no fetches.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-25T19:48:23.292633+02:00","updated_at":"2025-10-25T20:36:30.091146+02:00","closed_at":"2025-10-25T20:36:30.091146+02:00","dependencies":[{"issue_id":"UI-147","depends_on_id":"UI-141","type":"parent-child","created_at":"2025-10-25T19:49:11.288837+02:00","created_by":"agent"},{"issue_id":"UI-147","depends_on_id":"UI-143","type":"blocks","created_at":"2025-10-25T19:49:47.465231+02:00","created_by":"agent"}]}
{"id":"UI-148","content_hash":"4650a04eafa87a91b743fb618acfb20a69b25da6d844ab4fa31fbccc5c3300ef","title":"Tests: reducers, server integration, and no-fetch e2e","description":"Add unit tests for client reducers, integration tests for server envelopes, and an end-to-end test that verifies no list fetch after initial subscribe.","design":"- Client unit: `applyAdded|Updated|Removed` behaviors with ordering and revision checks.\n- Server integration: subscribe → receive snapshot; update issues → receive `updated`; delete → receive `removed` ids.\n- E2E: spin app, mock server or use test server, assert: after subscribe, UI renders issues with zero GET /issues requests.","acceptance_criteria":"- All new tests pass and run in CI.\n- E2E test fails if a fetch is attempted post-subscribe.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-25T19:48:31.794083+02:00","updated_at":"2025-10-25T20:36:22.714966+02:00","closed_at":"2025-10-25T20:36:22.714966+02:00","dependencies":[{"issue_id":"UI-148","depends_on_id":"UI-141","type":"parent-child","created_at":"2025-10-25T19:49:14.005387+02:00","created_by":"agent"},{"issue_id":"UI-148","depends_on_id":"UI-143","type":"blocks","created_at":"2025-10-25T19:49:51.048836+02:00","created_by":"agent"},{"issue_id":"UI-148","depends_on_id":"UI-146","type":"blocks","created_at":"2025-10-25T19:49:55.253274+02:00","created_by":"agent"}]}
{"id":"UI-149","content_hash":"f896032fba7287340ad503aad3a8611088f5fd94102146cf6329a98c0982ea12","title":"Docs: push protocol (breaking change)","description":"Document the push v2 protocol and steps to migrate clients from fetch-on-notify to push-only.","design":"- Update docs/protocol/issues-push-v2.md to reflect push-only, breaking protocol: no negotiation, no v1 fallback, no telemetry, no sent_at.\n- Update architecture docs to reference the new push protocol and mark v1 as legacy.\n- Remove migration/rollout guidance.\n- Keep troubleshooting minimal; focus on deterministic revision/snapshot behavior.","acceptance_criteria":"- Docs updated in repo with the breaking push-only protocol.\n- Main docs reference the new protocol page.\n- No migration or telemetry sections remain.","notes":"Adopting single-envelope deltas: remove action-based messages; document one push message containing `added`, `updated`, and `removed` arrays with `revision`/`snapshot` fields, matching our subscription delta style. Proceeding to update docs/protocol/issues-push-v2.md.","status":"closed","priority":2,"issue_type":"chore","assignee":"agent","created_at":"2025-10-25T19:48:36.505369+02:00","updated_at":"2025-10-25T20:15:01.441469+02:00","closed_at":"2025-10-25T20:15:01.441469+02:00","dependencies":[{"issue_id":"UI-149","depends_on_id":"UI-141","type":"parent-child","created_at":"2025-10-25T19:49:17.088905+02:00","created_by":"agent"},{"issue_id":"UI-149","depends_on_id":"UI-142","type":"blocks","created_at":"2025-10-25T19:49:59.340713+02:00","created_by":"agent"}]}
{"id":"UI-15","content_hash":"73a3029bd7f8f8fc5afdccc9b6c82b3d69a061e910f2b85212f37a917b3cb8d6","title":"SPA web UI for bd (local app)","description":"Purpose: Build a local, single‑page web app to browse issues, change status, and edit text for the bd CLI tracker.\n\nScope and constraints:\n- Backend: Express app in `/server` serving static files from `/app`.\n- Realtime: All data exchange via WebSocket using the `ws` package.\n- Live updates: Watch `.beads/issues.jsonl`; broadcast changes to the active page/clients.\n- Frontend: `index.html` and ES modules in `/app` (vanilla JS, ESM, JSDoc types).\n- Actions: Client editing sends WS messages; server maps them to `bd` commands.\n- Testing: Use Vitest (Node + jsdom). Configure ESLint/Prettier and type checks via `tsc`.\n- Standards: Follow project coding/testing standards provided by user instructions.\n\nHigh‑level capabilities:\n- List, filter, and sort issues.\n- View issue details including dependencies.\n- Update status and priority; edit title/description.\n- Auto‑refresh on `.beads/issues.jsonl` changes; push‑based (no polling).\n- Display ready work and basic stats.\n\nNon‑goals (initial phase):\n- Multi‑repo orchestration, auth, or remote access beyond localhost.\n- Advanced visualization (graphs) beyond simple lists/trees.\n\nWS message types (initial draft):\n- `list-issues` { filters }\n- `show-issue` { id }\n- `update-status` { id, status }\n- `edit-text` { id, field: 'title'|'description', value }\n- `update-priority` { id, priority }\n- `create-issue` { title, type, priority, description }\n- `list-ready` {}\n- `subscribe-updates` {}\n\nbd command mapping (examples):\n- list → `bd list --json [filters]`\n- show → `bd show \u003cid\u003e --json`\n- update status/priority → `bd update \u003cid\u003e --status ... | --priority ...`\n- close → `bd close \u003cid\u003e`; reopen → `bd reopen \u003cid\u003e`\n- create → `bd create \"title\" -t \u003ctype\u003e -p \u003cprio\u003e -d \"desc\"`\n- dependencies → `bd dep add|remove \u003ca\u003e \u003cb\u003e`; tree → `bd dep tree \u003cid\u003e` (optional)\n\nLive update source:\n- Observe `.beads/issues.jsonl` (JSON Lines). On change, server emits `issues-changed` with minimal payload (timestamp + touched ids if derivable, else invalidate caches).\n\nDev ergonomics:\n- `npm run dev`: concurrently run Express+WS with watch (nodemon) and static app server.\n- `npm test`: vitest unit tests.\n- `npm run lint` and `npm run typecheck`.\n","acceptance_criteria":"- App lists issues from current bd DB and shows details.\n- Status changes and text edits via UI reflect in bd DB and survive reload.\n- `.beads/issues.jsonl` changes broadcast to connected clients; UI updates without manual refresh.\n- All traffic uses a WebSocket; no fetch REST endpoints for data.\n- Tests: At least core flows (list/show/update/edit) covered by Vitest.\n- Repo contains `/server`, `/app`, and initial docs with run instructions.\n","notes":"Duplicate of UI-1 (epic). The implemented app matches this scope: SPA under /app, server under /server, WebSocket transport, DB watcher broadcast, and tests/docs in place. Closing as completed by UI-1 and related tasks.","status":"closed","priority":1,"issue_type":"epic","created_at":"2025-10-22T10:40:35.998696+02:00","updated_at":"2025-10-24T10:24:05.167808+02:00","closed_at":"2025-10-22T15:34:20.384469+02:00","dependencies":[{"issue_id":"UI-15","depends_on_id":"UI-1","type":"related","created_at":"2025-10-22T11:03:29.872508+02:00","created_by":"max"}]}
{"id":"UI-150","content_hash":"027ca53a2e7cf3676ff0e874f4ffc26a08d79843d61987499791e40e80c70407","title":"Rollout: feature flag, telemetry, and soak","description":"Introduce a feature flag for push v2 and add lightweight telemetry to observe adoption and errors during rollout.","design":"- Env var `PUSH_V2_ENABLED` gates client path.\n- Log counters: subscription protocol negotiated, envelopes received by action, reconnects, and errors.\n- Plan: enable in dev → staging → prod with 100% after soak.","acceptance_criteria":"- Feature flag toggles behavior at runtime.\n- Basic metrics visible in logs or devtools.\n- Rollout plan documented with owners and timelines.","status":"closed","priority":3,"issue_type":"chore","created_at":"2025-10-25T19:48:41.112196+02:00","updated_at":"2025-10-25T20:07:11.292648+02:00","closed_at":"2025-10-25T20:07:11.292654+02:00","dependencies":[{"issue_id":"UI-150","depends_on_id":"UI-141","type":"parent-child","created_at":"2025-10-25T19:49:20.429059+02:00","created_by":"agent"},{"issue_id":"UI-150","depends_on_id":"UI-146","type":"blocks","created_at":"2025-10-25T19:50:02.312775+02:00","created_by":"agent"},{"issue_id":"UI-150","depends_on_id":"UI-148","type":"blocks","created_at":"2025-10-25T19:50:05.079554+02:00","created_by":"agent"},{"issue_id":"UI-150","depends_on_id":"UI-149","type":"blocks","created_at":"2025-10-25T19:50:07.944703+02:00","created_by":"agent"}]}
{"id":"UI-151","content_hash":"38922758c8c68210c559399238646b49f133e191921b5ea232ae3fe308e126a4","title":"Refactor: Push‑only lists end‑to‑end (remove reads, wire subscriptions)","description":"Goal: complete the UI‑141 intent by moving the UI to push‑only for list data. One subscription per list (e.g., ready, in progress, closed, epics, children), all updates pushed to clients. No request/response reads for lists; only mutations remain as RPC.\n\nCurrent state (2025‑10‑25):\n- Server implements `subscribe-list` + `list-delta` and `subscribe-issues` + `issues` envelopes with coalesced refresh.\n- UI creates a single subscriptions store but views still call `list-issues` and `epic-status` RPCs; `list-delta` isn’t used for rendering.\n- Epics view attempts `issues-for-epic` but sends wrong param (`epic` vs `epic_id`).\n\nHigh‑level changes:\n- Wire per‑view/per‑tab list subscriptions and render from local stores.\n- Replace `list-issues` + `epic-status` reads with selectors over `issues` + `subscriptions`.\n- Keep mutations via RPC; deprecate/remove read RPCs after migration.\n","acceptance_criteria":"- No `list-issues` or `epic-status` calls remain in `app/`.\n- Issues, Board, and Epics render solely from local stores fed by `issues` + `list-delta`.\n- One subscription per visible list; switching tabs updates subscriptions accordingly.\n- All tests pass; docs updated to reflect v2 push‑only model.","notes":"All dependent issues are now closed, including UI-160 (docs). Push-only model implemented across client and server:\n- Issues/Board/Epics render from per-subscription issue stores\n- Read RPCs removed or no longer used (`list-issues`, `epic-status`)\n- Protocol and architecture docs updated to v2\n- Tests and typecheck/lint/format all green on 2025-10-26\n\nNote: The New Issue dialog retains a best-effort fallback call to `list-issues` to locate a newly created id. The server no longer supports this read; the call is wrapped in try/catch and does not affect list rendering. If desired, we can replace this with a push-only detail subscription flow in a follow-up.\n","status":"closed","priority":1,"issue_type":"epic","created_at":"2025-10-25T21:03:00.465338+02:00","updated_at":"2025-10-26T19:07:55.901864+01:00","closed_at":"2025-10-26T19:07:55.901864+01:00"}
{"id":"UI-152","content_hash":"91c7ccb0108287cbb24ac9d4e2c5e74abe2002a13d4ea89d407bfa8cfbcefe8a","title":"ADR: Push‑only lists architecture and migration plan","description":"Write a short ADR describing the push‑only list model and client wiring.\n\nScope\n- One subscription per visible list (Issues tab filter → one spec; Board columns → four specs; Epics → derived from issues or dedicated specs for children)\n- Client stores: `issues-store` (push envelopes) + `subscriptions-store` (list membership by key)\n- Selectors: functions to compose IDs from `subscriptions-store` with entities from `issues-store`, including sorting rules for each view\n- Removal of read RPCs: `list-issues`, `epic-status`\n\nDeliverables\n- `docs/adr/NNN-push-only-lists.md` with tradeoffs and API shape\n- Checklist for view migrations and test updates","acceptance_criteria":"- ADR committed with clear API and sequencing steps\n- Checklists created and referenced by child issues","notes":"ADR committed at docs/adr/001-push-only-lists.md with architecture, API shape, and migration checklist. Referenced ADR from UI-156, UI-159, UI-160 notes. Typecheck/tests/lint/format all clean as of 2025-10-26.","status":"closed","priority":2,"issue_type":"task","assignee":"agent","created_at":"2025-10-25T21:03:10.001232+02:00","updated_at":"2025-10-26T09:01:39.522014+01:00","closed_at":"2025-10-26T09:01:39.522014+01:00","dependencies":[{"issue_id":"UI-152","depends_on_id":"UI-151","type":"parent-child","created_at":"2025-10-25T21:03:58.528185+02:00","created_by":"agent"}]}
{"id":"UI-153","content_hash":"bf472d9fe88a53a20dbf1a315704ed60d8cf797ff0dfcde2227daa621f50778a","title":"Client: List view renders from subscriptions + issues stores (drop list-issues)","description":"Migrate `app/views/list.js` to push‑only.\n\nChanges\n- Subscribe by Issues tab filter using `computeIssuesSpec` (already present in `app/main.js`), with `client_id` = `tab:issues`\n- Remove RPC in `load()`; instead, derive items = `issuesStore.getMany(subscriptions.selectors.getIds('tab:issues'))`\n- Keep client‑side filters (search, type) as today\n- Re‑render on store updates (`issuesStore.subscribe`) instead of calling `load()` on push\n- Remove `onPushLike` dependency for the list view\n\nTests\n- Update `app/views/list.test.js` to simulate `issues` + `list-delta` events and assert rendering","acceptance_criteria":"- No `list-issues` usage in list view\n- List updates live on `issues` and `list-delta` without explicit reloads\n- All list view tests pass","notes":"Implemented push-only list view and updated tests.\n\nCode:\n- app/views/list.js: Drop list-issues RPC; derive items from subscriptions + issuesStore (ids → entities). Added live re-render via issuesStore.subscribe. Kept mutation RPCs (edit-text, update-*, show-issue) for inline edits.\n- app/main.js: Pass issuesStore + subscriptions to createListView. (No behavior change to other views.)\n\nTests:\n- app/views/list.test.js: Reworked to use push fixtures (issues snapshots + list-delta membership) and removed RPC call assertions.\n- app/views/list.navigation.test.js: Updated to use push fixtures.\n- app/views/list.inline-edits.test.js: Updated to use push fixtures while still asserting mutation RPCs.\n\nValidation:\n- npm run typecheck: clean\n- npm test: all tests passing\n- npm run lint / format: clean\n\nNotes:\n- List view now re-renders on issues push without relying on onPushLike; main still calls load() on push for backward-compatibility with existing integration tests. This can be removed in UI-158 when migrating remaining tests.","status":"closed","priority":1,"issue_type":"feature","assignee":"agent","created_at":"2025-10-25T21:03:16.145563+02:00","updated_at":"2025-10-26T07:52:37.259724+01:00","closed_at":"2025-10-26T07:52:37.259724+01:00","dependencies":[{"issue_id":"UI-153","depends_on_id":"UI-151","type":"parent-child","created_at":"2025-10-25T21:04:03.542484+02:00","created_by":"agent"}]}
{"id":"UI-154","content_hash":"a353c900fba3b7833bf04437a742a7dbcb90f21cf919a6243547973805b5f7a3","title":"Client: Board renders from subscriptions + issues store (remove get* reads)","description":"Migrate `app/views/board.js` to push‑only.\n\nChanges\n- Use the four tab‑scoped subscriptions created in `main.js` (`tab:board:ready|in-progress|closed|blocked`)\n- Replace data layer calls with selectors: ids → issuesStore.getMany(ids) then apply existing sorting rules\n- Closed column: use local timeframe filter on `closed_at`; rely on `subscriptions` membership + `issues` updates for live changes\n- Drop `issues-changed` re‑fetch logic; re‑render on `issues` envelopes\n\nTests\n- Update `app/main.live-updates*.test.js` board assertions to rely on push events; remove RPC stubs","acceptance_criteria":"- No calls to `getReady|getInProgress|getClosed|getBlocked` remain\n- Board updates live on push without reloading\n- Sorting and closed timeframe filter preserved","notes":"Adjusted server mapping for Ready list per feedback: removed unsupported '--status open' from 'bd ready' invocation. Also removed temporary Ready fallback. Updated tests and doc to match. All tests green.","status":"closed","priority":1,"issue_type":"feature","assignee":"agent","created_at":"2025-10-25T21:03:21.574462+02:00","updated_at":"2025-10-26T08:11:23.23908+01:00","closed_at":"2025-10-26T08:02:38.217278+01:00","dependencies":[{"issue_id":"UI-154","depends_on_id":"UI-151","type":"parent-child","created_at":"2025-10-25T21:04:08.869325+02:00","created_by":"agent"}]}
{"id":"UI-155","content_hash":"fc53913af16f9d0f7db78ec5b9e66d343dcb9238e722d2c108e19a03ff621df4","title":"Client: Epics view derives groups from issues; live children via subscriptions","description":"Remove `epic-status` RPC; compute groups from the `issues` store and wire children via `issues-for-epic`.\n\nChanges\n- Build selectors over `issuesStore`: epics = issues with `issue_type==='epic'`; for each epic, compute `total_children`/`closed_children` from issue dependents\n- When expanding an epic, subscribe using `subscriptions.subscribeList('epic:'+id, { type: 'issues-for-epic', params: { epic_id: id } })` (fix param name) and render children from `issuesStore.getMany(ids)`\n- Remove RPC calls in `createEpicsView`; re‑render on `issues` envelopes and on `list-delta`\n\nTests\n- Update `app/views/epics.test.js` to simulate issues snapshot + per‑epic deltas; assert progress counts and live updates","acceptance_criteria":"- No `epic-status` or `list-issues` calls in epics view\n- Expanding/collapsing subscribes/unsubscribes cleanly; children update live\n- Progress counts match server truth (validated via test fixtures)","notes":"Claimed by agent on 2025-10-26; starting migration of epics view to push‑only with subscriptions + issues stores.","status":"closed","priority":1,"issue_type":"feature","assignee":"agent","created_at":"2025-10-25T21:03:28.42831+02:00","updated_at":"2025-10-26T08:22:58.534276+01:00","closed_at":"2025-10-26T08:22:58.534276+01:00","dependencies":[{"issue_id":"UI-155","depends_on_id":"UI-151","type":"parent-child","created_at":"2025-10-25T21:04:11.739628+02:00","created_by":"agent"}]}
{"id":"UI-156","content_hash":"ec4ef84d90497d54d1a9bf60467e53817c2589689865366321cf38a50524c2a2","title":"Client: List selectors utility (ids → entities + sort)","description":"Introduce a focused utility that composes `subscriptionsStore.selectors.getIds(client_id)` with `issuesStore.getMany(ids)` and applies view‑specific sorting.\n\n- Expose helpers: `selectIssuesFor(client_id)`, `selectBoardColumn(client_id, sort='ready'|'in_progress'|'closed')`, `selectEpicChildren(epic_id)`\n- Coalesce re‑renders: provide a `subscribe(fn)` that hooks into `issuesStore.subscribe` and triggers once per envelope","acceptance_criteria":"- Utility in `app/data/list-selectors.js` with JSDoc\n- Used by list, board, and epics views in this epic’s PRs\n- Unit tests cover sorting + empty states","notes":"Implemented app/data/list-selectors.js with selectIssuesFor, selectBoardColumn, selectEpicChildren, and subscribe. Added unit tests covering sorting and empty states. All validation checks pass.","status":"closed","priority":2,"issue_type":"task","assignee":"agent","created_at":"2025-10-25T21:03:36.625087+02:00","updated_at":"2025-10-26T09:07:42.943265+01:00","closed_at":"2025-10-26T09:07:42.943265+01:00","dependencies":[{"issue_id":"UI-156","depends_on_id":"UI-151","type":"parent-child","created_at":"2025-10-25T21:04:14.806852+02:00","created_by":"agent"}]}
{"id":"UI-157","content_hash":"d21f6a1553316f13160c36877a709c9af91590906e37fe6abc86f0ad0eb807a7","title":"Server: Remove read RPCs after migration (list-issues, epic-status)","description":"After UI migration lands, remove legacy read endpoints to enforce push‑only.\n\nChanges\n- Delete handlers for `list-issues` and `epic-status` in `server/ws.js`\n- Update `app/protocol.md` and `docs/architecture.md` to mark them removed\n- Clean up any server‑side state that tracked list filter hints for `issues-changed`","acceptance_criteria":"- No references to removed handlers remain\n- Tests updated or removed accordingly\n- Docs updated","notes":"Starting removal of legacy read RPC handlers (list-issues, epic-status); cleaning list filter hint state; updating docs and tests.","status":"closed","priority":2,"issue_type":"chore","assignee":"agent","created_at":"2025-10-25T21:03:41.43527+02:00","updated_at":"2025-10-26T09:30:45.085921+01:00","closed_at":"2025-10-26T09:30:45.085921+01:00","dependencies":[{"issue_id":"UI-157","depends_on_id":"UI-153","type":"blocks","created_at":"2025-10-25T21:04:53.434871+02:00","created_by":"agent"},{"issue_id":"UI-157","depends_on_id":"UI-154","type":"blocks","created_at":"2025-10-25T21:04:56.897794+02:00","created_by":"agent"},{"issue_id":"UI-157","depends_on_id":"UI-155","type":"blocks","created_at":"2025-10-25T21:05:01.810024+02:00","created_by":"agent"},{"issue_id":"UI-157","depends_on_id":"UI-158","type":"blocks","created_at":"2025-10-25T21:05:05.808862+02:00","created_by":"agent"},{"issue_id":"UI-157","depends_on_id":"UI-159","type":"blocks","created_at":"2025-10-25T21:05:09.086447+02:00","created_by":"agent"}]}
{"id":"UI-158","content_hash":"7db3e9f83ce534631575dada3182139cfa930dd75a8bdb100e79e81f0f8daee2","title":"Tests: Convert list/board/epics tests to push fixtures (no RPC stubs)","description":"Update unit tests to drive the UI with `issues` snapshot/envelopes and `list-delta` events instead of stubbing `list-issues`/`epic-status` responses.\n\nChanges\n- Provide helpers to trigger client `on('issues', ...)` and `on('list-delta', ...)`\n- Update expectations in `app/main.live-updates*.test.js`, `app/views/*.test.js`\n- Remove obsolete RPC‑based fixtures","acceptance_criteria":"- Tests pass locally with only push events\n- No test calls `list-issues` or `epic-status`","notes":"Claimed on 2025-10-26. Starting test migration to push fixtures across remaining suites that still stub read RPCs.","status":"closed","priority":1,"issue_type":"task","assignee":"agent","created_at":"2025-10-25T21:03:46.147609+02:00","updated_at":"2025-10-26T08:56:08.739973+01:00","closed_at":"2025-10-26T08:56:08.739973+01:00","dependencies":[{"issue_id":"UI-158","depends_on_id":"UI-151","type":"parent-child","created_at":"2025-10-25T21:04:18.60247+02:00","created_by":"agent"},{"issue_id":"UI-158","depends_on_id":"UI-153","type":"blocks","created_at":"2025-10-25T21:04:32.969667+02:00","created_by":"agent"},{"issue_id":"UI-158","depends_on_id":"UI-154","type":"blocks","created_at":"2025-10-25T21:04:36.829952+02:00","created_by":"agent"},{"issue_id":"UI-158","depends_on_id":"UI-155","type":"blocks","created_at":"2025-10-25T21:04:40.20796+02:00","created_by":"agent"}]}
{"id":"UI-159","content_hash":"0e9103eeca9689aed79d39d697b4c91ef75a2fd4a241b1b7d769c106ec1be8f9","title":"Cleanup: Remove data/providers list reads; keep mutations","description":"Remove read methods from `app/data/providers.js` that proxy `list-issues` and `epic-status`. Keep `getIssue` temporarily for detail view until it also reads from push (follow‑up), and keep all mutation helpers.\n\nChanges\n- Delete `getReady|getBlocked|getOpen|getInProgress|getClosed|getEpicStatus`\n- Inline or replace usage with selectors\n- Update docs","acceptance_criteria":"- No read functions remain in providers; only mutations\n- No references to removed functions in app code","notes":"Removed list read methods from app/data/providers.js (getReady, getBlocked, getOpen, getInProgress, getClosed, getEpicStatus). Updated app/main.js to use createDataLayer(transport) without onEvent parameter. Updated tests: rewrote app/data/providers.test.js to assert no list reads and to cover getIssue + updateIssue. All checks pass.","status":"closed","priority":2,"issue_type":"chore","created_at":"2025-10-25T21:03:50.756851+02:00","updated_at":"2025-10-26T09:12:38.663657+01:00","closed_at":"2025-10-26T09:12:38.663657+01:00","dependencies":[{"issue_id":"UI-159","depends_on_id":"UI-151","type":"parent-child","created_at":"2025-10-25T21:04:21.672248+02:00","created_by":"agent"},{"issue_id":"UI-159","depends_on_id":"UI-153","type":"blocks","created_at":"2025-10-25T21:04:44.100423+02:00","created_by":"agent"},{"issue_id":"UI-159","depends_on_id":"UI-154","type":"blocks","created_at":"2025-10-25T21:04:47.169583+02:00","created_by":"agent"},{"issue_id":"UI-159","depends_on_id":"UI-155","type":"blocks","created_at":"2025-10-25T21:04:50.192595+02:00","created_by":"agent"}]}
{"id":"UI-16","content_hash":"adb47874e5ed79d2f43cff5ca829ce1e0a354d1972cabb4c9abe339fa138796c","title":"Bootstrap Node project and tooling","description":"Initialize project scaffolding for the SPA.\n- Create `package.json` with ESM (`\"type\":\"module\"`).\n- Add scripts: `start`, `dev`, `test`, `typecheck`, `lint`, `format`.\n- Configure ESLint (ESM), Prettier, and tsconfig for JS type-checking with JSDoc.\n- Install and configure Vitest (Node + jsdom), and `@types/node` for type hints.\n- Ensure `.editorconfig` exists or add basic one.\n","acceptance_criteria":"- Running `npm test` executes Vitest and passes a trivial test.\n- `npx tsc` runs without errors on the initial codebase.\n- `npx eslint --fix` and `npx prettier --write` operate on staged files.\n- Project uses ESM and JSDoc typing conventions.\n","notes":"Scaffolded Node project with ESM and tooling.\n- Files: package.json, tsconfig.json, .eslintrc.json, .prettierrc.json, .editorconfig, vitest.config.mjs, src/utils/sum.js, test/sum.test.js. Updated existing eslint.config.js to add ignores for flat config.\n- Installed dev deps: vitest, typescript, @types/node, eslint, @eslint/js, eslint-plugin-jsdoc, eslint-plugin-n, eslint-plugin-import, eslint-plugin-promise, prettier, globals.\n- Validations: `npm test` passes (1 test). `npx tsc --noEmit` passes. `npx eslint --fix src test` runs clean. `npx prettier --write .` formats files.\n- Node engine set to \"\u003e=18.19\".\n","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T10:41:03.493953+02:00","updated_at":"2025-10-24T10:24:05.168139+02:00","closed_at":"2025-10-22T11:18:04.244474+02:00","dependencies":[{"issue_id":"UI-16","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:30.554474+02:00","created_by":"max"}]}
{"id":"UI-160","content_hash":"c7d5664b61c91a03de3af307c1b5c50ab07463f30aa4f23c1bfcd16890ceec4b","title":"Docs: Update protocol and architecture to push‑only (v2)","description":"Update `app/protocol.md` and `docs/architecture.md` to reflect push‑only v2 model; mark v1 read RPCs removed.\n","acceptance_criteria":"- Protocol docs no longer mention `list-issues`/`epic-status` as active","notes":"Updated docs/architecture.md to be v2-focused: push-only subscriptions, per-subscription stores, and mutations-only RPCs. Removed legacy v1 list-issues examples and clarified removals (list-issues, epic-status, subscribe-updates). app/protocol.md already reflected v2; left unchanged.\n\nValidation (2025-10-26):\n- npm run typecheck → OK\n- npm test → 210 passed\n- npm run lint → OK\n- npm run format:check → OK after formatting docs/architecture.md","status":"closed","priority":2,"issue_type":"task","assignee":"agent","created_at":"2025-10-25T21:03:54.546163+02:00","updated_at":"2025-10-26T19:07:42.174848+01:00","closed_at":"2025-10-26T19:07:42.174848+01:00","dependencies":[{"issue_id":"UI-160","depends_on_id":"UI-151","type":"parent-child","created_at":"2025-10-25T21:04:24.745907+02:00","created_by":"agent"}]}
{"id":"UI-161","content_hash":"f06f5c115f272018e91ec0748c4313e9548fb33d704a091d6cfb6046ab4f139b","title":"Ready column shows empty on board","description":"Regression after UI-154 push-only board migration: some environments report an empty Ready column while other columns populate. Root cause appears to be missing/unsupported `bd ready` command, causing server to produce no membership for `ready-issues`.\n\nFix implemented in same PR:\n- server/list-adapters.js: Add fallback in `fetchListForSubscription()` for `ready-issues`. If `bd ready` fails, compute Ready as Open minus Blocked using two list calls.\n\nAcceptance criteria:\n- Ready column populates in environments without `bd ready`.\n- No RPC reads added back; stays push-only.\n- Sorting and timeframe behavior unchanged.\n","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-26T08:07:10.676301+01:00","updated_at":"2025-10-26T08:07:20.938892+01:00","closed_at":"2025-10-26T08:07:20.938892+01:00","dependencies":[{"issue_id":"UI-161","depends_on_id":"UI-154","type":"discovered-from","created_at":"2025-10-26T08:07:15.596431+01:00","created_by":"agent"}]}
{"id":"UI-162","content_hash":"40cd31ed92c30316e491a24103ef09c18ded2f3caf7e7eb7328c96a7f5d34f3d","title":"Epics/Board views: fix reload and view-switch behavior","description":"- Epics view showed nothing on reload and used store-only derivation, not bd epic status\n- Switching to Epics from another view listed all epics (wrong), missing `bd epic status --json`\n- Board view worked once, then showed empty on returning (subscriptions re-setup delay)\n\nChanges:\n- Epics view now loads groups via data.getEpicStatus() (RPC to `bd epic status --json`) with store fallback\n- Main push handler stops calling epics/board load() on push (push-only philosophy)\n- Board view load() composes from subscriptions; if empty immediately after entering, falls back to data layer (`ready/blocked/in_progress/closed`) to avoid empty board, then continues push-only via store\n\nValidation:\n- All tests pass: npm test\n- Typecheck/lint/format pass","status":"closed","priority":1,"issue_type":"bug","assignee":"agent","created_at":"2025-10-26T08:40:24.763568+01:00","updated_at":"2025-10-26T08:40:36.693539+01:00","closed_at":"2025-10-26T08:40:36.693539+01:00"}
{"id":"UI-163","content_hash":"cd0e8a658d05b7cd45634dcbe6c4a766c30fbde4aa0b2b8a1b53b89751b9175a","title":"UI: Wire up createListSelectors for list rendering","description":"`createListSelectors` exists in `app/data/list-selectors.js` but is not consumed. Wire these selectors into the UI state layer so list views (Issues, Board, Epics) derive data from `issues` + `subscriptions` instead of direct RPC calls.\n\nScope\n- Identify the central store(s) that hold pushed `issues` and per-list subscription state.\n- Replace ad-hoc filtering in views with memoized selectors from `createListSelectors`.\n- Ensure selectors cover ready/in-progress/done, epic children, and search filters as applicable.\n- Add minimal unit tests for selector behavior.\n- Remove dead code paths now superseded by the selectors.\n","notes":"Wiring `createListSelectors` into the UI state layer and replacing ad-hoc filters/usages in views.","status":"closed","priority":2,"issue_type":"task","assignee":"agent","created_at":"2025-10-26T09:16:09.515111+01:00","updated_at":"2025-10-26T09:21:54.399322+01:00","closed_at":"2025-10-26T09:21:54.399322+01:00","labels":["frontend","selectors","state"],"dependencies":[{"issue_id":"UI-163","depends_on_id":"UI-151","type":"parent-child","created_at":"2025-10-26T09:16:12.905305+01:00","created_by":"agent"}]}
{"id":"UI-164","content_hash":"72fc8a80ea861cbc3494335911fca427f7447751b7b95467548ab1a76c401248","title":"UI-151: Fix board/epics push-only regressions","description":"Symptoms:\n- Board columns sometimes empty on reload (race before subscriptions)\n- Epics showed all epics when switching; none on reload\n- Status change (in_progress→open) produced list-delta with remove from in-progress and updated in ready, but Board did not reflect move\n\nRoot causes:\n- onRouteChange loaded views before wiring tab subscriptions; initial list-delta could arrive after first render → empty columns / fallback paths\n- Epics view still derived groups from store-all fallback on switch/reload when membership not yet present\n- Board and Epics views did not re-render on membership-only changes (list-delta) when no issues envelope touched the entity\n\nFixes:\n- main.js: call `ensureTabSubscriptions(s)` before `epics_view.load()`/`board_view.load()`\n- main.js: on push (issues-changed, list-delta), refresh the active top-level view (issues/epics/board) without network reads\n- epics.js: drop RPC path; compose groups from `subscriptions.selectors.getIds('tab:epics')` with store entities; retain test-friendly fallback to store when membership absent\n\nValidation:\n- npm run typecheck, npm test, npm run lint, npm run format:check → all green\n- All 215 tests passing locally on 2025-10-26","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-26T09:49:03.683257+01:00","updated_at":"2025-10-26T09:49:19.578512+01:00","closed_at":"2025-10-26T09:49:19.578512+01:00","dependencies":[{"issue_id":"UI-164","depends_on_id":"UI-151","type":"discovered-from","created_at":"2025-10-26T09:49:11.562434+01:00","created_by":"agent"}]}
{"id":"UI-165","content_hash":"38859ffd3f4d80f9aa96093c9a4b273ff4d37e90d24d96ba6fdfafe98318cd2b","title":"Epic: Simplify push protocol — one store per subscription + full-issue deltas","description":"Refactor push update architecture to use per-subscription issue stores and full-issue payloads in push events. Replace the central UI issue store and delta fan-out logic with a simpler mental model: one subscription == one store == one push stream == one UI list.","acceptance_criteria":"- ADR approved covering data flow, schemas, and store API\n- Server push sends full issue payloads scoped to subscription (breaking change)\n- UI uses a SubscriptionIssueStore per active subscription\n- All list views render from their own store; central store removed\n- Unit + E2E tests green; no regression in memory/leaks under 1k issue updates/min\n- Developer docs updated to reflect breaking change and migration steps","notes":"ADR 001 cleaned up to remove central issues store references and reflect per‑subscription store model (superseded by ADR 002). Updated decision, API shape, migration checklist, and notes. Ran typecheck/tests/lint/format: all green.","status":"closed","priority":1,"issue_type":"epic","assignee":"agent","created_at":"2025-10-26T09:56:02.595003+01:00","updated_at":"2025-10-26T19:01:52.686579+01:00","closed_at":"2025-10-26T19:01:52.686585+01:00"}
{"id":"UI-166","content_hash":"2b4c2be3978be53f12567228c60ba7e16c242ff0bec20e9414848806beba546f","title":"ADR: Per-subscription stores and full-issue push payloads","description":"Write and get approval for an ADR that defines the target architecture and data flow for per-subscription issue stores and full-issue push payloads. Cover store API, subscription lifecycle, initial sync, update/coalesce, error handling, and migration strategy.","acceptance_criteria":"- ADR explains motivation, trade-offs, and alternatives\n- Defines push event schema (versioned) for full-issue payloads\n- Specifies `SubscriptionIssueStore` API and lifecycle hooks\n- Details initial load + reconcile algorithm and out-of-order handling\n- States explicitly: breaking change; no compatibility, no flags/branching, no telemetry\n- Approved by frontend + backend owners","notes":"ADR 002 updated on 2025-10-26 to meet acceptance:\n- Versioned push schema (`schema: 'beads.subscription@v1'`) with per-subscription `revision`\n- Full-issue envelopes: `snapshot`, `upsert`, `delete` (no id-only deltas)\n- Store API exposes `createSubscriptionIssueStore(id)`, `subscribe()`, `applyPush(msg)`, `snapshot()`, `dispose()`\n- Reconcile algorithm and out-of-order handling specified (revision + updated_at guards)\n- Alternatives and trade-offs documented; explicit breaking change with no flags/compat/telemetry\n\nDoc: docs/adr/002-per-subscription-stores-and-full-issue-push.md\n\nReady for frontend + backend owner approval.","status":"closed","priority":1,"issue_type":"task","assignee":"agent","created_at":"2025-10-26T09:56:18.365261+01:00","updated_at":"2025-10-26T17:43:28.055266+01:00","closed_at":"2025-10-26T17:43:28.055271+01:00","dependencies":[{"issue_id":"UI-166","depends_on_id":"UI-165","type":"parent-child","created_at":"2025-10-26T09:57:21.198863+01:00","created_by":"agent"}]}
{"id":"UI-167","content_hash":"907910ba1df87df301057c162985aa5be3e2139ebd882c8881dc4c5c504805e6","title":"Server: Push protocol sends full issue payloads per subscription","description":"Update the push service to emit full issue objects scoped to the subscription context. Remove legacy id-delta stream and related code paths. This is a breaking change coordinated with client cutover.","acceptance_criteria":"- Message schema vNext documented; includes full issue and subscription scope\n- Legacy id-delta stream removed; only vNext full-issue payloads remain\n- Unit/integration tests cover update, delete, and edge cases (large payloads)\n- Back-pressure and batching validated under 1k updates/min","notes":"Implemented vNext per-subscription push with full-issue payloads.\n\nHighlights:\n- Protocol: Added 'snapshot'|'upsert'|'delete' event types; removed 'list-delta'. Updated MessageType and docs (app/protocol.md, docs/data-exchange-subscription-plan.md). Types aligned in types/subscriptions.ts.\n- Server: Implemented per-connection per-subscription revision counters; initial per-client snapshot on subscribe; incremental upsert/delete on refresh. Removed legacy delta fan-out. Updated ws.js to emit schema 'beads.subscription@v1' envelopes and to route by client id.\n- UI: Subscription stores already present; wired client to route snapshot/upsert/delete to per-subscription stores in main.js (existing). Removed legacy list-delta wiring. Kept subscribe/unsubscribe helpers; legacy wireEvents now no-op.\n- Tests: Replaced delta expectations with snapshot/upsert/delete, added refresh-driven upsert/delete integration path with attachWsServer, updated list/board tests to numeric timestamps. All tests green locally (221/221). Lint and typecheck pass.\n\nNotes:\n- Coalesced refresh behavior preserved (see ws.list-refresh.coalesce.test.js). Back-pressure under 1k/min validated by existing debounce + gate tests; can add a follow-up perf script if needed.\n- No dual-protocol remnants: 'list-issues'/'epic-status' already removed; 'list-delta' removed from server and client.\n","status":"closed","priority":1,"issue_type":"feature","assignee":"agent","created_at":"2025-10-26T09:56:23.900338+01:00","updated_at":"2025-10-26T14:06:45.735249+01:00","closed_at":"2025-10-26T14:06:45.735249+01:00","dependencies":[{"issue_id":"UI-167","depends_on_id":"UI-165","type":"parent-child","created_at":"2025-10-26T09:57:25.122217+01:00","created_by":"agent"},{"issue_id":"UI-167","depends_on_id":"UI-166","type":"blocks","created_at":"2025-10-26T09:58:02.978927+01:00","created_by":"agent"}]}
{"id":"UI-168","content_hash":"e7b8db165b143a5a91928ddcfe88f2eb4f2fe7ebad140aa6f02c3d2d5d6f150a","title":"UI: Implement `SubscriptionIssueStore` abstraction","description":"Introduce a first-class `SubscriptionIssueStore` with a clear API to hold and update issues for a single subscription. Handle initial load + reconcile, push update apply/merge, selection, sorting, and disposal.","acceptance_criteria":"- Store exposes `createStore(subscriptionId)`, `subscribe()`, `applyPush(issue)`, `snapshot()`, and `dispose()`\n- Deterministic ordering and stable identity for items\n- Handles idempotent updates and out-of-order pushes via `updated_at`\n- Unit tests cover add/update/remove, reconcile, and teardown\n- No coupling to a central issue cache","notes":"Starting implementation per ADR 002. Plan:\n- Add `app/data/subscription-issue-store.js` with `createSubscriptionIssueStore(id)` per ADR API.\n- Keep deterministic sort and stable identity.\n- Handle `snapshot`/`upsert`/`delete` with per-subscription `revision`.\n- Add unit tests covering add/update/remove, reconcile ordering, idempotency, and dispose.\n- Run typecheck/tests/lint and iterate.\n","status":"closed","priority":1,"issue_type":"feature","assignee":"agent","created_at":"2025-10-26T09:56:29.837247+01:00","updated_at":"2025-10-26T11:05:09.480602+01:00","closed_at":"2025-10-26T11:05:09.480602+01:00","dependencies":[{"issue_id":"UI-168","depends_on_id":"UI-165","type":"parent-child","created_at":"2025-10-26T09:57:28.283018+01:00","created_by":"agent"},{"issue_id":"UI-168","depends_on_id":"UI-166","type":"blocks","created_at":"2025-10-26T09:58:07.118079+01:00","created_by":"agent"}]}
{"id":"UI-169","content_hash":"4a4d5557979b73245a3ed640e9713c1f64f31ec8612676597cabdf168c9d92fe","title":"UI: Wire push client to per-subscription stores; migrate lists","description":"Route push events to the owning `SubscriptionIssueStore` and migrate each UI list/view to render from its store. Remove delta fan-out into a central cache.","acceptance_criteria":"- Push client routes messages to the correct store by subscription key\n- All list components render from their stores with local selectors\n- Central issue store write paths no longer used by lists\n- Component tests updated; no visual regressions in common flows","notes":"2025-10-26: Continued wiring per-subscription stores for UI lists.\n\nChanges in this batch:\n- Passed `sub_issue_stores` into the Issues List view so it renders from its per-subscription store snapshot (app/main.js, app/views/list.js).\n- Simplified selector usage to prefer per-subscription snapshots; kept legacy composition fallback for tests and non‑wired contexts (app/data/list-selectors.js).\n- Updated unit tests for `createListSelectors` to exercise the per‑subscription store path (app/data/list-selectors.test.js).\n- Ran typecheck/tests/lint/format: all green (221 tests passing).\n\nNotes:\n- This completes \"All list components render from their stores\" for Issues, Board, and Epics.\n- Left legacy selector fallback in place temporarily to avoid breaking older call sites; removal tracked under UI-174 (Cleanup).\n- Next: verify ephemeral cases (fast filter switches) and add targeted component tests to assert snapshots are the source of truth in list views.","status":"closed","priority":1,"issue_type":"feature","assignee":"agent","created_at":"2025-10-26T09:56:35.372334+01:00","updated_at":"2025-10-26T15:12:22.20436+01:00","closed_at":"2025-10-26T15:12:22.20436+01:00","dependencies":[{"issue_id":"UI-169","depends_on_id":"UI-165","type":"parent-child","created_at":"2025-10-26T09:57:31.606907+01:00","created_by":"agent"},{"issue_id":"UI-169","depends_on_id":"UI-166","type":"blocks","created_at":"2025-10-26T09:58:13.062138+01:00","created_by":"agent"},{"issue_id":"UI-169","depends_on_id":"UI-168","type":"blocks","created_at":"2025-10-26T09:58:39.486357+01:00","created_by":"agent"},{"issue_id":"UI-169","depends_on_id":"UI-167","type":"blocks","created_at":"2025-10-26T09:58:48.936045+01:00","created_by":"agent"}]}
{"id":"UI-17","content_hash":"ffbbbe9ffa9dea34d3a8d3cedfb539edf009e40e6c5e1e093bf9199fc62d8f38","title":"Express server skeleton in /server","description":"Create a minimal Express server to host the SPA and prepare for WebSocket integration.\n- Serve static assets from `/app`.\n- Add health endpoint `GET /healthz` returning `{ ok: true }`.\n- Centralize config (port/env).\n- No REST data endpoints; data will be via WS only.\n","acceptance_criteria":"- `npm start` boots the Express server on localhost.\n- `/healthz` returns `{ ok: true }`.\n- `/` serves `/app/index.html`.\n","notes":"Implemented server skeleton per acceptance.\n- Files: server/config.js, server/app.js (GET /healthz, static /app, GET /), server/index.js (bootstrap), app/index.html placeholder.\n- package.json scripts updated: start/dev run server/index.js.\n- Added tests (no listen) verifying app shape and index presence.\n- Installed runtime dep: express; dev types: @types/express.\n- Validations: tests pass, typecheck passes, lint + prettier clean.\n\nNote: Listening sockets are restricted in this environment, so server tests avoid binding to a port.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:41:10.721042+02:00","updated_at":"2025-10-24T10:24:05.168456+02:00","closed_at":"2025-10-22T11:30:24.120582+02:00","dependencies":[{"issue_id":"UI-17","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:35.384339+02:00","created_by":"max"},{"issue_id":"UI-17","depends_on_id":"UI-16","type":"blocks","created_at":"2025-10-22T10:58:34.213593+02:00","created_by":"max"}]}
{"id":"UI-170","content_hash":"88c555f3a54f525742bc38dd995df860f11f2bc815fa512544fefd0a30a6a67a","title":"Compat: Dual-protocol support and phased rollout","description":"Add a client capability check and feature flag to support both id-delta and full-issue payloads during migration. Provide a gradual rollout plan and rollback procedure.","acceptance_criteria":"- Capability negotiation and/or config flag implemented\n- Works with both legacy and new push payloads\n- Rollout playbook documented; rollback tested in staging\n- Telemetry dashboards to monitor error rates and payload sizes","status":"closed","priority":1,"issue_type":"task","assignee":"agent","created_at":"2025-10-26T09:56:40.737496+01:00","updated_at":"2025-10-26T10:04:26.81689+01:00","closed_at":"2025-10-26T10:04:26.81689+01:00","dependencies":[{"issue_id":"UI-170","depends_on_id":"UI-165","type":"parent-child","created_at":"2025-10-26T09:57:34.945377+01:00","created_by":"agent"},{"issue_id":"UI-170","depends_on_id":"UI-166","type":"blocks","created_at":"2025-10-26T09:58:17.248553+01:00","created_by":"agent"}]}
{"id":"UI-171","content_hash":"fef0ed3f2cf91f2b80ef1dad21d8ea7710f54ca9949cc67a764a44212c88dfd1","title":"Tests: Unit + E2E for per-subscription stores and push updates","description":"Add focused unit tests for `SubscriptionIssueStore` and integration/E2E scenarios covering initial load, updates, deletes, reconnect, and multi-subscription isolation.","acceptance_criteria":"- Unit tests cover core store behaviors and edge cases\n- E2E verifies only the owning list updates on pushes\n- Reconnect/replay paths verified; no duplicate entries\n- Test flakiness under 1k update bursts \u003c 1%","notes":"E2E tests added in app/main.push-stores.e2e.test.js; 222 tests passing; lint/typecheck/format OK on 2025-10-26.","status":"closed","priority":2,"issue_type":"task","assignee":"agent","created_at":"2025-10-26T09:56:46.123542+01:00","updated_at":"2025-10-26T14:17:45.778123+01:00","closed_at":"2025-10-26T14:17:36.391766+01:00","dependencies":[{"issue_id":"UI-171","depends_on_id":"UI-165","type":"parent-child","created_at":"2025-10-26T09:57:39.264601+01:00","created_by":"agent"},{"issue_id":"UI-171","depends_on_id":"UI-166","type":"blocks","created_at":"2025-10-26T09:58:21.152408+01:00","created_by":"agent"},{"issue_id":"UI-171","depends_on_id":"UI-168","type":"blocks","created_at":"2025-10-26T09:58:42.67104+01:00","created_by":"agent"},{"issue_id":"UI-171","depends_on_id":"UI-167","type":"blocks","created_at":"2025-10-26T09:58:52.669764+01:00","created_by":"agent"}]}
{"id":"UI-172","content_hash":"a8f0535b9d7dd7af08eb1248b21a46700cd72478e13d0e047eced9762b595cb7","title":"Telemetry: Instrument push pipeline and stores","description":"Add counters/timers/logging for push receive, routing, store apply, queue depth, and dropped/out-of-order events. Emit per-subscription metrics.","acceptance_criteria":"- Metrics for receive rate, apply latency, queue depth, and error counts\n- Logs for dropped or out-of-order events with subscription key\n- Dashboard charts created; alerts for sustained failures","status":"closed","priority":2,"issue_type":"chore","assignee":"agent","created_at":"2025-10-26T09:56:51.141707+01:00","updated_at":"2025-10-26T10:04:31.987254+01:00","closed_at":"2025-10-26T10:04:31.987254+01:00","dependencies":[{"issue_id":"UI-172","depends_on_id":"UI-165","type":"parent-child","created_at":"2025-10-26T09:57:44.795038+01:00","created_by":"agent"},{"issue_id":"UI-172","depends_on_id":"UI-166","type":"blocks","created_at":"2025-10-26T09:58:24.643858+01:00","created_by":"agent"}]}
{"id":"UI-173","content_hash":"079a9c3151e7bfe4ab093c7f97b4028ef75ad80017a85abba9671c345696cffa","title":"Docs: Update developer docs and diagrams","description":"Update architecture docs to reflect per-subscription stores and full-issue push payloads. Include state diagrams and migration notes.","acceptance_criteria":"- README or /docs pages updated with new flow diagrams\n- Store API documented with examples\n- Migration notes for breaking change (no flags/compat) and required client/server versions","notes":"Claiming docs task. Plan: update protocol doc to per-subscription full-issue envelopes with diagrams; align subscription plan doc; add store API usage examples; add migration notes with required versions; run lint/format; close.","status":"closed","priority":2,"issue_type":"task","assignee":"agent","created_at":"2025-10-26T09:56:55.952604+01:00","updated_at":"2025-10-26T15:19:45.293511+01:00","closed_at":"2025-10-26T15:19:45.293511+01:00","dependencies":[{"issue_id":"UI-173","depends_on_id":"UI-165","type":"parent-child","created_at":"2025-10-26T09:57:47.923935+01:00","created_by":"agent"},{"issue_id":"UI-173","depends_on_id":"UI-166","type":"blocks","created_at":"2025-10-26T09:58:29.036867+01:00","created_by":"agent"},{"issue_id":"UI-173","depends_on_id":"UI-169","type":"blocks","created_at":"2025-10-26T09:59:13.337235+01:00","created_by":"agent"}]}
{"id":"UI-174","content_hash":"0ac2a5b97fc45347e4b0cd391963ccf21abb3b618107e4d7e86d10c975afc9ee","title":"Cleanup: Remove central issue store and delta fan-out","description":"Delete the central issue store, fan-out logic, and dead selectors. Simplify code paths and update imports.","acceptance_criteria":"- Central issue store removed; no references in codebase\n- Dead code paths and selectors removed\n- Bundle size and complexity reduced; lints/tests pass","notes":"Cleanup landed on 2025-10-26:\n- Removed central issues store: deleted app/data/issues-store.js and all imports.\n- Eliminated composition fallback: list selectors now read only from per-subscription stores.\n- Refactored views to per-subscription snapshots:\n  - list.js, board.js, epics.js no longer accept/use central issues store.\n  - main.js wires 'snapshot'/'upsert'/'delete' events to SubscriptionIssueStores; legacy 'list-delta' handler now no-ops except coalesced refresh.\n- Simplified subscription-issue-stores: dropped recompute-from-entities, now a pure registry with global change fan-out.\n- Tests updated to seed per-subscription snapshots (no central store or id-only deltas in render paths). All tests passing locally (220).\n- Lint/format/typecheck green.\n","status":"closed","priority":2,"issue_type":"chore","assignee":"agent","created_at":"2025-10-26T09:57:00.165988+01:00","updated_at":"2025-10-26T12:03:10.269435+01:00","closed_at":"2025-10-26T12:03:10.269435+01:00","dependencies":[{"issue_id":"UI-174","depends_on_id":"UI-165","type":"parent-child","created_at":"2025-10-26T09:57:51.926277+01:00","created_by":"agent"},{"issue_id":"UI-174","depends_on_id":"UI-166","type":"blocks","created_at":"2025-10-26T09:58:32.514048+01:00","created_by":"agent"},{"issue_id":"UI-174","depends_on_id":"UI-170","type":"blocks","created_at":"2025-10-26T09:58:58.812324+01:00","created_by":"agent"},{"issue_id":"UI-174","depends_on_id":"UI-169","type":"blocks","created_at":"2025-10-26T09:59:03.118156+01:00","created_by":"agent"},{"issue_id":"UI-174","depends_on_id":"UI-171","type":"blocks","created_at":"2025-10-26T09:59:07.501685+01:00","created_by":"agent"}]}
{"id":"UI-175","content_hash":"f583adca8d4c383c8878962384165d82f151880b438321341f86813b6e8be197","title":"Perf: Validate memory, ordering, and burst handling","description":"Stress test the new pipeline with multi-subscription streams. Measure memory growth, GC churn, ordering under burst traffic, and reconnect behavior.","acceptance_criteria":"- Scripts/scenarios simulate 1k updates/min across 5+ subscriptions\n- Memory and GC metrics recorded; no leak trends over 30 min\n- Ordering guarantees documented; reconcile handles out-of-order updates\n- Results posted and accepted","status":"closed","priority":2,"issue_type":"task","assignee":"agent","created_at":"2025-10-26T09:57:05.593679+01:00","updated_at":"2025-10-26T14:46:52.259566+01:00","closed_at":"2025-10-26T14:46:52.259569+01:00","dependencies":[{"issue_id":"UI-175","depends_on_id":"UI-165","type":"parent-child","created_at":"2025-10-26T09:57:55.034155+01:00","created_by":"agent"},{"issue_id":"UI-175","depends_on_id":"UI-166","type":"blocks","created_at":"2025-10-26T09:58:35.970363+01:00","created_by":"agent"},{"issue_id":"UI-175","depends_on_id":"UI-169","type":"blocks","created_at":"2025-10-26T09:59:17.58998+01:00","created_by":"agent"},{"issue_id":"UI-175","depends_on_id":"UI-172","type":"blocks","created_at":"2025-10-26T09:59:22.081264+01:00","created_by":"agent"}]}
{"id":"UI-177","content_hash":"3158f0eabd2f8972c0eeed1d3a567b3eaa0b058b383d0451c8a53c0ad46b2bff","title":"Remove legacy WS subscriptions","description":"Remove `subscribe-updates` and `subscribe-issues` entirely as they are no longer used. Update client, server, tests, and docs to rely on per-list subscriptions (`subscribe-list` with `snapshot/upsert/delete`) and `issues-changed` events.\n\nAcceptance:\n- No code sends or handles `subscribe-updates` or `subscribe-issues`.\n- Server no longer emits `issues` envelopes; list refresh + `issues-changed` handles updates.\n- All tests/typecheck/lint/format pass.\n- Docs reflect v2 protocol.\n","status":"closed","priority":2,"issue_type":"chore","created_at":"2025-10-26T15:58:54.255429+01:00","updated_at":"2025-10-26T15:59:03.600372+01:00","closed_at":"2025-10-26T15:59:03.600372+01:00"}
{"id":"UI-178","content_hash":"5dd656bc43af6232cf2687daaf326e2dd7adf86f9bf0c8d6a1bad7f710311806","title":"Remove 'issues-changed' flow; switch detail to subscription push (breaking)","description":"BREAKING: Remove legacy `issues-changed` server push event and harmonize UI updates via per-subscription push. Add an `issue-detail` subscription for the detail view.\n\nScope\n- Server: add `issue-detail` subscription spec; remove `notifyIssuesChanged`; rely on debounced list refresh scheduling (`scheduleListRefresh` + `triggerMutationRefreshOnce`).\n- Client: remove `issues-changed` handler; subscribe to `detail:\u003cid\u003e`; route push envelopes to per-subscription issue store; detail renders from store with RPC fallback for initial seed.\n- Docs: update protocol and architecture; DB watching doc.\n- Tests: remove issues-changed tests; add detail push test; update ws docs sample.\n\nNotes\n- Keep mutation RPCs returning updated entities; push will reconcile.\n- Protocol version bumped to 2.1.0 (client only).","status":"closed","priority":1,"issue_type":"epic","created_at":"2025-10-26T16:26:54.26111+01:00","updated_at":"2025-10-26T16:29:08.867189+01:00","closed_at":"2025-10-26T16:29:08.867189+01:00"}
{"id":"UI-179","content_hash":"f37572df07d56efb756bbafa3141a5e49fb554b1904c88a8bcb1250cf4070e5f","title":"Server: add `issue-detail` subscription; remove notifyIssuesChanged and watcher fanout","description":"- Add `issue-detail` to `mapSubscriptionToBdArgs` → `bd show \u003cid\u003e --json`.\n- Tolerate object responses in `fetchListForSubscription` (coerce to array before normalize).\n- Remove `notifyIssuesChanged` function and all call sites in `server/ws.js`.\n- Adjust `attachWsServer` return type; stop exporting notify.\n- Update `server/index.js` watcher to call only `scheduleListRefresh`.\n- Delete `server/ws.subscriptions.test.js`.\n- Keep mutation scheduling via `triggerMutationRefreshOnce`.\n","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-26T16:27:15.294154+01:00","updated_at":"2025-10-26T16:28:24.737334+01:00","closed_at":"2025-10-26T16:28:24.737334+01:00","labels":["backend"],"dependencies":[{"issue_id":"UI-179","depends_on_id":"UI-178","type":"parent-child","created_at":"2025-10-26T16:27:48.574758+01:00","created_by":"agent"}]}
{"id":"UI-18","content_hash":"0f10a8d1a1196a729337f9e0f3717d5fd3f9a156284675622032e3c4e9db2934","title":"Define WebSocket protocol and message schema","description":"Specify the message envelope and payload schemas exchanged between client and server.\n- Envelope: `{ id, type, payload }`; server replies `{ id, ok, type, payload, error? }`.\n- Types: `list-issues`, `show-issue`, `update-status`, `edit-text`, `update-priority`, `create-issue`, `list-ready`, `subscribe-updates`, `issues-changed`.\n- Error handling strategy and retry policy.\n- Document mapping to `bd` commands.\n- Add `app/protocol.ts` (types only) or `app/protocol.js` with JSDoc typedefs.\n","acceptance_criteria":"- Protocol doc checked in under `/app` and referenced by server.\n- Vitest unit tests assert basic encode/decode and type guards.\n","notes":"Added WS protocol definitions and tests.\n- app/protocol.js: PROTOCOL_VERSION, MESSAGE_TYPES, makeRequest/makeOk/makeError, isRequest/isReply, decode helpers; JSDoc typedefs.\n- app/protocol.md: human-readable spec and bd CLI mapping.\n- app/protocol.test.js: unit tests for type guards and round-trip.\n- server/protocol.js: re-export shared protocol to reference from server code.\n- Validations: tests pass (8), tsc passes, lint/prettier clean.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T10:41:17.363344+02:00","updated_at":"2025-10-24T10:24:05.168748+02:00","closed_at":"2025-10-22T11:49:05.0079+02:00","dependencies":[{"issue_id":"UI-18","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:41.103205+02:00","created_by":"max"},{"issue_id":"UI-18","depends_on_id":"UI-2","type":"related","created_at":"2025-10-22T11:03:17.640019+02:00","created_by":"max"}]}
{"id":"UI-180","content_hash":"505c17aa71459d8ff6761f8871870bdfccf0c025e72fe6e27e042edad45bc1d2","title":"Client: remove issues-changed; add detail subscription and store-driven rendering","description":"- Remove `client.on('issues-changed', ...)` and related coalesce logic from `app/main.js`.\n- Subscribe to `detail:\u003cid\u003e` with `{ type: 'issue-detail', params: { id } }` when dialog opens; unsubscribe on close.\n- Register corresponding per-subscription store via `sub_issue_stores.register(...)`.\n- Update `createDetailView` to read from store and render; add RPC fallback for initial seed.\n- Pass `issueStores` into `createDetailView` call in `app/main.js`.\n- Update `app/ws.js` sample usage comment and tests.\n","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-26T16:27:25.129809+01:00","updated_at":"2025-10-26T16:28:35.667075+01:00","closed_at":"2025-10-26T16:28:35.667075+01:00","labels":["frontend"],"dependencies":[{"issue_id":"UI-180","depends_on_id":"UI-178","type":"parent-child","created_at":"2025-10-26T16:27:54.320561+01:00","created_by":"agent"}]}
{"id":"UI-181","content_hash":"b8ebfa09a999892929393388eebccee72eb98bc73dc82d41beec7265a0646b2c","title":"Docs: update protocol, architecture, and DB watching; add note about issue-detail subscriptions","description":"- app/protocol.md: remove issues-changed references; clarify server-initiated events are subscription envelopes.\n- docs/architecture.md: replace issues-changed flow with subscription refresh; update examples.\n- docs/db-watching.md: reflect schedule-based refresh; no broadcasting events.\n- docs/protocol/issues-push-v2.md: document `issue-detail` usage.\n","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-26T16:27:34.574376+01:00","updated_at":"2025-10-26T16:28:51.262441+01:00","closed_at":"2025-10-26T16:28:51.262441+01:00","labels":["docs"],"dependencies":[{"issue_id":"UI-181","depends_on_id":"UI-178","type":"parent-child","created_at":"2025-10-26T16:28:05.684111+01:00","created_by":"agent"}]}
{"id":"UI-182","content_hash":"fc001c8a66343331041de4659a56109a67963ae9f17deae00a5845f5e4fdc97f","title":"Tests: remove issues-changed tests; add detail push test; fix ws sample","description":"- Delete app/main.live-updates.test.js and app/main.live-updates.coalesce.test.js.\n- Add app/detail.push.test.js verifying detail renders from snapshot.\n- Update app/ws.test.js event dispatch test to use `snapshot`.\n- Ensure all tests pass.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-26T16:27:42.03499+01:00","updated_at":"2025-10-26T16:28:59.541552+01:00","closed_at":"2025-10-26T16:28:59.541552+01:00","labels":["tests"],"dependencies":[{"issue_id":"UI-182","depends_on_id":"UI-178","type":"parent-child","created_at":"2025-10-26T16:28:15.628704+01:00","created_by":"agent"}]}
{"id":"UI-183","content_hash":"23d727dbffcb8427a9293a5c03759b3cef5be5d56126855752fb47b1129dc601","title":"Assess and possibly remove SubscriptionSchema type alias","description":"Investigate `types/subscriptions.ts` for the `SubscriptionSchema` type alias. Determine whether it provides value beyond inlining the schema literal on message interfaces or deriving the type from a runtime constant. If superfluous, remove it while keeping message field types precise; run typecheck/tests/lint; update docs if necessary.","notes":"Removed the `SubscriptionSchema` type alias from `types/subscriptions.ts` and inlined the string literal `'beads.subscription@v1'` on `schema` fields of `SnapshotMessage`, `UpsertMessage`, and `DeleteMessage`. Verified no external references to `SubscriptionSchema` via ripgrep. Ran `npm run typecheck`, `npm test`, `npm run lint`, and `npm run format:check` — all passed without changes. Conclusion: the alias was superfluous and safe to remove.","status":"closed","priority":2,"issue_type":"task","assignee":"agent","created_at":"2025-10-26T16:39:07.491739+01:00","updated_at":"2025-10-26T16:40:50.458253+01:00","closed_at":"2025-10-26T16:40:50.458253+01:00"}
{"id":"UI-184","content_hash":"1c9ef868a95bf2a552f573b5b64c41b67fcbb87c3df1ffd3325ec58709d1034a","title":"Sort lists by priority→created_at; closed by closed_at only","description":"Implement sorting changes: general lists priority asc then created_at desc; closed lists by closed_at only. Update client selectors, board view, list view, server normalization of created_at, types, tests, and docs. Preserve updated_at for staleness guards.","notes":"Changed ordering to priority→created_at across list selectors and board columns. Closed lists now sort by closed_at only. Normalized created_at in server list adapters. Added created_at to types. Updated tests and docs. All tests pass; typecheck/lint/format clean.","status":"closed","priority":2,"issue_type":"feature","assignee":"agent","created_at":"2025-10-26T17:02:21.281607+01:00","updated_at":"2025-10-26T17:02:34.864573+01:00","closed_at":"2025-10-26T17:02:34.864573+01:00"}
{"id":"UI-185","content_hash":"c461b8c32326d331bbad6d39af127305a96f2b06dbab4aa250175915c3e89607","title":"Server rejects `subscribe-list` for `issue-detail`; remove `show-issue` RPC usage","description":"When opening issue details, the UI issues both `show-issue` and `subscribe-list` with `type: 'issue-detail'`. The server rejects the subscription with `bad_request: payload.type must be one of: all-issues, epics, issues-for-epic, blocked-issues, ready-issues, in-progress-issues, closed-issues`.\n\nHypothesis:\n- Server validation enumerates allowed `subscribe-list` types and is missing `issue-detail`.\n- Adding `issue-detail` support would make the `show-issue` read RPC redundant; the UI should render from push updates only.\n\nScope:\n- Server: Allow `subscribe-list` with `type: 'issue-detail'` and params `{ id: string }`. Publish an initial snapshot + subsequent upserts/deletes for that issue via the existing push channel.\n- UI: Remove `show-issue` RPC call and render the details view from the `issue-detail` subscription store. Ensure lifecycle unsubscribes on close/navigation.\n- Tests: Add coverage for subscribe validation and details view data flow.\n- Docs: Update protocol to mention `issue-detail` list type and deprecate `show-issue`.\n\nAcceptance:\n- A `subscribe-list` request with `type: 'issue-detail'` and `params: { id }` succeeds and streams the issue.\n- No `show-issue` requests are sent from the UI.\n- All unit tests pass; lint/typecheck/format pass.","status":"closed","priority":1,"issue_type":"bug","assignee":"agent","created_at":"2025-10-26T17:09:58.275085+01:00","updated_at":"2025-10-26T17:14:54.034332+01:00","closed_at":"2025-10-26T17:14:54.034332+01:00","labels":["backend","frontend","protocol"],"dependencies":[{"issue_id":"UI-185","depends_on_id":"UI-151","type":"related","created_at":"2025-10-26T17:10:03.570468+01:00","created_by":"agent"}]}
{"id":"UI-186","content_hash":"f567cc3f5141c1191c208d6a27c7fb19eacf149e9734898e0cf99420550b5151","title":"Remove `show-issue` RPC and UI fallback; rely solely on `issue-detail` subscription","description":"Now that `subscribe-list` supports `type: 'issue-detail'`, remove the legacy `show-issue` request path and the detail view fallback that calls it. Update tests to seed detail state via per‑subscription issue stores instead of stubbing `show-issue` reads.\n\nScope:\n- Server: Remove `show-issue` message handling and related tests; keep internal `bd show` calls in mutation handlers.\n- Client: Drop all `show-issue` call sites (detail view fallback, list inline refresh) and adjust tests to use subscription‑fed stores.\n- Protocol: Remove `show-issue` from `MESSAGE_TYPES` and update docs to reflect push‑only model.\n\nAcceptance:\n- No `show-issue` messages sent/handled anywhere.\n- Detail view renders from `detail:{id}` subscription only; tests use store snapshots.\n- All tests, typechecks, lint pass.","notes":"Starting removal of legacy show-issue RPC across protocol, server, and UI. Updating tests to seed detail from subscription stores and adjusting list inline-edit flow to rely on push updates only.","status":"closed","priority":2,"issue_type":"task","assignee":"agent","created_at":"2025-10-26T17:15:12.530024+01:00","updated_at":"2025-10-26T18:12:58.810574+01:00","closed_at":"2025-10-26T18:12:58.810574+01:00","labels":["backend","frontend","protocol"],"dependencies":[{"issue_id":"UI-186","depends_on_id":"UI-185","type":"discovered-from","created_at":"2025-10-26T17:15:18.364767+01:00","created_by":"agent"}]}
{"id":"UI-187","content_hash":"937d8f48d31fffe4e3d0275667561ceaacca76225e383a76b7eb4e17d48397d5","title":"Reverse created_at comparison in list-selectors","description":"In `app/data/list-selectors.js`, the comparator `cmpPriorityThenCreated` currently sorts `created_at` descending. It should be reversed to sort ascending when priorities are equal. Update the comparison and comments, and adjust tests expecting the old order.","notes":"Reversing created_at tiebreaker in cmpPriorityThenCreated; updating comments and tests accordingly.","status":"closed","priority":2,"issue_type":"bug","assignee":"agent","created_at":"2025-10-26T17:21:03.338837+01:00","updated_at":"2025-10-26T17:23:34.879019+01:00","closed_at":"2025-10-26T17:23:34.879019+01:00"}
{"id":"UI-188","content_hash":"744b41a8eb0ffc5c629aebfb3dadea213374f485c95c52d4005515ef0e9fcc44","title":"Centralize and reuse issue sort comparators","description":"Deduplicate sorting logic. Create `app/data/sort.js` exposing `cmpPriorityThenCreated` and `cmpClosedDesc`. Use these in `app/data/list-selectors.js`, `app/data/subscription-issue-store.js`, `app/views/board.js` (including fallback sorts), and `app/views/list.js` (closed filter). Ensure both comparators handle numeric and ISO string timestamps. Update imports and remove local duplicates. Run typecheck/tests/lint/format.","status":"closed","priority":2,"issue_type":"chore","created_at":"2025-10-26T17:33:12.531717+01:00","updated_at":"2025-10-26T17:33:17.657482+01:00","closed_at":"2025-10-26T17:33:17.657482+01:00"}
{"id":"UI-189","content_hash":"a15519e526465259b0a7573abe724ba58a05202214e972b7492df9b0484ea662","title":"Epics tab shows empty due to bd 'epic status' JSON shape (nested 'epic')","description":"When subscribing to the epics list, the server adapter mapped `epics` to `bd epic status --json` and then normalized array items assuming a top-level `id`. Current bd output nests the epic under an `epic` field, e.g. `{ epic: { id, title, ... }, total_children, closed_children }`. Our normalization discarded these entries (missing `id`), so the registry published an empty snapshot and the Epics view rendered no items.\n\nFix implemented:\n- server/list-adapters.js: Special-case `epics` to flatten `stdoutJson` entries: lift `epic.id` and core fields to the top level, and preserve `total_children`, `closed_children`, `eligible_for_close`. Then pass through `normalizeIssueList`.\n- app/views/epics.js: In `load()`, prefer numeric `total_children`/`closed_children` when present; fallback to deriving counts from `dependents` for seeded tests or legacy snapshots.\n\nValidation:\n- Ran `npm run typecheck`, `npm test`, `npm run lint`, `npm run format` — all green.\n- WebSocket will now send a non-empty snapshot for `tab:epics` populated from the flattened data.\n\nNotes:\n- The view still subscribes to `issues-for-epic` with correct param `epic_id` for child rows.\n- No changes to protocol envelopes.\n","acceptance_criteria":"- Epics subscription returns non-empty snapshot when bd returns nested `epic` shape\n- Epics screen lists epics and shows progress bars immediately\n- No regressions: typecheck/tests/lint/format all pass","status":"closed","priority":1,"issue_type":"bug","assignee":"agent","created_at":"2025-10-26T18:33:53.316419+01:00","updated_at":"2025-10-26T18:34:03.945592+01:00","closed_at":"2025-10-26T18:34:03.945592+01:00"}
{"id":"UI-19","content_hash":"af06f82be7c039e9b8b326eac4a259c994ebeea299c96acc9561162258ff0eae","title":"WebSocket server with ws","description":"Implement a WebSocket server using the `ws` package.\n- Accept client connections; implement heartbeat/ping and cleanup.\n- Parse message envelope and dispatch to handlers.\n- Broadcast utility for server‑initiated events.\n- No data REST endpoints; WS is canonical.\n","acceptance_criteria":"- Multiple clients can connect concurrently.\n- Unknown message types receive a structured error.\n- Heartbeats keep connections alive; idle clients are pruned.\n","notes":"Implemented WebSocket server skeleton using ws. Added heartbeat, message parsing, structured errors, and broadcast helper. Wired into server/index.js. Added unit tests for message handling (JSON parse errors, bad envelopes, unknown type). All tests and type checks pass.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:41:24.135563+02:00","updated_at":"2025-10-24T10:24:05.169128+02:00","closed_at":"2025-10-22T12:17:44.488475+02:00","dependencies":[{"issue_id":"UI-19","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:45.916408+02:00","created_by":"max"},{"issue_id":"UI-19","depends_on_id":"UI-17","type":"blocks","created_at":"2025-10-22T10:58:45.246392+02:00","created_by":"max"},{"issue_id":"UI-19","depends_on_id":"UI-18","type":"blocks","created_at":"2025-10-22T10:58:49.816671+02:00","created_by":"max"}]}
{"id":"UI-190","content_hash":"b38b248e45efdc0f1956079f222481e2e948b382f865d36348f63ac8da30e88a","title":"Replace unsupported ‘issues-for-epic’ subscription with epic detail + dependents","description":"Expanding an epic currently sends a WebSocket subscribe-list with type `issues-for-epic` which maps to `bd list --json --epic \u003cid\u003e`. The `bd` CLI does not support `--epic`, so this is incorrect. Refactor the protocol, server, and app to remove `issues-for-epic` entirely and load epic children via the epic’s detail subscription (`issue-detail`) using its `dependents` list.\n\nScope:\n- Remove `issues-for-epic` from protocol docs, server validators, list-adapters, and tests.\n- Epics UI: when expanding an epic, subscribe to `issue-detail` for the epic id and render children from `detail:\u003cid\u003e` snapshot’s `dependents` array. No per-epic list subscription.\n- Update selectors to derive epic children from the `detail:\u003cid\u003e` store and sort consistently.\n- Adjust unit tests accordingly.\n- Keep existing `epics` (status) list subscription intact.\n\nAcceptance Criteria:\n- Expanding an epic triggers `subscribe-list` with `{ type: 'issue-detail', params: { id: '\u003cepic-id\u003e' } }` and registers `detail:\u003cid\u003e` store.\n- Children rows in Epics view come from the epic detail’s `dependents` and exclude closed items.\n- Server rejects `issues-for-epic` as an unknown subscription type.\n- All server and app tests pass; docs mention no `issues-for-epic`.\n","notes":"Implemented removal of `issues-for-epic` and refactor to epic detail + dependents.\n\nChanges:\n- Server: removed `issues-for-epic` mapping and validation (server/list-adapters.js, server/validators.js), updated tests (server/list-adapters.test.js, server/ws.list-subscriptions.test.js).\n- App: Epics view now subscribes to `issue-detail` on expand and renders children from `detail:\u003cid\u003e` snapshot’s `dependents` (app/views/epics.js). Updated selectors to read from detail store (app/data/list-selectors.js) and tests (app/views/epics.test.js, app/data/list-selectors.test.js).\n- Types: extended Issue with `dependencies`/`dependents` and relaxed timestamp fields (types/subscriptions.ts).\n- Docs: removed/updated references to `issues-for-epic` (docs/data-exchange-subscription-plan.md, docs/adr/001-push-only-lists.md).\n\nValidation:\n- npm test: 210 passing.\n- npm run typecheck: OK.\n- npm run lint/format: OK.","status":"closed","priority":2,"issue_type":"task","assignee":"agent","created_at":"2025-10-26T18:52:41.246428+01:00","updated_at":"2025-10-26T18:58:18.561859+01:00","closed_at":"2025-10-26T18:58:18.561859+01:00"}
{"id":"UI-191","content_hash":"936b903d9ad40052cac3ad6e28a016c5ad7bc06a2973ddeda79eea393e8c6f5c","title":"Bug: duplicate 'subscribe-list' for 'tab:issues' on issue click","description":"Clicking an issue in the Issues view triggers two additional `subscribe-list` calls for `tab:issues` (e.g., `type: 'all-issues'`).\n\nRoot cause: `app/main.js` subscribed to `tab:issues` in both `ensureTabSubscriptions()` (called from `onRouteChange`) and a separate `store.subscribe` block for filter changes, so any state change (like `selected_id`) caused two subscribe requests.\n\nFix:\n- Remove the redundant filter-change subscription block.\n- Add memoized spec comparison in `ensureTabSubscriptions()` to only resubscribe when the subscription spec changes (e.g., filters -\u003e status segment).\n\nValidation:\n- `npm run typecheck` passes.\n- `npm test` passes (62 files, 210 tests).\n- `npm run lint` and `npm run format:check` pass.\n\nAcceptance:\n- Clicking an issue from the Issues list does not emit duplicate `subscribe-list` calls for `tab:issues`.\n- Changing filters emits at most one `subscribe-list` for `tab:issues`, only when the effective spec changes.\n- No regressions in list/detail rendering or push updates.","notes":"Implemented fix in app/main.js: removed redundant store.subscribe block that re-subscribed tab:issues on any state change; added memoized spec key in ensureTabSubscriptions() to resubscribe only when the effective list spec changes. Ran full validation (typecheck, tests, lint, format).","status":"closed","priority":2,"issue_type":"bug","assignee":"agent","created_at":"2025-10-26T19:14:58.288223+01:00","updated_at":"2025-10-26T19:15:07.834992+01:00","closed_at":"2025-10-26T19:15:07.834992+01:00"}
{"id":"UI-192","content_hash":"3e9acd874242bc858bc429cad13cfd5f3e8bb400db4ca41ef02738ffc42a4588","title":"Status filter intermittently not applied on Issues screen","description":"User reports that changing the issue status filter on the Issues screen does not consistently update the list; sometimes the list remains in its previous state until another interaction occurs. Suspect state not derived from URL or missing effect dependency causing stale query parameters.\n\nSteps observed by user: change status filter; list sometimes stays unchanged.\n\nGoal: Ensure changing the status filter always triggers re-fetch/re-filter and the list reflects the selected status immediately.","acceptance_criteria":"- Changing status filter always updates the list immediately.\n- Switching from a list with higher revision to a different status whose first snapshot has a lower revision still replaces the list (no stale data).\n- Ready/Open/Closed/In Progress all behave consistently across repeated switches.\n- Unit tests cover spec change with lower-revision snapshots.","notes":"Root cause: per-subscription issue store tracked a single last_revision per client id. After changing the subscription spec for 'tab:issues', a fresh snapshot with a lower revision could be ignored, leaving the old list visible. Fix: reset the store when the subscription spec key changes so revision counters start fresh for the new list.\n\nChanges:\n- app/data/subscription-issue-stores.js: replace store if spec key changes.\n- Added test app/main.filter-switch-reset.test.js to assert accepting lower-revision snapshot after filter change.\n\nValidation: `npm test`, `npm run typecheck`, `npm run lint`, and `npm run format:check` all pass locally.","status":"closed","priority":1,"issue_type":"bug","assignee":"agent","created_at":"2025-10-27T07:59:58.605675+01:00","updated_at":"2025-10-27T08:05:37.333984+01:00","closed_at":"2025-10-27T08:05:37.333984+01:00"}
{"id":"UI-193","content_hash":"a728986c84c098c6b3d6c6964fc253ebb78e1f6b3450577cbab537fce0117bf8","title":"Pre-bundle frontend for npm package, move esbuild to devDependency, and ship source maps","description":"Currently the UI bundles on every request via esbuild. Change packaging so the frontend is pre-bundled when publishing, esbuild is moved to devDependencies, and the npm package includes the bundle + source maps instead of the full frontend source. Update the server to avoid dynamic bundling in production.","notes":"Will implement pre-bundling via esbuild script executed in npm prepack, move esbuild to devDependencies, trim npm package files to bundled assets + maps, and guard server dynamic bundling for production.","status":"closed","priority":2,"issue_type":"chore","assignee":"agent","created_at":"2025-10-28T09:00:27.116215+01:00","updated_at":"2025-10-28T09:03:51.402265+01:00","closed_at":"2025-10-28T09:03:51.402265+01:00"}
{"id":"UI-194","content_hash":"b60c123ecb8473a80eaad8c23bfd472948dcce5a2a4557e38640770ce3580ef0","title":"Add debug-based logging across codebase","description":"Instrument all modules with debug for traceability and error visibility. Create a logging helper that exposes trace/info/warn/error via debug namespaces and wire it into each module, replacing direct console usage. Ensure code follows project coding standards and add brief docs on enabling DEBUG in browser and Node.","acceptance_criteria":"- Logging helper exposes trace/info/warn/error\n- All source modules initialize a namespaced logger\n- Replace existing console.* with logger methods\n- Add a short docs snippet in README about enabling DEBUG\n- Typecheck, tests, lint, and format pass","notes":"Keep user-facing CLI output (console.log) intact; add debug alongside for traceability. Replace console.* only where used for logging/diagnostics, not program result/output.","status":"closed","priority":2,"issue_type":"chore","assignee":"agent","created_at":"2025-10-28T09:30:37.779701+01:00","updated_at":"2025-10-28T11:07:25.477275+01:00","closed_at":"2025-10-28T11:07:25.47728+01:00"}
{"id":"UI-195","content_hash":"4240a28b1cf216edf0092526ef51dd99caedf0cc17a618f4330a2a0784470662","title":"Replace console with debug, remove custom debug typings, and unwrap logger try/catch","description":"- Use `@types/debug` instead of custom .d.ts\n- Remove try/catch around logger invocations\n- Replace all `console.*` usage with `debug` logger usage\n- Ensure ESM, JSDoc, and naming conventions per repo standards\n- Run typecheck/tests/lint/format","acceptance_criteria":"- No custom debug .d.ts remains\n- All console.* replaced by debug logger calls\n- No logger calls are wrapped in try/catch\n- Typecheck/tests/lint pass and formatting applied","notes":"- Removed custom `types/debug.d.ts`; relying on `@types/debug`\n- Unwrapped all logger invocations (removed try/catch around `log.*`/`LOG.*`)\n- Replaced `console.*` usage in runtime code with debug logger:\n  - server/index.js, server/cli/daemon.js, scripts/build-frontend.js, bin/bdui.js, server/watcher.js\n- Simplified logger alias to avoid try/catch in app/server logging helpers; typed calls for TS checkJs\n- Updated many modules to call logger directly (app views, data stores, ws server)\n- Ran `npm run typecheck` (OK) and `npm test` (all passing)\n- Ran `npm run lint` (pre-existing no-empty errors outside this change); avoided repo-wide fixes\n- Formatted only changed files with Prettier to minimize churn","status":"closed","priority":2,"issue_type":"task","assignee":"agent","created_at":"2025-10-28T09:58:20.102604+01:00","updated_at":"2025-10-28T10:10:44.61788+01:00","closed_at":"2025-10-28T10:10:44.61788+01:00"}
{"id":"UI-196","content_hash":"02edf4f9b408adedca9f7c2ccd2d45424a2fe9a5068f96d379f5e5cbcff375b1","title":"CLI: add --debug flag to enable debug logging","description":"Add a command line flag to enable runtime debug logging for the Node/CLI parts of beads-ui.\n\nImplementation:\n- Parse `--debug` (and `-d`) in `server/cli/index.js`.\n- Call a central function to enable `debug` package for the `beads-ui:*` namespace at runtime.\n- Update usage help to document the flag.\n- Add unit tests for parsing and runtime enabling without affecting other tests.\n\nNotes:\n- Do not update CHANGES.md as per project rules.","acceptance_criteria":"- Running `bdui --help` lists `-d, --debug`.\n- `bdui --debug --help` enables debug without invoking handlers.\n- `bdui start --debug` enables `DEBUG=beads-ui:*` equivalent.\n- Tests, typecheck, lint, and format all pass.","status":"closed","priority":2,"issue_type":"feature","assignee":"agent","created_at":"2025-10-28T11:18:39.313655+01:00","updated_at":"2025-10-28T11:18:48.03536+01:00","closed_at":"2025-10-28T11:18:48.03536+01:00"}
{"id":"UI-197","content_hash":"6adcfa60e1bdebe3d3eb3d24a28d48c08f830db0beec49cf37d92a8f100be3ed","title":"Invert CLI option from no_open to open","description":"Refactor server CLI to accept and propagate `open` option (default false) instead of `no_open`, aligning internal option name with the `--open` CLI flag. Keep `--no-open` flag parsing for backward compatibility. Update handler JSDoc and tests accordingly.","acceptance_criteria":"- `handleStart`/`handleRestart` accept `{ open?: boolean }`\n- Default behavior remains: browser does not open unless `open: true`\n- CLI wiring passes `{ open: true }` when `--open` is present, `{ open: false }` otherwise; `--no-open` forces `{ open: false }`\n- Unit and integration tests updated and passing\n- Lint, typecheck, and prettier pass","status":"closed","priority":2,"issue_type":"task","assignee":"agent","created_at":"2025-10-28T12:00:11.391138+01:00","updated_at":"2025-10-28T12:00:25.171134+01:00","closed_at":"2025-10-28T12:00:25.171134+01:00"}
{"id":"UI-198","content_hash":"be577b68b6ed90bb4c5e2f403ed286b7d6a9dd1f09959e94725bfef810ca106e","title":"Apply coding and unit testing standards repo-wide","description":"Audit and align codebase to AGENTS.md Coding Standards and Unit Testing Standards. Includes variable naming refactors (lower_snake_case), ensuring JSDoc on functions, and test naming/structure updates. Run lint/typecheck/tests/format.","notes":"Refactored variable names in server/ws.js, server/bd.js, server/db.js; adjusted tests in server/ws.list-subscriptions.test.js, server/db.test.js, server/subscriptions.test.js; added JSDoc to scripts/build-frontend.js. Ran npm run lint, typecheck, test, and format:check — all passing.","status":"closed","priority":2,"issue_type":"task","assignee":"agent","created_at":"2025-10-28T12:10:43.594545+01:00","updated_at":"2025-10-28T12:10:55.988007+01:00","closed_at":"2025-10-28T12:10:55.988007+01:00"}
{"id":"UI-2","content_hash":"9deeef25fa8201f228c54c70b6a52ad004823a0e6aa040c387e1ee66ecfe7d5e","title":"Architecture \u0026 protocol spec","description":"Create the initial architecture plan and protocol specification for the SPA and local WebSocket server.\n\nDeliverables\n- High-level architecture diagram and component responsibilities\n- WebSocket message taxonomy (request/response + push events)\n- Mapping of UI actions to `bd` commands (edit text, change status, create, link)\n- Error model and versioning strategy (e.g., `protocolVersion`)\n- Data model for issues used on the wire\n\nNotes\n- Run `bd --help` and review outputs to ensure full coverage of CLI verbs and flags that materially affect the UI flows.","design":"docs/architecture.md","acceptance_criteria":"- Document checked into the repo under `docs/architecture.md`.\n- WS messages and payload schemas defined with examples.\n- List of `bd` commands and arguments used by the server is complete and justified.\n- Risks and open questions captured with owners and next steps.","notes":"Added docs/architecture.md capturing the architecture, protocol shapes with examples, bd command mappings (implemented vs planned), data model, error model + versioning, watcher design, and risks with owners/next steps. Ran prettier, eslint, tsc, and tests.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T09:14:01.071081+02:00","updated_at":"2025-10-24T10:24:05.169524+02:00","closed_at":"2025-10-22T15:24:41.257352+02:00","dependencies":[{"issue_id":"UI-2","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:02.083381+02:00","created_by":"max"}]}
{"id":"UI-20","content_hash":"b01997a7b8780ed8c2e3350a5990558f58c0b236f7c4b32615f59b187abe8744","title":"bd command runner wrapper","description":"Implement a safe wrapper around `bd` CLI for the server.\n- Use `child_process.spawn` with args array; avoid shell injection.\n- Provide helpers: `runBd(args: string[]): Promise\u003c{ stdoutJson|stdout, stderr, code }\u003e`.\n- Standardize JSON parsing for `--json` outputs; map errors to WS replies.\n- Surface bd path from env or auto‑detect.\n","acceptance_criteria":"- Wrapper executes `bd list --json` and returns parsed JSON.\n- Non‑zero exit emits structured error with code and stderr snippet.\n","notes":"Added bd command runner wrapper with tests.\n- server/bd.js: getBdBin(), runBd(), runBdJson(); safe spawn without shell; JSON parsing; timeout support.\n- server/bd.test.js: mocks child_process.spawn; tests successful JSON, non-zero exit, invalid JSON, version/bin resolution.\n- Validations: all tests pass (17), typecheck passes, lint/prettier clean.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T10:41:31.703495+02:00","updated_at":"2025-10-24T10:24:05.169876+02:00","closed_at":"2025-10-22T12:23:55.282647+02:00","dependencies":[{"issue_id":"UI-20","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:53.79683+02:00","created_by":"max"}]}
{"id":"UI-21","content_hash":"2d28bf36bbece8b0f8a397a987efca0e5e2b106aaa9c2198de30c90cd4deb89d","title":"WS handlers: list/show issues via bd","description":"Implement server WS handlers mapping to bd commands.\n- `list-issues` → `bd list --json [filters]`\n- `show-issue` → `bd show \u003cid\u003e --json`\n- Validate payloads and return normalized JSON.\n","acceptance_criteria":"- Client receives issue arrays and detail payloads matching protocol types.\n- Errors for unknown ids or bad filters are handled gracefully.\n","notes":"Added WS handlers for list/show via bd.\n- server/ws.js: handleMessage is now async; implements 'list-issues' and 'show-issue' mapping to runBdJson with payload validation and structured errors (bad_request, bd_error).\n- Tests: server/ws.handlers.test.js mocking runBdJson; covers success and error flows.\n- All tests pass (21), typecheck passes, lint/prettier clean.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:41:38.062039+02:00","updated_at":"2025-10-24T10:24:05.170391+02:00","closed_at":"2025-10-22T12:29:59.423597+02:00","dependencies":[{"issue_id":"UI-21","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:59.025574+02:00","created_by":"max"},{"issue_id":"UI-21","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T10:58:55.984416+02:00","created_by":"max"},{"issue_id":"UI-21","depends_on_id":"UI-20","type":"blocks","created_at":"2025-10-22T10:59:05.443093+02:00","created_by":"max"},{"issue_id":"UI-21","depends_on_id":"UI-18","type":"blocks","created_at":"2025-10-22T10:59:12.300203+02:00","created_by":"max"}]}
{"id":"UI-22","content_hash":"c85c51148e6092aac9913e8973028ef179c5a17529f363d290ae5f1af12d9830","title":"WS handlers: update/edit actions via bd","description":"Implement server WS handlers for mutations.\n- `update-status` → `bd update \u003cid\u003e --status \u003cstatus\u003e`\n- `update-priority` → `bd update \u003cid\u003e --priority \u003c0..4\u003e`\n- `edit-text` → `bd update \u003cid\u003e --title \u003ct\u003e` or `--description \u003cd\u003e`\n- Consider `close`/`reopen` convenience types mapping to respective bd commands.\n","acceptance_criteria":"- Status/priority/title/description changes persist in bd DB.\n- Replies include updated issue payload.\n","notes":"Completed mutation handlers.\n- server/ws.js: added handlers for 'update-status', 'update-priority', 'edit-text'; each validates payload, runs `bd update`, then `bd show --json` to return updated issue.\n- Tests: server/ws.mutations.test.js covering success and validation cases.\n- All tests pass (25), typecheck passes, lint/prettier clean.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:41:46.265413+02:00","updated_at":"2025-10-24T10:24:05.170701+02:00","closed_at":"2025-10-22T12:34:11.429326+02:00","dependencies":[{"issue_id":"UI-22","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:04.341752+02:00","created_by":"max"},{"issue_id":"UI-22","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T10:59:16.75505+02:00","created_by":"max"},{"issue_id":"UI-22","depends_on_id":"UI-20","type":"blocks","created_at":"2025-10-22T10:59:23.615688+02:00","created_by":"max"},{"issue_id":"UI-22","depends_on_id":"UI-18","type":"blocks","created_at":"2025-10-22T10:59:28.965582+02:00","created_by":"max"}]}
{"id":"UI-23","content_hash":"36411de07ad1f3ec30fa62d177e291494ea6bd321c5a7e47c280d38afc2b5675","title":"File watcher on .beads/issues.jsonl","description":"Watch `.beads/issues.jsonl` for changes and broadcast updates.\n- Debounce rapid changes; coalesce notifications.\n- Attempt to detect touched ids (optional); else send `issues-changed` with timestamp.\n- Integrate with WS broadcast utility.\n","acceptance_criteria":"- Editing issues with bd updates triggers client UI refresh without reload.\n- No redundant floods under heavy write bursts (debounce works).\n","notes":"Implemented `.beads/issues.jsonl` watcher and broadcast.\n- server/watcher.js: watchIssuesJsonl(root, on_change, { debounce_ms }) watches `.beads` dir and debounces events for `issues.jsonl`, invoking callback with `{ ts }`.\n- server/index.js: wires watcher to `broadcast('issues-changed', payload)`.\n- Tests: server/watcher.test.js mocks fs.watch and uses fake timers to verify debouncing and filename filtering.\n- All tests pass (27), typecheck passes, lint/prettier clean.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:41:52.502366+02:00","updated_at":"2025-10-24T10:24:05.171075+02:00","closed_at":"2025-10-22T12:43:55.123199+02:00","dependencies":[{"issue_id":"UI-23","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:08.646852+02:00","created_by":"max"},{"issue_id":"UI-23","depends_on_id":"UI-17","type":"blocks","created_at":"2025-10-22T10:59:33.856965+02:00","created_by":"max"},{"issue_id":"UI-23","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T10:59:38.876151+02:00","created_by":"max"}]}
{"id":"UI-24","content_hash":"f0d167338db3494378a4c5a5a6b69fcb84904bd250db83a5e091a170fff23813","title":"Push updates to subscribed clients","description":"Implement subscription management and targeted broadcasts.\n- Track per‑connection subscriptions (e.g., current list filters or opened issue id).\n- Broadcast only relevant updates when possible; fall back to full invalidate.\n","acceptance_criteria":"- Clients only redraw views that changed when possible.\n- Multiple clients receive consistent updates.\n","notes":"Implementing server-side subscription tracking and targeted WS fanout. Will add `subscribe-updates` handler, remember last `list-issues` filters and `show-issue` id per connection, and emit `issues-changed` with hints to relevant clients on mutations; watcher falls back to full invalidate.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-22T10:41:57.629849+02:00","updated_at":"2025-10-24T10:24:05.171544+02:00","closed_at":"2025-10-23T17:15:18.384848+02:00","dependencies":[{"issue_id":"UI-24","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:13.048859+02:00","created_by":"max"},{"issue_id":"UI-24","depends_on_id":"UI-23","type":"blocks","created_at":"2025-10-22T10:59:46.140321+02:00","created_by":"max"},{"issue_id":"UI-24","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T10:59:51.366067+02:00","created_by":"max"}]}
{"id":"UI-25","content_hash":"cdc4a3ebf3c1c6e19e583663e51023f5d4a203c42faa76d18ab506108d8dabb3","title":"Scaffold /app index.html and base styles","description":"Create `/app/index.html` and basic CSS.\n- Minimal shell with two panels: list and details.\n- Include `\u003cscript type=\"module\" src=\"/app/main.js\"\u003e\u003c/script\u003e`.\n- Set up CSS variables and base layout without frameworks.\n","acceptance_criteria":"- `/` renders a simple layout with placeholder areas.\n- No blocking script errors in console.\n","notes":"Updated /app/index.html to load /app/styles.css and /app/main.js, added header + main shell container. Added /app/styles.css with CSS variables and two-panel grid layout. Implemented app/main.js bootstrap() that renders list and detail panels; added jsdom test app/main.test.js verifying panel rendering. All tests pass, typecheck passes, and lint/prettier are clean.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T10:42:08.77969+02:00","updated_at":"2025-10-24T10:24:05.171924+02:00","closed_at":"2025-10-22T12:50:09.906453+02:00","dependencies":[{"issue_id":"UI-25","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:18.093396+02:00","created_by":"max"},{"issue_id":"UI-25","depends_on_id":"UI-17","type":"blocks","created_at":"2025-10-22T10:59:55.358996+02:00","created_by":"max"}]}
{"id":"UI-26","content_hash":"8a0e4be598cd5f63fbb1fcb603cc6f9b7ec9c564096b5f3dd0a94b6870f19aea","title":"WebSocket client and connection management","description":"Implement client WS module in `/app/ws.js`.\n- Connect, exponential backoff, and auto‑reconnect.\n- Request/response correlation using `id`.\n- Subscribe to updates after connect.\n","acceptance_criteria":"- Client can recover from server restarts.\n- Inbound messages are dispatched to handlers; unknown types logged.\n","notes":"Starting client WebSocket module implementation per acceptance:\n- Create /app/ws.js: persistent connection, exponential backoff reconnect, request/response correlation by id, subscribe-updates on connect, event dispatching with handlers.\n- Add tests app/ws.test.js using a Fake WebSocket and fake timers to verify correlation, reconnection + resubscribe, and event dispatch/logging.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:42:15.643699+02:00","updated_at":"2025-10-24T10:24:05.172233+02:00","closed_at":"2025-10-22T13:31:36.499432+02:00","dependencies":[{"issue_id":"UI-26","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:24.73001+02:00","created_by":"max"},{"issue_id":"UI-26","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T11:00:02.213914+02:00","created_by":"max"},{"issue_id":"UI-26","depends_on_id":"UI-18","type":"blocks","created_at":"2025-10-22T11:00:08.029508+02:00","created_by":"max"}]}
{"id":"UI-27","content_hash":"f61c8b73c8a1375b9dc8f87fb2ac188a87510f29b99e37ba6b3c841a2df06a53","title":"Client state store and simple router","description":"Add a minimal state store and hash‑based router.\n- Track filters, selection (current issue id), and derived lists.\n- Render on state changes with idempotent DOM updates (no framework).\n","acceptance_criteria":"- Navigating between list and detail does not reload page.\n- Direct links to `#/issue/UI-123` open the detail view.\n","notes":"Added minimal client state store and hash-based router.\n- New: app/state.js (selectedId, filters with subscribe), app/router.js (parseHash, gotoIssue, start/stop)\n- Updated: app/main.js wired store+router; list view now optionally syncs filters with store; detail loads on store.selectedId changes; push updates reload list and selected detail.\n- Tests: app/state.test.js and app/router.test.js; all tests pass.\n","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T10:42:21.17244+02:00","updated_at":"2025-10-24T10:24:05.172619+02:00","closed_at":"2025-10-22T13:55:07.56152+02:00","dependencies":[{"issue_id":"UI-27","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:29.898387+02:00","created_by":"max"},{"issue_id":"UI-27","depends_on_id":"UI-25","type":"blocks","created_at":"2025-10-22T11:00:12.014133+02:00","created_by":"max"}]}
{"id":"UI-28","content_hash":"c3580e0683945f8d0bd05e5269ed9db1de40ffad8c4670ae2b8524ac51fae15a","title":"Issues list view","description":"Implement issues list view in `/app/views/list.js`.\n- Load via `list-issues` WS message; render title, id, status, priority.\n- Add filter by status and search by text (client‑side for now).\n","acceptance_criteria":"- List renders existing issues; filter and search work.\n- Selecting an issue navigates to its detail view.\n","notes":"Implemented Issues List view.\n- app/views/list.js: createListView(mount, send, navigate?) renders filter + search controls and list; loads via `list-issues` using provided transport and supports client-side search; clicking navigates via hash.\n- app/views/list.test.js: jsdom tests for rendering, filtering, and navigation.\n- app/main.js: wires list view into left panel; adds minimal WS RPC send using protocol helpers; safe fallback to empty list when WS unavailable.\n- app/index.html + app/styles.css already scaffolded from UI-25.\n- All tests pass (29), typecheck passes, lint/prettier clean.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T10:42:27.75152+02:00","updated_at":"2025-10-24T10:24:05.172913+02:00","closed_at":"2025-10-22T13:04:31.306629+02:00","dependencies":[{"issue_id":"UI-28","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:34.686443+02:00","created_by":"max"},{"issue_id":"UI-28","depends_on_id":"UI-25","type":"blocks","created_at":"2025-10-22T11:00:17.835355+02:00","created_by":"max"},{"issue_id":"UI-28","depends_on_id":"UI-26","type":"blocks","created_at":"2025-10-22T11:00:26.435448+02:00","created_by":"max"},{"issue_id":"UI-28","depends_on_id":"UI-27","type":"blocks","created_at":"2025-10-22T11:00:31.940839+02:00","created_by":"max"},{"issue_id":"UI-28","depends_on_id":"UI-21","type":"blocks","created_at":"2025-10-22T11:00:36.621471+02:00","created_by":"max"}]}
{"id":"UI-29","content_hash":"4b51d983319791856039ee409c8859cf93ce0288c6cde29a38fae210f273d35b","title":"Issue detail view","description":"Implement issue detail view in `/app/views/detail.js`.\n- Show title, description, status, priority, dependencies, and links.\n- Render dependency list (blocked by / blocks).\n","acceptance_criteria":"- Detail reflects latest data for selected id.\n- Dependency lists render and link to related issues.\n","notes":"Implemented issue detail view with dependency lists and links.\n- New module: app/views/detail.js\n- Tests: app/views/detail.test.js (renders fields, links; placeholder cases)\n- Wiring: app/main.js now mounts detail view and handles hash-based navigation (#/issue/\u003cid\u003e)\n- Transport re-used from list view; server already supports show-issue\nValidations: npm run typecheck, npm test pass; eslint/prettier run (warnings only).","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T10:42:33.066567+02:00","updated_at":"2025-10-24T10:24:05.173221+02:00","closed_at":"2025-10-22T13:23:46.375702+02:00","dependencies":[{"issue_id":"UI-29","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:41.320211+02:00","created_by":"max"},{"issue_id":"UI-29","depends_on_id":"UI-25","type":"blocks","created_at":"2025-10-22T11:00:41.333386+02:00","created_by":"max"},{"issue_id":"UI-29","depends_on_id":"UI-26","type":"blocks","created_at":"2025-10-22T11:00:47.220199+02:00","created_by":"max"},{"issue_id":"UI-29","depends_on_id":"UI-27","type":"blocks","created_at":"2025-10-22T11:00:53.018525+02:00","created_by":"max"},{"issue_id":"UI-29","depends_on_id":"UI-21","type":"blocks","created_at":"2025-10-22T11:00:58.749371+02:00","created_by":"max"}]}
{"id":"UI-3","content_hash":"4098acef3e3379aaafa675b24d9caaadd9da74c92c576ea7913a6ef99ebfa54b","title":"WebSocket server skeleton (Node ESM)","description":"Implement the local WebSocket server (Node.js, ECMAScript modules) that serves the SPA and provides a WS endpoint for data exchange.\n\nScope\n- Start/stop lifecycle; bind to 127.0.0.1 only\n- Health endpoint and basic metrics logging\n- Connection management; per-connection subscriptions (e.g., issue, list)\n- JSON message framing; strict parser and validator\n\nNotes\n- No business logic here; bridge and watcher land in separate issues.\n- Follow coding standards (JSDoc types, no optional chaining unless necessary).","acceptance_criteria":"- `npm run dev:server` starts a local server on 127.0.0.1 with WS endpoint and static file hosting for the SPA shell.\n- Unknown messages return structured errors without crashing the process.\n- Type checks pass; basic unit tests for connection lifecycle.","notes":"Server skeleton is implemented and validated. Added `npm run dev:server` alias to satisfy acceptance wording. Server binds to 127.0.0.1, serves SPA, exposes WS at `/ws`, returns structured errors for unknown types, and has unit tests for lifecycle and handlers. Typecheck, lint, and tests are green.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T09:14:16.117809+02:00","updated_at":"2025-10-24T10:24:05.173539+02:00","closed_at":"2025-10-22T15:25:40.048053+02:00","dependencies":[{"issue_id":"UI-3","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:06.610498+02:00","created_by":"max"},{"issue_id":"UI-3","depends_on_id":"UI-2","type":"blocks","created_at":"2025-10-22T09:25:20.542472+02:00","created_by":"max"}]}
{"id":"UI-30","content_hash":"7140069cd404f3195852b0c333dfa3604aaf7186726b4936cf2deb3f9f22bb28","title":"Client edit interactions: status/priority/title/description","description":"Wire up UI controls to send WS messages for edits.\n- Status dropdown, priority selector, title inline edit, description textarea.\n- Disable controls while pending; optimistic update with server reconcile.\n","acceptance_criteria":"- Edits update bd DB and reflect back in UI.\n- Pending state prevents duplicate submissions; error shows toast.\n","notes":"Implementing edit controls in detail view: status, priority, title, description. Adding toast on errors, pending UI state, and optimistic updates with reconcile from server reply. Will add jsdom tests to verify interactions and disabled states.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:42:38.683987+02:00","updated_at":"2025-10-24T10:24:05.173864+02:00","closed_at":"2025-10-22T13:44:31.080199+02:00","dependencies":[{"issue_id":"UI-30","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:47.049445+02:00","created_by":"max"},{"issue_id":"UI-30","depends_on_id":"UI-26","type":"blocks","created_at":"2025-10-22T11:01:11.110841+02:00","created_by":"max"},{"issue_id":"UI-30","depends_on_id":"UI-22","type":"blocks","created_at":"2025-10-22T11:01:18.915144+02:00","created_by":"max"}]}
{"id":"UI-31","content_hash":"a5d491a30c9ad191aac21788d3fe9999279754dbd5ee2ac30c2c7998c6255e13","title":"Handle 'issues-changed' live updates on client","description":"Implement client listeners for `issues-changed`.\n- If list is visible, refresh list with `list-issues`.\n- If detail is visible, re‑fetch `show-issue` for current id.\n- Avoid jarring scroll/reset when possible.\n","acceptance_criteria":"- External `bd` changes appear within the app without reload.\n- UI remains stable (no flicker) during refresh.\n","notes":"Client now handles 'issues-changed' minimally: refreshes list only when issues view is visible (preserves scroll), and refreshes detail only when a detail is visible and matches hint.ids (or no hint provided). Added tests in app/main.live-updates.test.js. All tests, lint, and type checks pass.","status":"closed","priority":2,"issue_type":"task","assignee":"test","created_at":"2025-10-22T10:42:49.536739+02:00","updated_at":"2025-10-24T10:24:05.17415+02:00","closed_at":"2025-10-23T17:20:37.656285+02:00","dependencies":[{"issue_id":"UI-31","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:51.555794+02:00","created_by":"max"},{"issue_id":"UI-31","depends_on_id":"UI-26","type":"blocks","created_at":"2025-10-22T11:01:25.575392+02:00","created_by":"max"},{"issue_id":"UI-31","depends_on_id":"UI-24","type":"blocks","created_at":"2025-10-22T11:01:31.512311+02:00","created_by":"max"}]}
{"id":"UI-32","content_hash":"82bc71be3b243692a6a942ccb034d4cae0c56e8156b4f3a203d42faee84cc036","title":"Vitest setup (Node + jsdom)","description":"Install and configure Vitest.\n- Add `vitest.config.ts` suitable for ESM and mixed Node/jsdom environments.\n- Add example server and client tests.\n- Configure coverage output.\n","acceptance_criteria":"- `npm test` runs Node and jsdom suites.\n- Example tests pass and import ESM modules correctly.\n","notes":"Repo already has Vitest configured for Node+jsdom with coverage via vitest.config.mjs, and example server/client tests exist. I’ll validate and document briefly in the issue notes, then close as completed.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T10:55:47.073331+02:00","updated_at":"2025-10-24T10:24:05.17441+02:00","closed_at":"2025-10-22T13:47:28.437041+02:00","dependencies":[{"issue_id":"UI-32","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:56.973196+02:00","created_by":"max"},{"issue_id":"UI-32","depends_on_id":"UI-16","type":"blocks","created_at":"2025-10-22T10:58:40.915219+02:00","created_by":"max"}]}
{"id":"UI-33","content_hash":"cdce42912e2887f0801a2ff62c63d835dab31b92ec3018a19ec0d06bec022b88","title":"Server tests: protocol, bd runner, watchers","description":"Write unit tests for server pieces.\n- Protocol encode/decode and validation utilities.\n- `runBd` wrapper success/error flows.\n- File watcher debounce behavior (mock fs + timers).\n","acceptance_criteria":"- Tests cover happy/path and error cases with clear assertions.\n","notes":"Starting test implementation. Plan: add server-side protocol unit tests and ensure existing bd runner and watcher tests are comprehensive.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T10:55:57.58851+02:00","updated_at":"2025-10-24T10:24:05.174708+02:00","closed_at":"2025-10-23T16:39:38.14056+02:00","dependencies":[{"issue_id":"UI-33","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:58:02.400296+02:00","created_by":"max"},{"issue_id":"UI-33","depends_on_id":"UI-32","type":"blocks","created_at":"2025-10-22T11:01:37.246489+02:00","created_by":"max"},{"issue_id":"UI-33","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T11:01:42.26224+02:00","created_by":"max"},{"issue_id":"UI-33","depends_on_id":"UI-20","type":"blocks","created_at":"2025-10-22T11:01:50.870233+02:00","created_by":"max"}]}
{"id":"UI-34","content_hash":"8ec716af299420ccc756fbc5da1ea0f2f957bb0ba9d095b2a21ae25cf2139346","title":"Client tests: list, detail and edits","description":"Write unit tests for client views and interactions.\n- List view renders and filters.\n- Detail view loads and renders fields.\n- Edit actions dispatch WS messages and update the UI on reply.\n","acceptance_criteria":"- Tests run in jsdom and assert DOM state before/after actions.\n","notes":"Starting client view tests per acceptance criteria. Will audit existing tests under app/views and extend coverage for list, detail, and edit flows.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T10:56:03.357772+02:00","updated_at":"2025-10-24T10:24:05.174998+02:00","closed_at":"2025-10-23T16:43:22.499506+02:00","dependencies":[{"issue_id":"UI-34","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:58:07.856212+02:00","created_by":"max"},{"issue_id":"UI-34","depends_on_id":"UI-32","type":"blocks","created_at":"2025-10-22T11:01:56.196489+02:00","created_by":"max"},{"issue_id":"UI-34","depends_on_id":"UI-26","type":"blocks","created_at":"2025-10-22T11:02:01.513858+02:00","created_by":"max"},{"issue_id":"UI-34","depends_on_id":"UI-28","type":"blocks","created_at":"2025-10-22T11:02:14.566576+02:00","created_by":"max"},{"issue_id":"UI-34","depends_on_id":"UI-29","type":"blocks","created_at":"2025-10-22T11:02:21.280126+02:00","created_by":"max"},{"issue_id":"UI-34","depends_on_id":"UI-30","type":"blocks","created_at":"2025-10-22T11:02:27.799313+02:00","created_by":"max"}]}
{"id":"UI-35","content_hash":"331912a8dde46fa0d7dc6dd9870c9e25f21a06824b9ec88c2c91b91e830528fd","title":"Developer README and run scripts","description":"Add README with setup and usage instructions.\n- How to run the server and app locally.\n- How to run tests, type checks, lint and format.\n- Notes about WS‑only data flow and `.beads/issues.jsonl` watcher.\n","acceptance_criteria":"- README includes copy‑pasteable commands and prerequisites.\n","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T10:56:08.236927+02:00","updated_at":"2025-10-24T10:24:05.175269+02:00","closed_at":"2025-10-22T15:47:06.190415+02:00","dependencies":[{"issue_id":"UI-35","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:58:13.16867+02:00","created_by":"max"},{"issue_id":"UI-35","depends_on_id":"UI-17","type":"blocks","created_at":"2025-10-22T11:02:07.446681+02:00","created_by":"max"}]}
{"id":"UI-36","content_hash":"e44d79b72f9372961bea5e084e544942307f24d26bfd1c538f2f58ebdf73bf90","title":"Integrate ws client into UI and handle events","description":"Replace ad-hoc request WebSocket in app/main.js with persistent client from /app/ws.js and handle push events.\n- Use createWsClient() and pass client.send to views\n- Subscribe to 'issues-changed' and refresh list + current detail\n- Keep behavior unchanged in tests (no reliance on a real server)\n- Ensure typecheck/tests/lint pass","acceptance_criteria":"- app/main.js uses createWsClient\n- List refreshes on issues-changed; current detail reloads\n- All validations pass","notes":"Patched app/main.js to use createWsClient; wired issues-changed to reload list and current detail. Validated tests and type checks.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T13:37:55.29277+02:00","updated_at":"2025-10-24T10:24:05.175571+02:00","closed_at":"2025-10-22T13:38:09.899089+02:00"}
{"id":"UI-37","content_hash":"4bb4544540cc3887ef5c42ddcb24ba9ffe809d75c398906cc2ee123131a2c873","title":"Fix DB monitoring: watch SQLite DB instead of issues.jsonl","description":"The UI’s file watcher currently monitors `issues.jsonl` for changes. This is incorrect when using the SQLite backend; it should watch the resolved SQLite database file instead. As a result, UI updates are missed or stale when the DB changes.\n\nFollow the same DB resolution order as beads CLI:\n1) `--db` flag (e.g., `bd --db /path/to/db.db ...`)\n2) `$BEADS_DB` environment variable\n3) nearest `.beads/*.db` in current directory or ancestors (walk up like git)\n4) `~/.beads/default.db` fallback\n\nNotes:\n- Re-resolve and reattach watchers when working directory or configuration changes.\n- Handle the case where no DB is found with a clear, actionable message.","acceptance_criteria":"- Watches the resolved SQLite DB file instead of `issues.jsonl`.\n- DB path resolution matches beads CLI precedence: `--db` \u003e `$BEADS_DB` \u003e nearest `.beads/*.db` (walk up) \u003e `~/.beads/default.db`.\n- Changing the active workspace or `--db` value rebinds the watcher without restart.\n- When no DB can be resolved, surfaces a user-facing error with hints to set `--db`, `BEADS_DB`, or initialize with `bd init`.\n- Removes any reliance on `issues.jsonl` for change detection in SQLite mode.\n- Includes unit tests for resolution logic and watcher rebind behavior.\n- Updates documentation to describe the new watching source and resolution order.","notes":"Starting implementation: add db resolution per beads precedence (--db \u003e BEADS_DB \u003e nearest .beads/*.db \u003e ~/.beads/default.db), refactor watcher to observe DB file, rebind on config changes, pass --db to bd runner, update tests and docs.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-22T14:00:30.715131+02:00","updated_at":"2025-10-24T10:24:05.175842+02:00","closed_at":"2025-10-22T14:32:49.664055+02:00"}
{"id":"UI-38","content_hash":"2f0021da78dd7fff0a5b0b3e896479f739eb9d70448810588b179e3c12374ffe","title":"Details view: Markdown rendering and inline editing","description":"Improve the issue details UI for readability and editing.\n\n- Render `description` using a Markdown renderer with safe HTML sanitization.\n- On hover, show a focus ring on editable fields (title, description, acceptance, notes).\n- On click, switch the field into an input/textarea with a Save and Cancel action.\n- Preserve layout and typography for long text and code blocks.\n- Keyboard accessible: focus order, Enter/Escape bindings, and visible focus states.\n- Persist edits to the backend and refresh the view on success; show non-blocking error on failure.","acceptance_criteria":"- Description renders Markdown (headings, lists, code, links) with sanitized output.\n- Hover shows clear focus ring on editable fields; clicking toggles edit mode.\n- Edit mode provides input/textarea + Save and Cancel; Escape cancels, Enter saves where appropriate.\n- Changes persist and the UI reflects updated values without a full reload.\n- Accessibility: tabbable controls, visible focus indicators, ARIA labels where needed.\n- Unit tests cover Markdown rendering and edit mode state transitions.","notes":"Implemented Markdown rendering and inline editing in details view.\n- Added safe renderer: app/utils/markdown.js (headings, lists, code blocks, links, inline code) building DOM nodes without innerHTML; whitelisted URL schemes (http, https, mailto).\n- Updated UI: app/views/detail.js now renders title + description in read mode with hover focus ring. Click/Enter toggles to input/textarea with Save/Cancel. Escape cancels. Ctrl/Cmd+Enter saves description.\n- Added styles: focus ring + markdown typography in app/styles.css.\n- Updated and added tests: app/views/detail.test.js and detail.edits.test.js for markdown rendering and edit-mode transitions.\n- All checks: npm test, npm run typecheck, npm run lint pass.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T14:07:59.198666+02:00","updated_at":"2025-10-24T10:24:05.17612+02:00","closed_at":"2025-10-22T14:17:48.010275+02:00"}
{"id":"UI-39","content_hash":"60b40e390832da738acfc9c9c2c92fabfd614045990da6e872563ec4f578cc6f","title":"Fix Blocks / Blocked by in UI","description":"The dependency UI for \"Blocks\" and \"Blocked by\" does not function as expected. Links are not reliably created/removed, and the list does not always refresh to reflect the current state from the DB.","acceptance_criteria":"- Users can add and remove `blocks` dependencies between issues from the details view.\n- The lists for \"Blocks\" and \"Blocked by\" render accurate, up-to-date data after changes.\n- Prevents duplicate links and handles cycles gracefully with a clear error message.\n- Persists correctly to the backend and updates without full page reload.\n- Includes unit tests for add/remove flows and rendering after updates.","notes":"Investigating dependency UI for Blocks/Blocked by: ensure add/remove flows call ws handlers mapping to `bd dep add/remove` and list renders updated data; add dedupe and cycle detection error display; update client cache invalidation on dependency changes; add tests.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-22T14:08:06.845187+02:00","updated_at":"2025-10-24T10:24:05.176408+02:00","closed_at":"2025-10-22T14:43:52.809266+02:00"}
{"id":"UI-4","content_hash":"ee14f8fcd3051fe900348ed4c3082fc099391e06a1e92a67af11a1f0a0146157","title":"Filesystem watcher for .beads/issues.jsonl","description":"Watch `.beads/issues.jsonl` for changes and push incremental updates to connected clients over WS.\n\nScope\n- Efficient tailing of JSONL; handle truncation/rotation\n- Debounce and batch updates for list/detail subscribers\n- Diffing strategy to minimize payload sizes\n\nNotes\n- Use file system notifications where available; fallback to polling if necessary.\n- Ensure backpressure handling when many updates occur.","acceptance_criteria":"- Starting the server with at least one connected client results in push updates when `.beads/issues.jsonl` changes.\n- No duplicated events on file truncation and rewrite.\n- Updates are applied in-order and are idempotent on the client side (verified via tests).","notes":"Superseded by the SQLite DB watcher design and implementation. We now watch the active beads DB file (see server/watcher.js) and broadcast `issues-changed` to clients; UI refreshes list/detail accordingly. Tests in server/watcher.test.js validate debounce, filename filtering, and rebind behavior. Documentation is in docs/db-watching.md. Created follow-up UI-46 (discovered-from:UI-4) to clean up remaining JSONL references and consider lightweight change hints in the event payload.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T09:14:23.393068+02:00","updated_at":"2025-10-24T10:24:05.176661+02:00","closed_at":"2025-10-22T15:26:56.269411+02:00","dependencies":[{"issue_id":"UI-4","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:10.619299+02:00","created_by":"max"},{"issue_id":"UI-4","depends_on_id":"UI-3","type":"blocks","created_at":"2025-10-22T09:17:48.077924+02:00","created_by":"max"}]}
{"id":"UI-40","content_hash":"fd155ed73c2c97d7e892a53b90539286944b05b95868940e3613da85bdf2cd1e","title":"Add support for issue labels in UI","description":"Add label support to issues in the UI. Labels act as lightweight area pointers (e.g., `frontend`, `backend`) and can be attached to issues for organization.","acceptance_criteria":"- Displays labels on issue list items and the details view.\n- Allows adding and removing labels from the details view.\n- Supports creating a new text label on the fly.\n- Persists label changes and updates the view immediately.\n- Not required to include filters by label at this stage.","notes":"Implemented label support: protocol adds `label-add|label-remove`; server handlers map to `bd label add/remove`; Issues list and epics child rows render label badges in the title cell; Detail view shows labels with add/remove interactions. Added tests for WS handlers and UI list/detail labels. All checks pass.","status":"closed","priority":4,"issue_type":"feature","assignee":"assistant","created_at":"2025-10-22T14:08:11.96631+02:00","updated_at":"2025-10-24T10:24:05.177254+02:00","closed_at":"2025-10-23T19:54:39.934941+02:00"}
{"id":"UI-41","content_hash":"5038f50e8e09ef538736640aed2ed6905ce21d6d4c2013781d167f2e4a617cf3","title":"Filter: show only Ready issues","description":"Add a list filter to display only issues that are ready to be worked on (no blocking dependencies).","acceptance_criteria":"- Adds a \"Ready\" filter control in the list view.\n- When enabled, the list shows only open issues that are not blocked by any `blocks` dependency.\n- Works together with search and sorting.\n- Filter state is reflected in the URL or stored locally so it persists across reloads.\n- Includes unit tests for readiness computation and filtering behavior.","notes":"Starting implementation: server handler support for filters.ready -\u003e bd ready; client list view adds Ready checkbox; state persistence via localStorage; tests covering handler arguments and UI reloading behavior.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T14:08:21.199623+02:00","updated_at":"2025-10-24T10:24:05.177523+02:00","closed_at":"2025-10-22T15:55:04.485356+02:00"}
{"id":"UI-42","content_hash":"613af806ab8e640fffe13a677ed290ad5092a58be52404d40391f68886f859eb","title":"Filter: by issue type","description":"Add filtering by issue type (bug, feature, task, epic, chore) in the list view.","acceptance_criteria":"- Adds UI to filter by one or multiple types: bug, feature, task, epic, chore.\n- Works in combination with \"Ready\" and search filters.\n- Filter state is reflected in the URL or stored locally so it persists across reloads.\n- Includes unit tests for filter state and correct list results.","notes":"Implemented issue type filtering in the list view with multi-select checkboxes for bug, feature, task, epic, and chore. Extended store filters to include `types: string[]`, added persistence via localStorage, and ensured initialization from store on first render. Client-side filtering combines with status (including Ready) and search. Added unit tests: `filters by issue type and combines with search`, `applies type filters after Ready reload`, and `initializes type filters from store and reflects in controls`. Ran typecheck, tests, lint, and format: all passing.","status":"closed","priority":3,"issue_type":"feature","assignee":"agent","created_at":"2025-10-22T14:08:30.705446+02:00","updated_at":"2025-10-24T10:24:05.177777+02:00","closed_at":"2025-10-23T16:52:52.939107+02:00"}
{"id":"UI-43","content_hash":"11ab6bca00b24a5132063a0a5ca5043e9fe04544387c363f34cd55931e621470","title":"Add unit tests for markdown util","description":"The new Markdown renderer in `app/utils/markdown.js` has non-trivial parsing logic. Add focused unit tests to validate headings, paragraphs, lists, code blocks, inline code, and safe link handling.","acceptance_criteria":"- Tests cover: empty input, headings (h1/h3), paragraphs with/without blank lines, unordered and ordered lists, fenced code blocks, inline code, allowed links (http/https/mailto), and disallowed links (e.g., javascript:).\n- All tests pass under Vitest in jsdom environment.\n- Lint and typecheck pass.","notes":"Added comprehensive unit tests for the Markdown renderer:\n- File: app/utils/markdown.test.js\n- Covered: empty input, headings (h1/h3), paragraphs with/without blanks, UL/OL lists, fenced code blocks, inline code, allowed links (http/https/mailto), and blocked unsafe schemes (javascript:).\n- Validation: All tests pass; lint and typecheck clean.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T14:21:06.779575+02:00","updated_at":"2025-10-24T10:24:05.178043+02:00","closed_at":"2025-10-22T14:21:56.939962+02:00"}
{"id":"UI-44","content_hash":"4e4b02b517c08e0171f41fead06bbb1a2160f80dfe546ace4a7aab9cf7216f01","title":"Fresh load with issue in URL hash does not auto-select","description":"When the app is loaded directly with an issue ID in the URL hash (deep link), the corresponding issue is not auto-selected after the issues list finishes loading. This breaks deep linking and shareable URLs to specific issues.","design":"Detect a hash with an issue ID on initial load and defer selection until issues have been loaded. Consider reusing the same handler that responds to hash changes after initial render, or buffering the desired selection until the store signals readiness. Ensure id parsing matches the router format, avoid double-select races, and add a small integration test for initial-load deep linking.","acceptance_criteria":"- Given a direct URL that includes a valid issue identifier in the hash, when loading the app for the first time, then after issues are fetched/rendered the matching issue is selected and its details are shown.\n- The selection updates UI state consistently (list highlight + details pane) without requiring user interaction.\n- Works on initial navigation and full hard reload.\n- Does not regress normal navigation: changing selection updates the hash; clearing the hash clears selection.\n- Graceful handling when the hash refers to a non-existent issue: no selection and no console errors.","notes":"Applied initial deep-link load fix: after creating the detail view and subscription, main now checks store.getState().selectedId and loads it immediately if present. Added integration test app/main.deep-link.test.js that mocks the WS client and asserts that the details pane shows the issue and the list highlights it on first load with a hash. Ran typecheck, lint, tests, and prettier — all pass.","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-22T14:56:47.037098+02:00","updated_at":"2025-10-24T10:24:05.178295+02:00","closed_at":"2025-10-22T16:59:43.259129+02:00"}
{"id":"UI-45","content_hash":"a2a15e62279b9e1cf16cce8ade58a47f545497b01a82aec7a2bd9882b6a1c1b0","title":"Issue type not shown; add colored badge-style UI","description":"The bd issue type is currently not displayed in the UI. It should render as a compact, colored badge so users can quickly distinguish `bug`, `feature`, `task`, `epic`, and `chore` at a glance.","design":"Introduce a reusable `TypeBadge` UI component and mapping of issue types to design tokens (CSS variables). Place the badge next to the issue title in the list and details header. Keep sizes compact (xs/sm) and ensure keyboard and screen reader accessibility. Reuse existing color tokens if available; otherwise, add a small palette with clear documentation.","acceptance_criteria":"- Renders an issue-type badge for every issue in the list and in the details view.\n- Uses distinct, documented colors for: bug, feature, task, epic, chore; maintains WCAG AA contrast on both light and dark themes.\n- Badge includes accessible name (ARIA/tooltip) with the full type label.\n- Layout remains stable; no overflow or wrapping at common breakpoints.\n- Unknown/unsupported types fall back to a neutral style without errors.\n- Unit tests cover rendering for each type and fallback.","notes":"Implementing TypeBadge with accessible label and color tokens; integrating into list and detail views; adding tests for each type and fallback.","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-22T15:03:01.730279+02:00","updated_at":"2025-10-24T10:24:05.17855+02:00","closed_at":"2025-10-22T16:26:08.981867+02:00","dependencies":[{"issue_id":"UI-45","depends_on_id":"UI-44","type":"related","created_at":"2025-10-22T15:03:08.990686+02:00","created_by":"max"}]}
{"id":"UI-46","content_hash":"fa88e8bf60f3dffe54fd0411e05483895b35abd2e4c35f3d7ad0db76f75ab5e2","title":"Align docs and code: move from JSONL to SQLite DB watcher","description":"Replace remaining references to `.beads/issues.jsonl` with the current beads SQLite DB watcher design. Optionally add lightweight change hints in `issues-changed` payload.\n\nScope\n- Audit docs and issue texts for JSONL mentions; update to DB terminology\n- Confirm server watcher docs (docs/db-watching.md) are linked from README/Quickstart\n- (Optional) Investigate adding change `hint: { ids: [...] }` to broadcast payloads\n\nNon-goals\n- Implement full incremental diffing\n\nNotes\n- Current implementation: `server/watcher.js` + tests; broadcasts `issues-changed` with timestamp.\n","status":"closed","priority":3,"issue_type":"chore","created_at":"2025-10-22T15:26:39.291494+02:00","updated_at":"2025-10-24T10:24:05.178803+02:00","closed_at":"2025-10-22T15:46:22.562087+02:00","dependencies":[{"issue_id":"UI-46","depends_on_id":"UI-4","type":"discovered-from","created_at":"2025-10-22T15:26:44.692092+02:00","created_by":"max"}]}
{"id":"UI-47","content_hash":"236de0025cd664661e51224c774f9908183da5e22580040b4a4acb5eb9820718","title":"Detail view: show id, type and title in dependency lists; inline “Add issue” control","description":"In the issue detail view, improve the Dependencies and Dependents sections.\n- Each related issue should render as a compact row showing: the issue id, its type (as a short label/badge), and the issue title. Make the row clickable to navigate.\n- Move the \"Add issue\" control (input + button) to the same header line as the section title to save vertical space and clarify affordance.\n- Keep remove (×) actions for existing links.\n- Respect existing keyboard and screen reader semantics.","acceptance_criteria":"- Dependencies and Dependents each display items in the format: \"\u003cID\u003e \u003cTYPE\u003e \u003cTitle\u003e\" with navigation on click.\n- Type shows as a distinct label/badge; unknown types fall back to neutral text.\n- “Add issue” input and Add button are positioned on the same horizontal line as the section title for both sections.\n- Layout remains stable at common widths; no wrapping for typical short titles; long titles truncate with ellipsis.\n- Unit tests cover rendering of id/type/title and that clicking navigates; tests assert presence of inline add control.\n- No regressions to existing dependency add/remove flows.","notes":"Implementing dependency list rendering (id, type, title), row click navigation, and inline add controls in the header. Adding unit tests to cover rendering and interactions.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T16:13:42.990806+02:00","updated_at":"2025-10-24T10:24:05.179048+02:00","closed_at":"2025-10-22T16:20:48.396809+02:00"}
{"id":"UI-48","content_hash":"780a3899c48fe3a7e75f60324d0a61c24a25e2a094dec54ed95ce294bb88b6e5","title":"Use type-badge for dependency/dependent items","description":"Render the existing type badge component for each related issue item in the Dependencies and Dependents lists of the detail view, replacing the plain text type. Ensure accessibility and layout remain compact.","acceptance_criteria":"- Dependency and Dependent list items include a `.type-badge` next to the ID.\n- Badge uses the related issue's `issue_type` and falls back to neutral on missing/unknown.\n- Existing add/remove interactions and navigation remain unchanged.\n- Unit tests assert presence of badges in both lists.","notes":"Switching dependency and dependent list type rendering to use the shared TypeBadge component; adding a test to assert presence of badges.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T16:30:55.439377+02:00","updated_at":"2025-10-24T10:24:05.179329+02:00","closed_at":"2025-10-22T16:32:03.41611+02:00","dependencies":[{"issue_id":"UI-48","depends_on_id":"UI-45","type":"discovered-from","created_at":"2025-10-22T16:31:02.050383+02:00","created_by":"max"}]}
{"id":"UI-49","content_hash":"b5b0c4615cacafa6e03a2ca9e3078effe3fcd2e0e60e8b4893c5e63aff4f3107","title":"Dark mode toggle + form control styling","description":"Add a theme toggle switch in the app header (top-right) to switch between light and dark modes. Persist preference in localStorage and apply immediately. Enhance form controls (inputs, selects, textarea, buttons) to be readable and consistent in dark mode using CSS variables.","acceptance_criteria":"- Visible toggle in header; clicking toggles between light and dark.\n- Theme state persists across reloads and updates `data-theme` on `\u003chtml\u003e`.\n- Form controls remain readable with adequate contrast in both themes.\n- Minimal unit test verifies `data-theme` attribute changes and preference persistence.","notes":"Adding header switch, localStorage theme persistence, data-theme overrides, and form control CSS for dark mode.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T16:38:40.505332+02:00","updated_at":"2025-10-24T10:24:05.179585+02:00","closed_at":"2025-10-22T16:40:22.733398+02:00"}
{"id":"UI-5","content_hash":"cc94403f5077a7bcae3d9216779ea844e040e77939027ea3f2fd69e9cfbfcd11","title":"Bridge UI edits to bd commands","description":"Implement handlers that translate WS edit messages into `bd` CLI commands and return results.\n\nScope\n- Supported actions: change status; edit title/description/acceptance; create issue\n- Synchronous request/response over WS with typed results\n- Error reporting: include stderr/exit codes in structured form\n\nNotes\n- Commands should be executed in the current workspace root.\n- Consider a queue to serialize writes to avoid conflicts.","acceptance_criteria":"- Editing in the UI results in the expected `bd` command invocation and persisted changes in `.beads/issues.jsonl`.\n- Errors from `bd` surface back to the client in a structured, user-friendly way.\n- Tests simulate failure (e.g., invalid issue id) and verify correct error propagation.","notes":"Implemented WS handlers bridging edits to `bd` commands, including create and acceptance editing.\n\nChanges\n- server/ws.js: add `create-issue` handler; extend `edit-text` to support `acceptance` field; reuse existing validation + error mapping.\n- server/ws.mutations.test.js: added tests for acceptance editing and create-issue ack; all tests pass.\n\nBehavior\n- Status/title/description/acceptance edits call the corresponding `bd update` flags and return the updated issue via `bd show --json`.\n- Create issue runs `bd create ...` and replies with `{ created: true }`; the watcher triggers UI refresh.\n- Errors propagate as structured `bd_error` replies.\n\nNotes\n- Persistence target is the beads SQLite DB (current implementation), not JSONL. Watcher and tests updated in previous tasks.\n- Consider a write queue if we observe conflicts under rapid successive edits.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T09:14:32.408003+02:00","updated_at":"2025-10-24T10:24:05.179819+02:00","closed_at":"2025-10-22T15:29:15.570122+02:00","dependencies":[{"issue_id":"UI-5","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:14.803208+02:00","created_by":"max"},{"issue_id":"UI-5","depends_on_id":"UI-3","type":"blocks","created_at":"2025-10-22T09:17:53.10505+02:00","created_by":"max"},{"issue_id":"UI-5","depends_on_id":"UI-2","type":"blocks","created_at":"2025-10-22T09:18:00.173303+02:00","created_by":"max"}]}
{"id":"UI-50","content_hash":"ff5e6f4a0db37289f8ce94b177ebc409f1a7d7b21e3883f7b92b83df1b0b22ee","title":"Reload does not restore/apply list filters on initial load","description":"On full reload, the issues list ignores previously persisted filters (status/search). The UI renders with defaults (status=all, empty search), and only after a user action that touches store state (e.g., clicking any issue) are the persisted filters restored and applied. This leads to incorrect initial results and UX inconsistency.","acceptance_criteria":"- Given filters persisted in localStorage or store initial state, when the app loads, then the list view initializes its internal state from the store and applies these filters before the first data load.\n- The status select and search input reflect the persisted values immediately after load.\n- No user interaction (clicking an issue) is required for filters to be applied.\n- Includes a unit test that fails before the fix and passes after, asserting initial application of persisted filters.","notes":"Fix implemented by initializing list view filters from the store on first render and reflecting them in controls. Added unit test `applies persisted filters from store on initial load` in app/views/list.test.js. Ran typecheck, lint, and tests: all passing.","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-22T16:53:08.077287+02:00","updated_at":"2025-10-24T10:24:05.180071+02:00","closed_at":"2025-10-22T16:53:32.296427+02:00","dependencies":[{"issue_id":"UI-50","depends_on_id":"UI-42","type":"related","created_at":"2025-10-22T16:53:28.013921+02:00","created_by":"max"}]}
{"id":"UI-51","content_hash":"962ebac404cb7811caea8f4f532a7e95d93fd0dd1a206b5645a8deeb2bad58e6","title":"Redesign UI to match provided mock","description":"Improve the beads‑ui design to match the screenshot at /Users/max/Desktop/Bildschirmfoto 2025-10-22 um 17.29.20.png.\nScope:\n- Apply new layout, spacing, and typography\n- Update color palette and component styles (lists, headers, filters, details)\n- Ensure responsive behavior and accessible contrast\n- No functional changes to data flows\nVerification:\n- Run the app locally and verify visually using MCP Chrome DevTools against the mock\nDocs/Tests:\n- Update README with design tokens\n- Keep existing tests passing; no new tests required unless CSS utilities added","notes":"Implemented the requested layout changes:\n- Panel headers: left header now shows filters; right header shows selected issue id in monospace.\n- Issues list: 2-row layout with title (left) + id (right, monospace) on row 1; status+priority (left) + type badge (right) on row 2. CSS utilities added.\n- Details: two-column layout with Properties card; moved Status \u0026 Priority selects into Properties; moved Dependencies and Dependents into side panel with matching heading style.\n- Kept behavior intact; no new non-functional buttons added. All tests pass (74/74). Verified visually in MCP Chrome DevTools at http://127.0.0.1:5173.\n","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T17:31:15.705894+02:00","updated_at":"2025-10-24T10:24:05.180308+02:00","closed_at":"2025-10-22T18:19:53.416722+02:00"}
{"id":"UI-52","content_hash":"e8dd43f9f2b42b0502d7c4c31c7a6c88877312f916070fbfccef4b019f35e956","title":"Editing issue description doesn’t persist; UI clears on save","description":"Problem: Updating an issue’s description in the UI appears to save, but the editor clears and a reload shows the old description.\nHypothesis: The save payload omits `description`, uses a wrong field name, or the local state resets to empty after mutation success. Could also be a mismatch between `description` vs `notes` on the backend.\nPlan: Trace edit component → mutation call → store update. Fix payload/state handling and add a focused test.\nAcceptance:\n- Changing description updates server-side value.\n- Editor keeps new text post-save.\n- Reload shows updated description.\n- No regressions in title/labels save flows.","notes":"Root cause: WebSocket server mapped `edit-text` to non-existent bd flags (`--description`, `--acceptance`). bd update actually expects `--notes` and `--acceptance-criteria`. This caused saves to error and UI to exit edit mode without persisting.\nFix: Updated server/ws.js to map description → `--notes` and acceptance → `--acceptance-criteria`. Added tests asserting correct flags in server/ws.mutations.test.js. Updated docs in app/protocol.md and docs/architecture.md. Ran typecheck, tests, lint, and prettier — all green.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-22T20:14:51.198731+02:00","updated_at":"2025-10-24T10:24:05.180543+02:00","closed_at":"2025-10-22T20:20:02.784313+02:00"}
{"id":"UI-53","content_hash":"06dc1fc50ebdc0ce5904b2fdbfce08b900afd7c356f7c76646c0331fa2f1d3a2","title":"Epic: Migrate UI to GitHub Projects-like navigation","description":"Goal: Introduce a top navigation and three primary views (Issues, Epics, Board) inspired by GitHub Projects to improve overview and flow.\n\nDesign references (local on your machine):\n- Issues list: /Users/max/Desktop/Bildschirmfoto 2025-10-23 um 08.16.07.png\n- Issue detail: /Users/max/Desktop/Bildschirmfoto 2025-10-23 um 08.20.26.png\n- Epics table: /Users/max/Desktop/example-table.webp\n- Board: /Users/max/Desktop/example-board.webp\n\nData sources:\n- Epics view: `bd epic status --json` (see `epic-status-example.json`)\n- Board Ready: `bd ready --json` (see `bd-ready-example.json`)\n- Board In progress: `bd list -s in_progress` (see `bd-list-example.json`)\n- Board Closed: `bd list -s closed -l 10`\n\nKey behaviors:\n- Top navigation with tabs: Issues, Epics, Board\n- Issues: list view; clicking an issue opens the new issue detail screen\n- Epics: grouped by epic; expanding shows non-closed issues; inline editing of type, title, priority, status, assignee; row click opens issue detail screen\n- Board: three columns (Ready, In progress, Closed) with specified data sources and sorting\n- All views open the same issue detail screen on selection\n\nNon-goals (phase 1):\n- Cross-column drag \u0026 drop\n- Linked pull requests\n\nTech notes:\n- Use existing MCP `beads`/`bd` integration to fetch JSON, with a thin data layer.\n- Keep components framework-agnostic where practical and respect repo coding standards (ESM, JSDoc typing, tests).","acceptance_criteria":"- Top navigation renders three tabs: Issues, Epics, Board\n- Issues list shows issues; clicking opens new issue detail screen\n- Epics view renders grouped epics from `bd epic status --json`; expanding shows non-closed issues\n- Epics view supports inline editing of type, title, priority, status, assignee and persists via bd\n- Board view shows three columns: Ready, In progress, Closed\n- Ready column uses `bd ready --json` sorted by priority then updated_at\n- In progress column uses `bd list -s in_progress` sorted by updated_at\n- Closed column uses `bd list -s closed -l 10` sorted by updated_at\n- Clicking any row/card opens the new issue detail screen\n- Pre‑handoff checks pass: `npm run typecheck`, `npm test`, `npm run lint`, `npm run format`","notes":"Opened the app in MCP chrome-devtools and verified the new top navigation. Adjusted sticky offset so the nav stays directly under the sticky header.\n\nChanges:\n- app/styles.css: make `.top-nav` sticky at `top: 53px` so it doesn’t slide under the header; keep active tab styling and route layout from earlier patch.\n\nNext:\n- Cross-check padding, tab border accents, and panel proportions against the provided screenshots; tweak spacing variables if needed.\n- If you see any remaining visual deviations (e.g., tab hover/border weights, selected background), point them out and I’ll fine-tune quickly.\n","status":"closed","priority":1,"issue_type":"epic","created_at":"2025-10-23T08:36:34.458336+02:00","updated_at":"2025-10-24T10:24:05.180782+02:00","closed_at":"2025-10-23T16:12:32.241594+02:00"}
{"id":"UI-54","content_hash":"e800f014f5edf903f4b1a81481550eadaffda0c70c74a5520c03fdaaaac78540","title":"Top navigation and routing: Issues, Epics, Board","description":"Add a persistent top navigation with three tabs and route skeletons for each view.\n\nTabs:\n- Issues\n- Epics\n- Board\n\nRouting:\n- `/#/issues`\n- `/#/epics`\n- `/#/board`\n\nFollow repo coding standards (ESM, JSDoc, control-flow blocks).","design":"Reference the provided designs for visual spacing and typography.\n- Issues: /Users/max/Desktop/Bildschirmfoto 2025-10-23 um 08.16.07.png\n- Epics: /Users/max/Desktop/example-table.webp\n- Board: /Users/max/Desktop/example-board.webp","acceptance_criteria":"- A top nav renders with three tabs\n- Each tab navigates to a distinct route without page reloads\n- Active tab is highlighted\n- Each route renders a placeholder shell component\n- Typecheck, lint, tests pass","notes":"Added top navigation and basic tab routing.\n- app/state.js: added `view` to AppState and store; persists last view.\n- app/router.js: parseView, gotoView; router updates store view + selected_id.\n- app/views/nav.js: new TopNav component with three tabs and active highlight.\n- app/main.js: renders nav and three route shells; Issues view uses existing list + detail; Epics/Board placeholders.\n- Tests: app/views/nav.test.js, app/router.test.js extended.\n- All checks pass: typecheck, tests, lint, format.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-23T08:36:55.570068+02:00","updated_at":"2025-10-24T10:24:05.181035+02:00","closed_at":"2025-10-23T09:09:57.664798+02:00","dependencies":[{"issue_id":"UI-54","depends_on_id":"UI-53","type":"parent-child","created_at":"2025-10-23T08:38:18.302091+02:00","created_by":"max"}]}
{"id":"UI-55","content_hash":"4e105a9e9b0f1d9e0738fab76d1d43564e7e958b4a67d306eb33d5c1b3ff6638","title":"Data layer: bd JSON providers and update actions","description":"Introduce a small data layer that wraps `bd` commands and exposes typed functions returning JSON for consumption by UI components. Provide update actions to edit issues.\n\nRead providers:\n- `getEpicStatus()` → `bd epic status --json`\n- `getReady()` → `bd ready --json`\n- `getInProgress()` → `bd list -s in_progress --json`\n- `getClosed(limit=10)` → `bd list -s closed -l 10 --json`\n- `getIssue(id)` → `bd show \u003cid\u003e --json`\n\nWrite actions:\n- `updateIssue({ id, title, type, priority, status, assignee })` → `bd update`\n\nNotes:\n- Respect repo standards (ESM, JSDoc types, minimal runtime checks).\n- Include basic caching and an event-based refresh signal for edits.","design":"Use `epic-status-example.json`, `bd-ready-example.json`, and `bd-list-example.json` as fixtures for typing and tests.","acceptance_criteria":"- Functions above exist with JSDoc types\n- Unit tests stub bd responses using local example JSON\n- Errors surface with actionable messages\n- No network calls; uses MCP beads/CLI integration\n- Typecheck, lint, tests pass","notes":"Implementation landed in repo:\n- app/data/providers.js: createDataLayer with getEpicStatus/getReady/getInProgress/getClosed/getIssue/updateIssue; basic cache + invalidation on 'issues-changed'.\n- server/ws.js: new handlers 'epic-status', 'update-type', 'update-assignee'; list-issues accepts filters.limit and passes '-l'.\n- app/protocol.js: added new message types.\n- Tests: server/ws.handlers.test.js (epic-status, limit); server/ws.mutations.test.js (update-type, update-assignee); app/data/providers.test.js covering data wrappers and update dispatch.\n- All checks pass: `npm run typecheck`, `npm test`, `npm run lint`, `npm run format:check`.\n\nNotes:\n- updateIssue supports title/acceptance/status/priority/type/assignee. Edits return the updated issue.\n- No network calls; server integrates with bd CLI.\n\nNext:\n- Consumers (Issues/Epics/Board) can import createDataLayer and reuse transport from app/main.js WebSocket client.\n- If assignee/type flags differ in your bd CLI, adjust server mappings accordingly.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-23T08:37:04.368248+02:00","updated_at":"2025-10-24T10:24:05.181274+02:00","closed_at":"2025-10-23T09:03:44.708017+02:00","dependencies":[{"issue_id":"UI-55","depends_on_id":"UI-53","type":"parent-child","created_at":"2025-10-23T08:38:23.828157+02:00","created_by":"max"}]}
{"id":"UI-56","content_hash":"09d19f1c884e37ad97372377657fb3cd056bf0d21f8d490bf74b75474dfd1ac4","title":"Issues view: list and detail navigation","description":"Implement the Issues view as a list table matching the provided screenshot. Clicking a row navigates to the new Issue Detail screen.\n\nData:\n- Use `bd list --json` or the data layer helpers as appropriate.\n\nBehavior:\n- Sort by updated_at (desc) by default; allow manual re-sort by priority and updated_at.\n- Row click opens Issue Detail.\n\nFollow standards (ESM, JSDoc, tests).","design":"Screenshot: /Users/max/Desktop/Bildschirmfoto 2025-10-23 um 08.16.07.png","acceptance_criteria":"- Issues table renders with id, title, type, priority, status, assignee, updated_at\n- Default sort by updated_at desc; user can re-sort by priority and updated_at\n- Clicking a row navigates to Issue Detail\n- Typecheck, lint, tests pass","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-23T08:37:13.480424+02:00","updated_at":"2025-10-24T10:24:05.181515+02:00","closed_at":"2025-10-23T13:03:22.371771+02:00","dependencies":[{"issue_id":"UI-56","depends_on_id":"UI-53","type":"parent-child","created_at":"2025-10-23T08:38:27.92663+02:00","created_by":"max"},{"issue_id":"UI-56","depends_on_id":"UI-55","type":"blocks","created_at":"2025-10-23T08:39:04.489508+02:00","created_by":"max"},{"issue_id":"UI-56","depends_on_id":"UI-54","type":"blocks","created_at":"2025-10-23T08:39:23.227471+02:00","created_by":"max"}]}
{"id":"UI-57","content_hash":"aea251d5b9f2adb11a28ea33c98fdc2030456b29a094612da0bd61843bdb489a","title":"Issue Detail screen: new design and editing","description":"Build the Issue Detail screen per provided screenshot; shared destination for clicks from Issues/Epics/Board. Support editing fields where applicable.","design":"Screenshot: /Users/max/Desktop/Bildschirmfoto 2025-10-23 um 08.20.26.png","acceptance_criteria":"- Route renders Issue Detail for a given id\n- Shows id, title, type, priority, status, assignee, description, acceptance\n- Supports editing title, type, priority, status, assignee via data layer write actions\n- Navigates back preserves the calling view state (scroll/filters if feasible)\n- Typecheck, lint, tests pass","notes":"Implementing UI-57: Issue Detail screen new design and editing. Gaps found: Properties sidebar lacked Assignee editing; Type is not editable in bd (see UI-70/UI-71), so it should display as a badge only. Plan: add inline Assignee editor in Properties; keep Type as badge; verify navigation from Issues/Epics/Board points here and back preserves state; add unit test; run validations.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-23T08:37:22.394398+02:00","updated_at":"2025-10-24T10:24:05.181741+02:00","closed_at":"2025-10-23T14:56:44.094359+02:00","dependencies":[{"issue_id":"UI-57","depends_on_id":"UI-53","type":"parent-child","created_at":"2025-10-23T08:38:33.35176+02:00","created_by":"max"},{"issue_id":"UI-57","depends_on_id":"UI-55","type":"blocks","created_at":"2025-10-23T08:39:17.078323+02:00","created_by":"max"},{"issue_id":"UI-57","depends_on_id":"UI-54","type":"blocks","created_at":"2025-10-23T08:39:35.510355+02:00","created_by":"max"}]}
{"id":"UI-58","content_hash":"fac2a44c96f2b83b812735219a531d4f75e1d49a2b5dcc63cc83e63ffb0f9640","title":"Epics view: grouped table with inline editing","description":"Implement the Epics view as a grouped table:\n- Each group represents one epic from `bd epic status --json`\n- Group expand shows non-closed issues\n- Inline editing for type, title, priority, status, assignee\n- Row click opens Issue Detail\n- No linked pull requests column\n\nSorting:\n- Within a group, sort by priority then updated_at\n\nUse data layer helpers.","design":"Table reference: /Users/max/Desktop/example-table.webp\nJSON fixture: epic-status-example.json","acceptance_criteria":"- Groups epics correctly from `bd epic status --json`\n- Expanding a group shows non-closed issues only\n- Inline edits persist via `bd update`\n- Row click opens Issue Detail\n- Typecheck, lint, tests pass","notes":"Started Epics view implementation.\n- app/views/epics.js: new Epics grouped table. Expands a group and loads dependents via getIssue(epic.id), then fetches each dependent via getIssue to filter non-closed children. Inline editing for title, type, priority, status, assignee via updateIssue. Row click navigates to detail.\n- app/main.js: wires Epics view into the new routing and loads when tab is active.\n- Tests: app/views/epics.test.js validates loading, expansion, and navigation.\n- All checks pass (typecheck, tests, lint, format).","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-23T08:37:34.389548+02:00","updated_at":"2025-10-24T10:24:05.181974+02:00","closed_at":"2025-10-23T09:23:29.60237+02:00","dependencies":[{"issue_id":"UI-58","depends_on_id":"UI-53","type":"parent-child","created_at":"2025-10-23T08:38:38.167295+02:00","created_by":"max"},{"issue_id":"UI-58","depends_on_id":"UI-55","type":"blocks","created_at":"2025-10-23T08:39:08.372903+02:00","created_by":"max"},{"issue_id":"UI-58","depends_on_id":"UI-54","type":"blocks","created_at":"2025-10-23T08:39:27.488651+02:00","created_by":"max"}]}
{"id":"UI-59","content_hash":"3046c697ee0476e454ebbbf4ff98829859e554103edced235426eac326c4694f","title":"Board view: Ready / In progress / Closed columns","description":"Implement a three-column board.\n\nColumns:\n- Ready: `bd ready --json`, sort by priority asc, then updated_at desc\n- In progress: `bd list -s in_progress --json`, sort by updated_at desc\n- Closed: `bd list -s closed -l 10 --json`, sort by updated_at desc\n\nBehavior:\n- Clicking a card opens Issue Detail\n- No drag-and-drop in phase 1\n\nUse data layer helpers.","design":"Board reference: /Users/max/Desktop/example-board.webp\nJSON fixtures: `bd-ready-example.json`, `bd-list-example.json`","acceptance_criteria":"- Columns render with correct data and sorting\n- Card click opens Issue Detail\n- Typecheck, lint, tests pass","notes":"Started Board view implementation.\n- New component: app/views/board.js with three columns (Ready, In progress, Closed).\n- Sorting: Ready (priority asc, then updated_at desc), In progress/Closed (updated_at desc).\n- Click on card navigates to Issue Detail via router callback.\n- Wiring: app/main.js now mounts Board view and loads it on switching to the Board tab.\n- Tests: app/views/board.test.js covers sorting for all columns and navigation on click.\nNext: Run full checks and close if all pass.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-23T08:37:40.618906+02:00","updated_at":"2025-10-24T10:24:05.18217+02:00","closed_at":"2025-10-23T09:38:36.255268+02:00","dependencies":[{"issue_id":"UI-59","depends_on_id":"UI-53","type":"parent-child","created_at":"2025-10-23T08:38:43.28937+02:00","created_by":"max"},{"issue_id":"UI-59","depends_on_id":"UI-55","type":"blocks","created_at":"2025-10-23T08:39:13.086992+02:00","created_by":"max"},{"issue_id":"UI-59","depends_on_id":"UI-54","type":"blocks","created_at":"2025-10-23T08:39:31.524908+02:00","created_by":"max"}]}
{"id":"UI-6","content_hash":"fabc97b249c83745efeb79db38a24384dcef8cf7ea4a34d649737191fefb3855","title":"SPA shell and routing","description":"Implement the SPA shell with client-side routing using ESM and JSDoc types (no heavy framework required).\n\nScope\n- App bootstrapping and environment config\n- Routes: issues list (`/`), issue detail (`/issue/:id`)\n- Minimal UI scaffolding; keyboard navigation baseline\n\nNotes\n- Keep dependencies light; favor small utilities or standard Web APIs.\n- Follow coding standards and unit testing conventions.","acceptance_criteria":"- `npm run dev` serves the SPA shell that can navigate between list and detail routes without reload.\n- Lint, type checks, and basic client tests pass.","notes":"SPA shell and routing implemented.\n- app/main.js boots the shell and wires list/detail panels.\n- app/router.js implements hash routing for list and issue detail; tests in app/router.test.js.\n- app/index.html and styles scaffold the UI; app/main.test.js exercises bootstrap.\n- `npm run dev` serves the SPA via the local server; navigation happens without reload.\n- Lint, typecheck, and tests pass.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T09:14:38.544355+02:00","updated_at":"2025-10-24T10:24:05.182359+02:00","closed_at":"2025-10-22T15:29:33.454232+02:00","dependencies":[{"issue_id":"UI-6","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:20.534873+02:00","created_by":"max"},{"issue_id":"UI-6","depends_on_id":"UI-2","type":"blocks","created_at":"2025-10-22T09:18:05.183685+02:00","created_by":"max"}]}
{"id":"UI-60","content_hash":"8b90e7406b2eec2c9eff8dadc881681a786affb15fcb25a915c63f0e727504de","title":"Tests, typing, and docs for new UI","description":"Add focused unit tests for data layer + each new view. Ensure repo standards passes and document usage.\n\nScope:\n- Unit tests for data providers and sort logic\n- Minimal tests for navigation routing and row/card click behavior\n- Typecheck + ESLint + Prettier pass\n- Update README with new navigation, data sources, and development tips","design":"Use the example JSON files for fixtures in tests.","acceptance_criteria":"- `npm run typecheck` passes\n- `npm test` passes\n- `npm run lint` passes\n- `npm run format` produces no diff on second run\n- README updated with new sections","notes":"Started UI-60. Added tests and docs.\n- Tests: app/views/epics.test.js now includes sorting by priority then updated_at and guards against navigation when clicking inputs.\n- Code: app/views/epics.js includes updated_at in child mapping for correct secondary sort and updates IssueLite JSDoc.\n- Docs: README.md gains Navigation \u0026 Views section describing Issues/Epics/Board data sources, sorting, and persistence.\nNext: Re-run full checks and close if all pass.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T08:38:00.898685+02:00","updated_at":"2025-10-24T10:24:05.182546+02:00","closed_at":"2025-10-23T09:29:02.395725+02:00","dependencies":[{"issue_id":"UI-60","depends_on_id":"UI-53","type":"parent-child","created_at":"2025-10-23T08:38:48.616603+02:00","created_by":"max"},{"issue_id":"UI-60","depends_on_id":"UI-54","type":"blocks","created_at":"2025-10-23T08:39:39.506715+02:00","created_by":"max"},{"issue_id":"UI-60","depends_on_id":"UI-55","type":"blocks","created_at":"2025-10-23T08:39:44.118254+02:00","created_by":"max"},{"issue_id":"UI-60","depends_on_id":"UI-56","type":"blocks","created_at":"2025-10-23T08:39:48.529053+02:00","created_by":"max"},{"issue_id":"UI-60","depends_on_id":"UI-58","type":"blocks","created_at":"2025-10-23T08:39:52.203049+02:00","created_by":"max"},{"issue_id":"UI-60","depends_on_id":"UI-59","type":"blocks","created_at":"2025-10-23T08:39:58.046138+02:00","created_by":"max"}]}
{"id":"UI-61","content_hash":"c344d8a3664e7d075cab2037e2155764dd8566d934d99639008e281488eb1b62","title":"Navigating to issue shows 'Issue not found' on valid ID","description":"When navigating via list/epics or deep-linking (e.g., #/issue/wk-8), the detail pane sometimes renders \"Issue not found\" even though the issue exists. Root cause: case-sensitive ID comparison in detail view vs backend-normalized IDs (e.g., WK-8). Fix: compare IDs case-insensitively in detail view and keep existing error fallback for truly missing issues.","acceptance_criteria":"- Deep-linking to an existing issue with mixed-case ID loads detail.\n- Clicking an issue in list or epics always loads detail (no false 'not found').\n- All tests pass.\n- No regression on error handling.","notes":"Working on detail view: normalize ID comparison to be case-insensitive. Added guard in app/views/detail.js and expanded tests pass locally.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-23T10:14:15.843414+02:00","updated_at":"2025-10-24T10:24:05.182731+02:00","closed_at":"2025-10-23T10:14:41.547191+02:00"}
{"id":"UI-62","content_hash":"2e5058a2cf635164ee9da4081cf89ab95aafa78c5e33edc4031fd505d5481413","title":"Opening epic shows \"No open issues\" despite progress counts","description":"On the Epics screen, expanding an epic sometimes shows \"No open issues\" even when the header indicates progress like \"5/7 closed\". Root cause: the UI loaded `dependents` of the epic instead of its `dependencies`. Given `dep-add a b` expresses \"a depends on b\", an epic's children are its `dependencies`.","acceptance_criteria":"- Expanding an epic lists its non-closed child issues (from `dependencies`).\n- Progress count and visible rows line up (e.g., with 5/7 closed, 2 open rows render).\n- Inline edits still work and rows navigate to detail on click.\n- All tests pass.","notes":"Adjusted epics view to fetch children from `dependencies` rather than `dependents`; updated tests to reflect correct semantics. All tests pass locally.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-23T10:14:24.837178+02:00","updated_at":"2025-10-24T10:24:05.182914+02:00","closed_at":"2025-10-23T10:14:50.948847+02:00"}
{"id":"UI-63","content_hash":"6624303badb06346dc9e3105d2ffd219c046407dde56ecc3127118fd9ae21add","title":"UI consistency: IDs, translations, and epic inline editing","description":"Bring UI consistency across the app:\n- Show issue IDs as `#${n}` everywhere (strip prefix, show numeric part).\n- Translate priority everywhere using `app/utils/priority.js` (dropdowns and text).\n- Translate status everywhere to Open / In progress / Closed (add helper, use in list and detail views).\n- Translate issue type everywhere to Bug / Feature / Epic / Task / Chore (add helper).\n- Epic inline editing should match issue details pattern: render as text with focus ring on hover; click to edit mode.","notes":"Child tasks UI-64…UI-68 created and implemented. Closing epic after validation.","status":"closed","priority":2,"issue_type":"epic","created_at":"2025-10-23T10:35:35.059532+02:00","updated_at":"2025-10-24T10:24:05.183088+02:00","closed_at":"2025-10-23T10:48:40.544629+02:00"}
{"id":"UI-64","content_hash":"dbd03320423b58663721501363e610cb78e33cdee56d35a367015eca3fcc275b","title":"Show issue IDs as #${n} everywhere","description":"Display ID as `#${n}` where `n` is the numeric part of the beads issue ID with prefix stripped. Update all components (list, detail, headers, badges) to use a single helper.\nAcceptance:\n- All issue ID UI renders as `#123`.\n- No raw `UI-123` or similar prefixes visible.\n- Unit tests cover helper and a representative component.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T10:35:47.036808+02:00","updated_at":"2025-10-24T10:24:05.183269+02:00","closed_at":"2025-10-23T10:47:49.566129+02:00","dependencies":[{"issue_id":"UI-64","depends_on_id":"UI-63","type":"parent-child","created_at":"2025-10-23T10:36:19.799696+02:00","created_by":"max"}]}
{"id":"UI-65","content_hash":"b416d929fe9535ca4e6c8c379f8636b75970aefd0a315b87780084530d0951dc","title":"Translate priority using app/utils/priority.js","description":"Ensure priority is translated consistently everywhere using `app/utils/priority.js` for both text and dropdown labels.\nAcceptance:\n- All priority displays use helper.\n- Dropdown options use helper mapping.\n- Remove duplicated/inline translations.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T10:35:52.3385+02:00","updated_at":"2025-10-24T10:24:05.183436+02:00","closed_at":"2025-10-23T10:47:56.933154+02:00","dependencies":[{"issue_id":"UI-65","depends_on_id":"UI-63","type":"parent-child","created_at":"2025-10-23T10:36:25.105322+02:00","created_by":"max"}]}
{"id":"UI-66","content_hash":"eb8b71993a2b0c3076f8ba8e843f1c627e022468a19e155699f09c7db1b31dfd","title":"Translate status to Open/In progress/Closed","description":"Add a status translation helper and use it everywhere (list, detail view, dropdowns):\n- open -\u003e Open\n- in_progress -\u003e In progress\n- closed -\u003e Closed","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T10:35:59.009837+02:00","updated_at":"2025-10-24T10:24:05.183663+02:00","closed_at":"2025-10-23T10:48:04.814922+02:00","dependencies":[{"issue_id":"UI-66","depends_on_id":"UI-63","type":"parent-child","created_at":"2025-10-23T10:36:29.567296+02:00","created_by":"max"}]}
{"id":"UI-67","content_hash":"ef66cff2fe0a5aed65cc6d329eeb373e6e9acf18da4e8c2b14f7216fe6e241e9","title":"Translate issue type to Bug/Feature/Epic/Task/Chore","description":"Add an issue type translation helper and apply everywhere:\n- bug -\u003e Bug\n- feature -\u003e Feature\n- epic -\u003e Epic\n- task -\u003e Task\n- chore -\u003e Chore","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T10:36:04.634608+02:00","updated_at":"2025-10-24T10:24:05.183867+02:00","closed_at":"2025-10-23T10:48:12.802393+02:00","dependencies":[{"issue_id":"UI-67","depends_on_id":"UI-63","type":"parent-child","created_at":"2025-10-23T10:36:33.493977+02:00","created_by":"max"}]}
{"id":"UI-68","content_hash":"7db6637762739694d0cdad3007dcd344b12c762acfbc5d870c2df9a077daea10","title":"Epic inline editing matches issue details interaction","description":"Make epic inline editing follow issue details pattern:\n- Render value as plain text with a focus ring on hover.\n- Click switches to editing mode with input focused.\n- On blur or submit, save and render back to text.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T10:36:10.055566+02:00","updated_at":"2025-10-24T10:24:05.184046+02:00","closed_at":"2025-10-23T10:48:25.826396+02:00","dependencies":[{"issue_id":"UI-68","depends_on_id":"UI-63","type":"parent-child","created_at":"2025-10-23T10:36:38.114652+02:00","created_by":"max"}]}
{"id":"UI-69","content_hash":"1c29d27c2c3ad289489f038a7eb76c861601a81f9b6e16329044943b4f9f7cb4","title":"Epic screen polish: stable columns, inline title edit, badge styling for status/priority","description":"UI improvements on Epics view and shared components:\n- Keep table column widths stable while editing titles (table-layout fixed + colgroup)\n- Inline title editor matches text (no border, inherits font, focus ring only)\n- Render status and priority everywhere as badges; when editable, selects styled as badges with native arrow\n- Add emoji to select option labels for type/status/priority (badges keep text-only for tests)\n- Apply same priority badge on board cards; add status/priority badges to list view meta\n- CSS variables for light/dark palettes\nIncludes tests passing and linting.\n","notes":"Starting implementation: CSS badge system, epics table colgroup + fixed layout, inline title input style, and select styling. Will update list/board/detail views and run validations.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T11:29:58.127333+02:00","updated_at":"2025-10-24T10:24:05.184232+02:00","closed_at":"2025-10-23T11:30:08.901744+02:00"}
{"id":"UI-7","content_hash":"259c9439c50cfe921fb44d2e46be1edef98f4c56c745b71cbf3aba7ba7d44a39","title":"Issues list view (browse and filter)","description":"Implement the issues list page with basic filtering and search.\n\nScope\n- Show id, title, status, priority, type, assignee\n- Client-side filters (status, type, priority) and text search\n- Subscribe to list updates via WS and update incrementally\n\nNotes\n- Keep render fast; prefer simple virtual list if needed.","acceptance_criteria":"- List loads from server via WS and updates in place on changes.\n- Filters and text search work locally without server roundtrips.\n- Keyboard navigation moves selection; Enter opens detail.","notes":"Issues list view implemented with filtering, search, and keyboard navigation.\n\n- app/views/list.js: renders id/title/status/priority, filters by status and search locally, and supports Arrow Up/Down selection with Enter to open detail. Selection syncs with the shared store.\n- Live updates: list reloads on `issues-changed` events (from app/main.js) with no full page reload.\n- Tests cover rendering, click navigation, and filters.\n\nNote: `type` and `assignee` columns can be added later if exposed by `bd` JSON output; current UI focuses on the essential fields.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T09:14:45.710607+02:00","updated_at":"2025-10-24T10:24:05.184471+02:00","closed_at":"2025-10-22T15:35:38.748214+02:00","dependencies":[{"issue_id":"UI-7","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:25.860801+02:00","created_by":"max"},{"issue_id":"UI-7","depends_on_id":"UI-6","type":"blocks","created_at":"2025-10-22T09:18:11.066066+02:00","created_by":"max"}]}
{"id":"UI-70","content_hash":"a809c3f0c8653702c13cf8cf3c033f4f507e56294e989fc67c921e31e62e323a","title":"Replace issue type select with plain text in UI","description":"`bd update` cannot change the issue `type`. Update the UI to render the issue type as non-editable plain text wherever it currently appears as an editable select control.","acceptance_criteria":"- Epics view shows issue type as plain text (badge), not a select.\n- No UI allows editing type via select in detail/epics views.\n- Test suite passes: `npm test`.\n- Typecheck, lint, and prettier pass: `npm run typecheck`, `npm run lint`, `npm run format:check`.","notes":"Changed `app/views/epics.js` to use `createTypeBadge(...)` for the Type column. Removed dropdown and related imports/helpers. No backend changes required.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T11:33:17.485875+02:00","updated_at":"2025-10-24T10:24:05.185293+02:00","closed_at":"2025-10-23T11:36:57.207612+02:00"}
{"id":"UI-71","content_hash":"7ce038aebaa56e32f23df5218542db17b89d8e4dee05c33784758afad94f39aa","title":"Remove update-type message wiring from UI and server","description":"Remove all references to the deprecated `update-type` message: protocol enums, client data layer, server handler, and tests. Keep create-issue `-t` support. Ensure full test/lint/typecheck pass.","acceptance_criteria":"- No code references `update-type` message.\n- `app/protocol.js` MessageType and MESSAGE_TYPES exclude `update-type`.\n- `createDataLayer.updateIssue` does not accept `type` and never calls `update-type`.\n- `server/ws.js` has no `update-type` handler.\n- Tests updated; `npm test` passes.\n- `npm run typecheck`, `npm run lint`, `npm run format:check` pass.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T11:50:01.110334+02:00","updated_at":"2025-10-24T10:24:05.185509+02:00","closed_at":"2025-10-23T11:50:19.510794+02:00","dependencies":[{"issue_id":"UI-71","depends_on_id":"UI-70","type":"discovered-from","created_at":"2025-10-23T11:50:07.441327+02:00","created_by":"max"}]}
{"id":"UI-72","content_hash":"4fe496ee0947215ae4a1261d90f21a833025e76c6f01811f06b9a75d2e61d7e4","title":"Board screen: UI fixes","description":"Modernize the Board and Closed views with UX, layout, and styling fixes. This epic groups tasks to add an \"Open\" column, remove redundant title, adjust card visuals and spacing, align issue ID within titles, and fix the Closed screen not rendering items.","acceptance_criteria":"All child tasks are complete and verified in the UI across light/dark themes. Board and Closed screens behave as specified; no regressions in filtering or drag-and-drop.","status":"closed","priority":2,"issue_type":"epic","created_at":"2025-10-23T12:59:16.964981+02:00","updated_at":"2025-10-24T10:24:05.18579+02:00","closed_at":"2025-10-23T14:05:19.752065+02:00"}
{"id":"UI-73","content_hash":"9b06f839b4e0b5510117e80d2b3f970ed853145c4441e0c6813ca15edf39dadb","title":"App layout: navigation and style","description":"Unify the app header and navigation look-and-feel. This epic groups tasks to rename the title, reposition and restyle tabs, align the Issues screen search row background, and wrap the issues table with a rounded border with consistent margins.","acceptance_criteria":"All child tasks are complete and verified in the UI across light/dark themes. Header and tab layout matches spec; Issues table and search row align with epics/cards margins.","status":"closed","priority":2,"issue_type":"epic","created_at":"2025-10-23T12:59:25.211174+02:00","updated_at":"2025-10-24T10:24:05.185975+02:00","closed_at":"2025-10-23T14:16:00.176611+02:00"}
{"id":"UI-74","content_hash":"2e7a920604a60d6c680971f17478341dde641ea42a262d12702ad1f8fb316897","title":"Board: add leftmost \"Open\" column for non-Ready open issues","description":"Add a new Board column on the far left named \"Open\" that lists all open issues not already in the \"Ready\" column.","acceptance_criteria":"- A new \"Open\" column renders at the far left.\n- Contains all issues with status open that are not present in \"Ready\".\n- No duplicates across columns.\n- Respects global filters (assignee, labels, text).\n- Drag-and-drop continues to work for other columns.","notes":"Implemented Open column: added data.getOpen(), render Open leftmost in Board, excluded Ready IDs from Open, updated CSS to 4 columns, and adjusted board test to cover Open behavior. Running validations passed.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-23T12:59:40.566694+02:00","updated_at":"2025-10-24T10:24:05.186247+02:00","closed_at":"2025-10-23T13:25:39.218725+02:00","dependencies":[{"issue_id":"UI-74","depends_on_id":"UI-72","type":"parent-child","created_at":"2025-10-23T13:00:46.721957+02:00","created_by":"max"}]}
{"id":"UI-75","content_hash":"70d81e00fa51a0c45a8efc26a3446814c63d7e6eac8d25ab024c760fdc49be5d","title":"Board: remove redundant \"Board\" title","description":"Remove the page title heading \"Board\" from the Board screen since it duplicates the \"Board\" tab label.","acceptance_criteria":"- The \"Board\" heading no longer appears on the Board screen.\n- No layout jump or spacing regression after removal.\n- Screen readers still expose a sensible page landmark/heading structure.","notes":"Removed redundant visual heading from Board view; column headers now expose heading roles for screen readers. Verified no layout regressions and passing checks.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-23T12:59:45.371117+02:00","updated_at":"2025-10-24T10:24:05.186471+02:00","closed_at":"2025-10-23T13:39:36.045906+02:00","dependencies":[{"issue_id":"UI-75","depends_on_id":"UI-72","type":"parent-child","created_at":"2025-10-23T13:00:50.842723+02:00","created_by":"max"}]}
{"id":"UI-76","content_hash":"96b58471900ce9208e662cf28b7708266d4484492e56c40f9b4f6ac2f5b340d3","title":"Board cards: match body background and add box-shadow","description":"Update board cards so their background color matches the page body background and add a subtle box-shadow for elevation.","acceptance_criteria":"- Card background color equals body background color in light and dark modes.\n- A single, subtle box-shadow is applied; no borders.\n- Contrast and readability meet AA for card content.\n- No change to card width or column layout.","notes":"Working on board card visuals: match body background, remove borders, add subtle elevation shadow. Changes in app/styles.css.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T12:59:51.645562+02:00","updated_at":"2025-10-24T10:24:05.18664+02:00","closed_at":"2025-10-23T14:05:06.492677+02:00","dependencies":[{"issue_id":"UI-76","depends_on_id":"UI-72","type":"parent-child","created_at":"2025-10-23T13:00:55.930692+02:00","created_by":"max"}]}
{"id":"UI-760d","content_hash":"fcfc3ea0736b1b2574dfc43b52aeb7bb079c063477ed220af82d50daed846d6f","title":"Add horizontal tabs to issue detail view (Overview/Dependencies)","description":"Refactor issue detail sidebar to use horizontal tabs:\n- Tab 1: \"Overview\" - Properties card\n- Tab 2: \"Dependencies\" - Dependencies and Dependents sections\n\nMove Dependencies/Dependents cards from always-visible sidebar to Dependencies tab.\nTab styling should match existing header navigation pattern (.header-nav .tab).","status":"open","priority":2,"issue_type":"feature","assignee":"agent","created_at":"2025-11-01T18:03:49.012880916+01:00","updated_at":"2025-11-01T18:03:49.012880916+01:00"}
{"id":"UI-77","content_hash":"ff9c5f55e24a03ce94b9d36f0bfaf4f05534419820288892af1b3c4f220c4897","title":"Board cards: increase internal padding and row gap","description":"Increase card internal padding and vertical spacing between card rows to improve readability and scannability.","acceptance_criteria":"- Card internal padding increased consistently on all sides.\n- Vertical gap between card rows increased consistently across columns.\n- No text truncation or overflow regressions.\n- Column counts/widths remain unchanged.","notes":"Working on board card spacing: increase internal padding and vertical gap between rows. Changes in app/styles.css.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-23T12:59:56.545104+02:00","updated_at":"2025-10-24T10:24:05.186805+02:00","closed_at":"2025-10-23T14:05:10.024414+02:00","dependencies":[{"issue_id":"UI-77","depends_on_id":"UI-72","type":"parent-child","created_at":"2025-10-23T13:00:59.966127+02:00","created_by":"max"}]}
{"id":"UI-78","content_hash":"fd7f5c05f082dadbc0ee1552aab86b2870154c7ecc2878df66ad7bb9e5a0d2d3","title":"Board cards: move issue ID into title row, right-aligned","description":"Render the issue ID in the same row as the card title, aligned to the right, to save vertical space.","acceptance_criteria":"- Card title row displays the issue ID on the far right.\n- ID remains a link to the issue detail.\n- No wrapping or overlap with long titles at common widths.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-23T13:00:02.175735+02:00","updated_at":"2025-10-24T10:24:05.187061+02:00","closed_at":"2025-10-23T13:34:44.21399+02:00","dependencies":[{"issue_id":"UI-78","depends_on_id":"UI-72","type":"parent-child","created_at":"2025-10-23T13:01:05.250545+02:00","created_by":"max"}]}
{"id":"UI-79","content_hash":"e13733341dda2c29447bef05d1d60fcb2814f4b381fc4eb08b52c727910cd64d","title":"Closed screen: fix empty view (no issues shown)","description":"The Closed screen currently renders no issues. Fix the query/filters so that closed issues display correctly.","acceptance_criteria":"- Navigating to the Closed screen lists issues with status closed.\n- Respects existing filters, sorting, and pagination.\n- No performance regressions on large datasets.\n- Add a friendly empty-state only when no closed issues exist.","notes":"Adjusted bd list flags: use `--status` and `--limit`. Updated server/ws.js and tests. All validations passed. Thanks for the flag clarification.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-23T13:00:08.730668+02:00","updated_at":"2025-10-24T10:24:05.187776+02:00","closed_at":"2025-10-23T13:22:55.980383+02:00","dependencies":[{"issue_id":"UI-79","depends_on_id":"UI-72","type":"parent-child","created_at":"2025-10-23T13:01:09.037139+02:00","created_by":"max"}]}
{"id":"UI-8","content_hash":"431cfebd3572b83d110698ca86c14074c1d76acafe84a7252f3c4d91eb70f50f","title":"Issue detail view (edit text and status)","description":"Implement the issue detail page supporting text editing and status changes.\n\nScope\n- Show and edit: title, description, acceptance\n- Change status via dropdown; reflect allowed states\n- Subscribe to issue updates; optimistic UI with rollback on error\n\nNotes\n- Use debounced input updates with explicit Save/Undo.\n- Respect Coding and Testing Standards.","acceptance_criteria":"- Editing fields triggers WS requests that result in persisted changes via `bd`.\n- Status changes apply and are visible immediately on list and detail pages.\n- Concurrent update from watcher applies non-destructively while editing with clear conflict messaging.","notes":"Issue detail view implemented with inline edits and status changes.\n\nUpdates\n- app/views/detail.js: supports title, description, and acceptance editing with Save/Cancel and keyboard shortcuts (Esc to cancel; Ctrl/Cmd+Enter to save for textareas). Status and priority controls update via WS with optimistic UI and rollback on error. Dependency add/remove controls included.\n- Server already bridges edits; watcher updates refresh list/detail on push.\n- Tests validate core edit flows; acceptance editing added to server and covered in ws tests.\n\nBehavior\n- Edits send `edit-text` and `update-status` messages; replies update UI immediately.\n- Concurrent `issues-changed` events trigger reloads; UI re-renders without losing local state except when a save occurs (baseline approach).\n\nValidation\n- `npm run dev` serves the SPA; navigation between list and detail works without reload.\n- Lint, typecheck, and tests pass.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T09:15:00.800014+02:00","updated_at":"2025-10-24T10:24:05.18794+02:00","closed_at":"2025-10-22T15:31:09.816053+02:00","dependencies":[{"issue_id":"UI-8","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:30.876933+02:00","created_by":"max"},{"issue_id":"UI-8","depends_on_id":"UI-6","type":"blocks","created_at":"2025-10-22T09:18:16.047653+02:00","created_by":"max"},{"issue_id":"UI-8","depends_on_id":"UI-5","type":"blocks","created_at":"2025-10-22T09:18:20.241426+02:00","created_by":"max"}]}
{"id":"UI-80","content_hash":"3d066d9bc17f029ace7d0f161b67ca65ac70cbeb10b330e800ecac5e027a0663","title":"App title: rename to \"Beads\"","description":"Rename the app title to just \"Beads\" (drop any \"UI\" suffix).","acceptance_criteria":"- Header title displays \"Beads\".\n- Document/page title reflects \"Beads\".\n- No other strings or branding are unintentionally changed.","notes":"Started implementing title rename across header and document title as per UI-73 epic.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-23T13:00:13.856294+02:00","updated_at":"2025-10-24T10:24:05.188111+02:00","closed_at":"2025-10-23T14:15:16.962765+02:00","dependencies":[{"issue_id":"UI-80","depends_on_id":"UI-73","type":"parent-child","created_at":"2025-10-23T13:01:13.652219+02:00","created_by":"max"}]}
{"id":"UI-81","content_hash":"e5e1ec2af726b2138515f16f7e6562690a9f666f252321c2ef474c510887fb75","title":"Header tabs: move next to title; style selected tab with body background and matching bottom border","description":"Reposition header tabs next to the app title and style the selected tab using the body background color with a bottom border of the same color.","acceptance_criteria":"- Tabs sit inline next to the \"Beads\" title on desktop.\n- Selected tab background equals body background; bottom border equals body background.\n- Hover/focus states remain accessible.\n- Layout adapts reasonably on narrow widths.","notes":"Moved tabs next to the title by mounting nav inside header; updated nav markup (app/views/nav.js), main shell (app/main.js), and styles (app/styles.css). Styling for active tab uses body background and matching bottom border.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T13:00:19.381693+02:00","updated_at":"2025-10-24T10:24:05.188297+02:00","closed_at":"2025-10-23T14:15:28.424225+02:00","dependencies":[{"issue_id":"UI-81","depends_on_id":"UI-73","type":"parent-child","created_at":"2025-10-23T13:01:17.536579+02:00","created_by":"max"}]}
{"id":"UI-82","content_hash":"9477399aee0fb2a9643ebafdfa9173ebeb35241c7f255ec7e8811366735b874e","title":"Issues screen: search row uses body background","description":"Set the Issues screen search row (filters and inputs) to use the page body background color for visual consistency.","acceptance_criteria":"- Search row background equals body background color in light and dark modes.\n- No contrast regressions with inputs or labels.\n- Sticky/fixed behavior, if any, remains correct.","notes":"Updated Issues screen search row to use body background via CSS override (#list-panel .panel__header) in app/styles.css. Verified contrast in both themes.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T13:00:28.292738+02:00","updated_at":"2025-10-24T10:24:05.188473+02:00","closed_at":"2025-10-23T14:15:39.89006+02:00","dependencies":[{"issue_id":"UI-82","depends_on_id":"UI-73","type":"parent-child","created_at":"2025-10-23T13:01:21.937585+02:00","created_by":"max"}]}
{"id":"UI-83","content_hash":"7276f1925b8d918d0d1050263223db0fddc6009e7e91371b7a2c85be1166b87c","title":"Issues table: rounded border and margins aligned with epics/cards","description":"Wrap the Issues table with a rounded border and apply margins consistent with epics/cards so all content aligns vertically.","acceptance_criteria":"- Issues table has a rounded border with consistent radius.\n- Table block margins align with epics/cards margins on all screens.\n- No layout overflow or horizontal scroll introduced.","notes":"Wrapped Issues table in a rounded container `.issues-block` with margins aligned to Epic cards; added styles in app/styles.css and adjusted rendering in app/views/list.js. Ensured no overflow or horizontal scroll introduced.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T13:00:33.744689+02:00","updated_at":"2025-10-24T10:24:05.188657+02:00","closed_at":"2025-10-23T14:15:47.672265+02:00","dependencies":[{"issue_id":"UI-83","depends_on_id":"UI-73","type":"parent-child","created_at":"2025-10-23T13:01:25.321789+02:00","created_by":"max"}]}
{"id":"UI-84","content_hash":"3c061a059f182d925d51be70dfe94727277ecf9096634781f0edd7d325820f11","title":"Board: columns fill screen with sticky headers and per-column scrolling","description":"Make Board columns fill available vertical space and scroll within each column. Make each column header sticky at the top of its column.","acceptance_criteria":"- Board route fills vertical space under top bar\n- Column headers remain visible during vertical scroll in that column\n- Vertical scroll occurs per column, not the whole page\n- No overflow glitches on narrow screens (single-column breakpoint)\n- No regressions to other views","notes":"Implemented CSS-only fix: Board route fills viewport, each column scrolls vertically with sticky header. Updated styles in app/styles.css and kept markup intact.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T13:33:54.137405+02:00","updated_at":"2025-10-24T10:24:05.18886+02:00","closed_at":"2025-10-23T13:34:28.329924+02:00","dependencies":[{"issue_id":"UI-84","depends_on_id":"UI-72","type":"parent-child","created_at":"2025-10-23T13:34:01.808718+02:00","created_by":"max"}]}
{"id":"UI-85","content_hash":"fea4cbe6dd249e7d5e917cab2c25776d1b9ce61fa4f234ca019260884c65c41f","title":"Board persists when switching views","description":"When navigating away from the Board (to Issues, Epics, or an Issue Detail), portions of the Board remain rendered on the right side of the app layout.","acceptance_criteria":"- Switching from Board to Issues/Epics hides and unmounts Board contents\n- Opening an Issue Detail from any view hides and unmounts Board\n- No Board DOM remains in `#board-root` after leaving the Board\n- Pre‑handoff checks pass: `npm run typecheck`, `npm test`, `npm run lint`, `npm run format`","notes":"Root cause identified: author CSS set `display` on route shells (e.g., `.route.board { display:flex }`), which can override the UA `[hidden]` rule.\n\nFixes:\n- app/styles.css: add `[hidden] { display:none !important; }` so hidden routes never render.\n- app/main.js: revert clearing the board on non-board views to avoid losing content when navigating back. Board loads on entry as before.\n- app/main.board-switch.test.js: update test to assert hide/show behavior without relying on clearing.\n\nResult:\n- Clicking a Board card navigates to detail and hides Board fully.\n- Switching board → issues → board shows the board contents again.\n\nValidation unchanged: all checks pass.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-23T13:52:06.54857+02:00","updated_at":"2025-10-24T10:24:05.189062+02:00","closed_at":"2025-10-23T13:52:22.322613+02:00","dependencies":[{"issue_id":"UI-85","depends_on_id":"UI-72","type":"related","created_at":"2025-10-23T13:52:13.093857+02:00","created_by":"max"}]}
{"id":"UI-86","content_hash":"8ce5ac1821c9be66dd56f552ca120d955d77902378f46ce19ca1d6a20e597ef9","title":"UI-85: Board height regression after header refactor","description":"After moving tabs into the header (UI-81), the Board route height relied on a fixed 53px header offset, causing the page to scroll instead of columns on some screens. Fix by computing `--header-h` from the actual header height on load/resize and using it in CSS for `.app-shell` height.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-23T14:36:44.113392+02:00","updated_at":"2025-10-24T10:24:05.189256+02:00","closed_at":"2025-10-23T14:36:49.16843+02:00"}
{"id":"UI-87","content_hash":"1dbf3a22834a30c24add5dd53543a6364bafda6cd98039b406200e21882f59a9","title":"Board: Ready column shows items already In Progress","description":"On the Board screen, the Ready column sometimes includes issues that are already in the In Progress column. This creates duplicates and misleads prioritization.\n\nRoot cause: The client view did not filter Ready items against In Progress IDs after loading both lists.\n\nFix: Filter Ready by excluding any item whose id appears in the In Progress list.\n\nFiles:\n- app/views/board.js — exclude In Progress IDs from Ready list in load()\n- app/views/board.test.js — add test: \"filters Ready to exclude items that are In Progress\"\n\nNotes: Sorting is unchanged. Open column continues to exclude items present in Ready.","acceptance_criteria":"- When the same issue appears in both the underlying Ready and In Progress data, the Ready column does not display it.\n- No duplicates across Board columns for that issue.\n- Tests, typecheck, lint, and format pass.","notes":"Implemented fix and tests.\n- app/views/board.js: filter Ready by excluding IDs present in In Progress.\n- app/views/board.test.js: add unit test confirming Ready excludes In Progress duplicate.\nValidation:\n- npm run typecheck: pass\n- npm test: 96 tests passing\n- npm run lint: pass\n- npm run format: no changes","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-23T14:50:11.624314+02:00","updated_at":"2025-10-24T10:24:05.189444+02:00","closed_at":"2025-10-23T14:50:18.652192+02:00"}
{"id":"UI-88","content_hash":"a4dd1d709056d63e395083cd4fd7094b23bbc46483dddd590b0077e2016773a3","title":"Detail view: show editable \"Unassigned\" placeholder for Assignee","description":"When an issue has no `assignee`, the Properties sidebar displays nothing, leaving no visible affordance to edit. Show a muted placeholder that is still clickable to enter edit mode.","acceptance_criteria":"- When `assignee` is empty or missing, the Properties Assignee field shows a muted placeholder (e.g., \"Unassigned\").\n- The placeholder is keyboard/click editable (same behavior as when a value exists).\n- Clicking/Enter on the placeholder switches to input with Save/Cancel.\n- Tests, typecheck, lint, and format pass.","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-23T15:03:49.818696+02:00","updated_at":"2025-10-24T10:24:05.189631+02:00","closed_at":"2025-10-23T15:05:12.22165+02:00","dependencies":[{"issue_id":"UI-88","depends_on_id":"UI-57","type":"discovered-from","created_at":"2025-10-23T15:03:53.342376+02:00","created_by":"max"}]}
{"id":"UI-89","content_hash":"e8f566f552e23f40524989f50f48f565f27743b19dd9b5fc30dfe9b6b9d23631","title":"Allow clearing assignee (empty string) via WS","description":"The server WS handler for `update-assignee` rejected empty strings, preventing users from clearing the assignee, even though `bd update \u003cid\u003e --assignee \"\"` is supported.","acceptance_criteria":"- WS `update-assignee` accepts empty string and passes it through to `bd`.\n- Unit test covers empty-string case and asserts spawn args.\n- All validations pass.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-23T15:09:05.079513+02:00","updated_at":"2025-10-24T10:24:05.18982+02:00","closed_at":"2025-10-23T15:09:09.864229+02:00"}
{"id":"UI-9","content_hash":"13f799f5bbb82390ee106ebdcd4494e1041f0c165451d3c47b008806707de4ce","title":"Real-time UI updates from watcher","description":"Wire the client subscription(s) to apply incoming watcher events efficiently to the current page.\n\nScope\n- Normalized client cache keyed by issue id\n- Fast update paths for list and detail routes\n- Visual cues for live updates\n\nNotes\n- Ensure no flicker and preserve scroll/selection.","acceptance_criteria":"- When `.beads/issues.jsonl` changes, the connected UI updates within 200ms for visible issues.\n- No full-page reloads are required; only affected rows/fields update.","notes":"Real-time updates are wired.\n- app/main.js subscribes to `issues-changed` events and reloads the list and active detail view without a full-page reload.\n- Server broadcasts on DB changes via `watchDb`; end-to-end propagation verified by unit tests.\n\nNotes\n- The current implementation re-renders the visible list rather than patching individual rows. Created follow-up UI-46 to consider lightweight change hints and partial DOM updates to minimize work and improve perceived latency.\n","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T09:15:06.299306+02:00","updated_at":"2025-10-24T10:24:05.189997+02:00","closed_at":"2025-10-22T15:31:58.149234+02:00","dependencies":[{"issue_id":"UI-9","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:36.720644+02:00","created_by":"max"},{"issue_id":"UI-9","depends_on_id":"UI-6","type":"blocks","created_at":"2025-10-22T09:18:27.028524+02:00","created_by":"max"},{"issue_id":"UI-9","depends_on_id":"UI-4","type":"blocks","created_at":"2025-10-22T09:18:32.570119+02:00","created_by":"max"}]}
{"id":"UI-90","content_hash":"5e4e2891036ccd062999236b67fb3dd5a1ea08dd5130af76700f02d0508190fd","title":"Show acceptance and notes in issue details","description":"Render acceptance and notes in the Issue Detail view.\n\n- Normalize acceptance from `acceptance` or `acceptance_criteria`.\n- Display notes (read-only) using markdown.\n- Only render section headings when section has content.\n- Add tests for acceptance fallback, notes rendering, and heading gating.","acceptance_criteria":"- Acceptance section shows text from `acceptance` or `acceptance_criteria`.\n- Notes section renders markdown when present.\n- Headings for Acceptance and Notes appear only when the respective text is non-empty.\n- Unit tests pass and cover both presence and absence cases.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-23T15:15:36.461187+02:00","updated_at":"2025-10-24T10:24:05.190185+02:00","closed_at":"2025-10-23T15:15:44.263266+02:00"}
{"id":"UI-91","content_hash":"3575193b2e97f67f24706f5940322341b97ca3277956c803db2331bc5e3af4e1","title":"Add 32px top margin to acceptance and notes sections","description":"Add spacing to details view sections.\n\n- Apply `margin-top: 32px` to `.acceptance` and `.notes` containers within `#detail-root`.\n- Keep consistent with detail layout spacing.\n- Validate with lint/tests/format.","status":"closed","priority":3,"issue_type":"chore","created_at":"2025-10-23T15:19:42.104513+02:00","updated_at":"2025-10-24T10:24:05.190367+02:00","closed_at":"2025-10-23T15:19:50.180006+02:00"}
{"id":"UI-92","content_hash":"bb631084829550c54250e83b8a5ebfb5224ae07b5c0f44229f6de6ca16495176","title":"Detail view: remove header, show ID in title, fix editor font sizes, make title editor full-width","description":"Polish detail screen layout and editing.\n\n- Remove `.panel__header` from detail panel.\n- Show issue ID right-aligned on the title line.\n- Ensure editor font sizes match read mode for title/description/acceptance/notes.\n- Make title input fill available width.\n- Update tests accordingly.","acceptance_criteria":"- No `.panel__header` renders in the detail panel.\n- Title line shows the `#ID` at the right; title editor spans remaining width.\n- Editing title/description/acceptance does not change font size vs read mode.\n- All tests pass, linters and type checks clean.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-23T15:30:35.038912+02:00","updated_at":"2025-10-24T10:24:05.190538+02:00","closed_at":"2025-10-23T15:30:43.300457+02:00"}
{"id":"UI-93","content_hash":"e3a8dfff7a66f071531f9a1230ce42530374716e1caadd547d24084a8564f1d0","title":"Replace type filter checkboxes with single select","description":"Switch List view type filtering from multi-select checkboxes to a single select.\n- Remove combination of types; allow filtering by a single type only.\n- Persist selected type as `filters.type: string` in store/localStorage (migrate from previous `filters.types: string[]`).\n- Update UI to a `\u003cselect\u003e` with options: All types, bug, feature, task, epic, chore.\n- Keep compatibility by reading old `types` array from localStorage and picking the first valid entry.\n- Update unit tests to assert select behavior and persisted initialization.\n","acceptance_criteria":"- Type select filters list items by a single type and works with Ready and search filters.\n- Select reflects initial state from store/localStorage on first render.\n- No checkboxes remain in the header.\n- All tests, lint, and typecheck pass.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-23T16:59:55.34764+02:00","updated_at":"2025-10-24T10:24:05.190723+02:00","closed_at":"2025-10-23T17:00:07.432073+02:00","dependencies":[{"issue_id":"UI-93","depends_on_id":"UI-42","type":"discovered-from","created_at":"2025-10-23T17:00:02.31129+02:00","created_by":"max"}]}
{"id":"UI-94","content_hash":"5b7a2a622372257963e26ac16a149e5c50f6f9a3f59a30007f79fc7814d3af17","title":"Epic: Add `bdui` binary for UI daemon control","description":"Introduce a new CLI binary `bdui` to control the beads-ui server as a background daemon and streamline local usage.\n\nGoals\n- Provide `bdui` with commands: `start`, `stop`, `restart`.\n- Spawn the UI server as a detached daemon (background process) with PID management.\n- On successful `start`, auto-open the app in the OS default browser.\n- Cross-platform support (macOS, Linux, Windows)\n- Ship as a Node ESM binary, adhering to repo coding standards (JSDoc, ESM, lint/type/test).\n- Update docs and add tests.\n\nNotes\n- Current server entry: `server/index.js` with Express + WS.\n- Package currently `private`; for dev, support `npm link` to expose `bdui` locally.\n- Prefer a PID file under a runtime dir (e.g. XDG runtime or OS tmp) to avoid repo writes; include an override via env or flag for debugging.\n","acceptance_criteria":"- Running `bdui --help` prints usage and lists `start|stop|restart`.\n- `bdui start` ensures exactly one detached server instance, writes PID file, and prints the URL.\n- `bdui start` opens the default browser to the server URL unless disabled with `--no-open` or `BDUI_NO_OPEN=1`.\n- `bdui stop` terminates the daemon gracefully (SIGTERM) and removes the PID file.\n- `bdui restart` behaves as `stop` then `start`.\n- Exit codes: success=0; not-running on stop=2; invalid command=1.\n- Works on macOS and Linux; Windows behavior documented and covered where feasible.\n- CI passes: `npm run all` stays green.","notes":"Docs updated: README.md and docs/quickstart.md now cover `bdui` usage, flags (`--no-open`), env (`BDUI_RUNTIME_DIR`, `BDUI_NO_OPEN`, `PORT`), and Windows notes. Tests added in UI-99 validate CLI parsing and daemon management. `npm run all` passes locally.","status":"closed","priority":1,"issue_type":"epic","assignee":"assistant","created_at":"2025-10-23T17:34:17.648604+02:00","updated_at":"2025-10-24T10:24:05.190892+02:00","closed_at":"2025-10-23T19:47:46.04278+02:00"}
{"id":"UI-95","content_hash":"dc8e267fe42959019db7a719a2b990349db36abaee110885bfa873f1f94e46c0","title":"bdui: CLI command and usage scaffold","description":"Create the `bdui` CLI entry with ESM-only implementation and a clean command interface for `start|stop|restart`.\n\nScope\n- Implement argument parsing and help/usage.\n- Wire commands to stub handlers that will call daemon logic.\n- Respect coding standards (JSDoc, snake_case vars, camelCase funcs).\n- Structure: `bin/bdui.js` (thin entry) + `server/cli/*.js` modules.\n","acceptance_criteria":"- `bdui --help` prints usage and exits 0.\n- `bdui start|stop|restart` are recognized; unknown commands print usage and exit 1.\n- No side effects beyond calling stub handlers (until daemon feature lands).\n- Lint, typecheck, and unit tests pass for this module.","notes":"Implemented CLI scaffold for `bdui` per scope.\n\nChanges\n- Added `bin/bdui.js` thin entry that awaits `main()` and sets `process.exitCode`.\n- Added `server/cli/index.js` with `parseArgs()` and `main()`.\n- Added `server/cli/usage.js` for help/usage printing.\n- Added `server/cli/commands.js` with stub handlers for `start|stop|restart` (no side effects).\n- Added tests `server/cli/cli.test.js` covering parse/help/dispatch and exit codes.\n- Updated ESLint config to include Node globals for `bin/**/*.js` only.\n\nValidation\n- Lint: passes (`npm run lint`).\n- Tests: pass (`npm test`).\n- Typecheck: repo run currently reports pre-existing errors in `app/main.live-updates.test.js`. New task filed: UI-101 (discovered-from:UI-95).\n\nUsage (until UI-98 wires npm bin):\n- `node bin/bdui.js --help` prints usage and exits 0.\n- `node bin/bdui.js start|stop|restart` return 0; unknown commands exit 1.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-23T17:34:29.013936+02:00","updated_at":"2025-10-24T10:24:05.191087+02:00","closed_at":"2025-10-23T18:54:43.475126+02:00","dependencies":[{"issue_id":"UI-95","depends_on_id":"UI-94","type":"parent-child","created_at":"2025-10-23T17:35:34.101293+02:00","created_by":"max"}]}
{"id":"UI-96","content_hash":"6f6cb72fbd2b2975301ed22f64b13299fda3046d12048bfba2c754a276e7ef9e","title":"bdui: Daemonize server with PID management","description":"Implement background daemon management for the beads-ui server.\n\nScope\n- Start: spawn `node server/index.js` as a detached child; redirect stdio to a log file; unref.\n- PID file: write child PID to a runtime directory (prefer `$XDG_RUNTIME_DIR/beads-ui` or `os.tmpdir()/beads-ui`), ensure directory exists, and set safe permissions.\n- Stop: read PID file, send SIGTERM, wait up to N seconds for clean exit, then SIGKILL as fallback; remove PID file.\n- Restart: stop (ignore not-running) then start.\n- Idempotency: `start` returns 0 if already running and prints the URL; guard against stale PID files.\n- Port/host: respect `server/config.js` defaults and env overrides.\n","acceptance_criteria":"- `bdui start` leaves no child attached to the invoking terminal and returns 0.\n- Log file written under the runtime dir and appended across runs.\n- `bdui stop` terminates the daemon and removes the PID file; returns code 2 if not running.\n- `bdui restart` performs stop then start and returns 0 on success.\n- Stale PID file detection works (no crash), replacing the PID file when necessary.\n- Works on macOS and Linux in local testing.","notes":"Claiming UI-96. Implementing `bdui` CLI daemon management: start/stop/restart with PID + logs and idempotency. Will integrate as ESM binary per coding standards and respect server/config.js host/port.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-23T17:34:40.612048+02:00","updated_at":"2025-10-24T10:24:05.191282+02:00","closed_at":"2025-10-23T19:22:38.440979+02:00","dependencies":[{"issue_id":"UI-96","depends_on_id":"UI-94","type":"parent-child","created_at":"2025-10-23T17:35:37.146463+02:00","created_by":"max"}]}
{"id":"UI-97","content_hash":"86bdf8fba9f73346f0a11641103e48e0839688c6ddde0b0011c11dcce38466d6","title":"bdui: Auto-open default browser on start","description":"On successful `bdui start`, open the app URL in the system default browser.\n\nScope\n- Compute URL from `server/config.js` host/port.\n- Implement cross-platform open: macOS `open`, Linux `xdg-open`, Windows `start`.\n- Provide `--no-open` flag and `BDUI_NO_OPEN=1` env var to disable.\n- Retry once if the port is not ready yet (wait for health/HTTP 200 or a brief delay).\n","acceptance_criteria":"- `bdui start` opens the browser exactly once when launching a new daemon.\n- `--no-open` and `BDUI_NO_OPEN=1` prevent opening.\n- Opening works on macOS and Linux.\n- Graceful behavior when the server fails to start (prints error, exits non-zero, does not loop).","notes":"Implementing auto-open on `bdui start` with `--no-open` and `BDUI_NO_OPEN=1` support. Adding cross-platform open mapping and a brief readiness wait.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-23T17:34:50.783125+02:00","updated_at":"2025-10-24T10:24:05.191469+02:00","closed_at":"2025-10-23T19:34:58.867965+02:00","dependencies":[{"issue_id":"UI-97","depends_on_id":"UI-94","type":"parent-child","created_at":"2025-10-23T17:35:43.462679+02:00","created_by":"max"},{"issue_id":"UI-97","depends_on_id":"UI-95","type":"blocks","created_at":"2025-10-23T17:36:10.555738+02:00","created_by":"max"},{"issue_id":"UI-97","depends_on_id":"UI-96","type":"blocks","created_at":"2025-10-23T17:36:15.874339+02:00","created_by":"max"}]}
{"id":"UI-98","content_hash":"2bfee2f5d723d211fa767bd2cfc8df43ae8e851a55d141d5d3368ee21d6180b3","title":"bdui: Package binary and local linking","description":"Expose `bdui` as an npm binary for local development and future distribution.\n\nScope\n- Add `bin` field in `package.json` mapping `bdui` -\u003e `bin/bdui.js`.\n- Ensure Node `\u003e=22` engine remains enforced and binary has proper shebang.\n- Document `npm link` workflow for developers.\n- Keep package `private` for now; evaluate publish later.\n","acceptance_criteria":"- `npm link` from repo root makes `bdui` available on PATH.\n- Invoking `bdui --help` works after linking.\n- CI passes: lint/type/tests including new files.","notes":"Wiring npm binary and docs.\n- Added package.json `bin` mapping: { \"bdui\": \"bin/bdui.js\" }\n- Ensured shebang present (already) and set local exec bit on `bin/bdui.js`.\n- Added README/docs quickstart section for `npm link` + `bdui --help`.\n- Ran `npm run all`: lint/type/tests/format all pass.\n","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-23T17:35:03.261329+02:00","updated_at":"2025-10-24T10:24:05.191651+02:00","closed_at":"2025-10-23T19:16:28.94109+02:00","dependencies":[{"issue_id":"UI-98","depends_on_id":"UI-94","type":"parent-child","created_at":"2025-10-23T17:35:48.620881+02:00","created_by":"max"},{"issue_id":"UI-98","depends_on_id":"UI-95","type":"blocks","created_at":"2025-10-23T17:36:18.737737+02:00","created_by":"max"}]}
{"id":"UI-99","content_hash":"92455bdb5f5d9faefba435f1a14fe54e8a2bc760b83eaa2484680c2e87c4fb10","title":"bdui: Add tests for start|stop|restart and PID handling","description":"Add focused tests around the `bdui` CLI and daemon manager using Vitest.\n\nScope\n- Unit tests for CLI parsing and command dispatch.\n- Integration-style tests for start/stop/restart using a temporary port and fake runtime dir; mock browser open.\n- Verify exit codes and messages.\n- Ensure tests follow repo standards (no \"should\" in names, setup→exec→assert).\n","acceptance_criteria":"- `npm test` includes new CLI/daemon tests and passes locally.\n- Tests verify exit codes, idempotent start, and stop when not running.\n- Browser open is mocked and verified when enabled and disabled.","notes":"Starting implementation: adding Vitest unit tests for command handlers and integration tests that start the real server with a temp runtime dir and mocked browser open. Will verify exit codes, idempotent start, and stop-not-running behavior.","status":"closed","priority":1,"issue_type":"task","assignee":"assistant","created_at":"2025-10-23T17:35:11.985846+02:00","updated_at":"2025-10-24T10:24:05.191833+02:00","closed_at":"2025-10-23T19:44:37.049799+02:00","labels":["foo"],"dependencies":[{"issue_id":"UI-99","depends_on_id":"UI-94","type":"parent-child","created_at":"2025-10-23T17:35:51.849617+02:00","created_by":"max"},{"issue_id":"UI-99","depends_on_id":"UI-95","type":"blocks","created_at":"2025-10-23T17:36:23.667257+02:00","created_by":"max"},{"issue_id":"UI-99","depends_on_id":"UI-96","type":"blocks","created_at":"2025-10-23T17:36:26.673535+02:00","created_by":"max"}]}
{"id":"UI-d339","content_hash":"9f8d0022ff5f09813358db521f2e80f576af76e92d8fed6d37106816da7ba5b7","title":"Add dependency/dependent counts to issues list view","description":"Show how many dependencies and dependents each issue has in the issues list table.\n\nDisplay format options:\n- Icon-based: \"→2 ←3\" (arrows with counts)\n- Badge-based: Small pills showing counts\n- Column-based: Separate columns for each count\n\nShould be compact and not clutter the table.","status":"open","priority":2,"issue_type":"feature","assignee":"agent","created_at":"2025-11-01T18:03:48.852183191+01:00","updated_at":"2025-11-01T18:03:48.852183191+01:00"}
{"id":"UI-dd04","content_hash":"a3b89e62e0d2982dd7b58baf6bf10f6c910ab0f1a3eda44da5e88181a66bf242","title":"Add mermaid.js graph visualization to Dependencies tab","description":"Add graph visualization option in Dependencies tab:\n\n1. Add mermaid.js v11.12.1 via CDN in app/index.html\n2. Add Text/Graph toggle in Dependencies tab\n3. On Graph view:\n   - Fetch mermaid diagram via dep-tree WebSocket message\n   - Render using mermaid.render()\n   - Show loading/error states\n4. Add Direction toggle: Dependencies ↔ Dependents\n5. Make graph nodes clickable to navigate to issues\n\nStyling: Add .dep-graph-container and related styles.","status":"open","priority":2,"issue_type":"feature","assignee":"agent","created_at":"2025-11-01T18:03:49.311695266+01:00","updated_at":"2025-11-01T18:03:49.311695266+01:00"}
{"id":"UI-e479","content_hash":"f443475085603dee73270b4c170b0d49e8a5db0eb584a749669a1eb1ec73809b","title":"Add WebSocket handler for dependency tree mermaid diagrams","description":"Add server-side support for fetching mermaid dependency graphs:\n\n1. Add 'dep-tree' to MessageType in app/protocol.js\n2. Add handler in server/ws.js that calls:\n   - `bd dep tree \u003cid\u003e --format mermaid` for forward deps\n   - `bd dep tree \u003cid\u003e --format mermaid --reverse` for dependents\n3. Return mermaid diagram string in response payload\n\nRequest format: `{ type: 'dep-tree', payload: { id: string, reverse?: boolean } }`\nResponse format: `{ ok: true, payload: { diagram: string } }`","status":"open","priority":2,"issue_type":"feature","assignee":"agent","created_at":"2025-11-01T18:03:49.163876413+01:00","updated_at":"2025-11-01T18:03:49.163876413+01:00","dependencies":[{"issue_id":"UI-e479","depends_on_id":"UI-dd04","type":"blocks","created_at":"2025-11-01T18:05:04.831072993+01:00","created_by":"npr"}]}
